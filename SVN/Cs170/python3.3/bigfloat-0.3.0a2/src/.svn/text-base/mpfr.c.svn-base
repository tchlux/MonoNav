/* Generated by Cython 0.14.1 on Sun Dec  4 20:08:32 2011 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif

#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)

#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifdef __cplusplus
#define __PYX_EXTERN_C extern "C"
#else
#define __PYX_EXTERN_C extern
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE_API__mpfr
#include "gmp.h"
#include "mpfr.h"

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif


/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
/* Test for GCC > 2.95 */
#if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95))
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else /* __GNUC__ > 2 ... */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "mpfr.pyx",
};

/* Type declarations */

/* "mpfr.pyx":49
 * 
 * # Forward declaration
 * cdef class Mpfr_t             # <<<<<<<<<<<<<<
 * 
 * # Checks for valid parameter ranges
 */

struct __pyx_obj_4mpfr_Mpfr_t {
  PyObject_HEAD
  __mpfr_struct _value;
};

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct * __Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
  end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
  }
  #define __Pyx_RefNannySetupContext(name)           void *__pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r) __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r) __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r) __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XDECREF(r) do { if((r) != NULL) {__Pyx_DECREF(r);} } while(0)
#else
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);} } while(0)
#define __Pyx_XGOTREF(r) do { if((r) != NULL) {__Pyx_GOTREF(r);} } while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict,
    const char* function_name, int kw_allowed); /*proto*/

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_mpfr_prec_t(mpfr_prec_t);

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_mp_exp_t(mp_exp_t);

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static CYTHON_INLINE mpfr_prec_t __Pyx_PyInt_from_py_mpfr_prec_t(PyObject *);

static CYTHON_INLINE mp_exp_t __Pyx_PyInt_from_py_mp_exp_t(PyObject *);

static void __Pyx_AddTraceback(const char *funcname); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/
/* Module declarations from cgmp */

/* Module declarations from cmpfr */

/* Module declarations from mpfr */

static PyTypeObject *__pyx_ptype_4mpfr_Mpfr_t = 0;
static int __pyx_f_4mpfr_check_rounding_mode(mpfr_rnd_t); /*proto*/
static int __pyx_f_4mpfr_check_base(int, int); /*proto*/
static int __pyx_f_4mpfr_check_get_str_n(size_t); /*proto*/
static int __pyx_f_4mpfr_check_precision(mpfr_prec_t); /*proto*/
static int __pyx_f_4mpfr_check_initialized(struct __pyx_obj_4mpfr_Mpfr_t *); /*proto*/
static int __pyx_f_4mpfr_check_not_initialized(struct __pyx_obj_4mpfr_Mpfr_t *); /*proto*/
static PyObject *__pyx_f_4mpfr_decode_ternary_pair(int); /*proto*/
static int __pyx_f_4mpfr_cmpfr_initialized_p(mpfr_ptr); /*proto*/
#define __Pyx_MODULE_NAME "mpfr"
static int __pyx_module_is_main_mpfr = 0;

/* Implementation of mpfr */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static char __pyx_k_1[] = "invalid rounding mode {}";
static char __pyx_k_2[] = "base should be zero or in the range 2 to 62 (inclusive)";
static char __pyx_k_4[] = "base should be in the range 2 to 62 (inclusive)";
static char __pyx_k_6[] = "n should be either 0 or at least 2";
static char __pyx_k_8[] = "precision should be between {} and {}";
static char __pyx_k_9[] = "Mpfr_t instance {} should be initialized before use";
static char __pyx_k_10[] = "Mpfr_t instance {} is already initialized.";
static char __pyx_k_11[] = "Error during string conversion.";
static char __pyx_k_13[] = "exponent not in current exponent range";
static char __pyx_k_15[] = "new exponent for emin is outside allowable range";
static char __pyx_k_18[] = "mpfr_set_default_prec";
static char __pyx_k_19[] = "mpfr_get_default_prec";
static char __pyx_k_20[] = "mpfr_set_default_rounding_mode";
static char __pyx_k_21[] = "mpfr_get_default_rounding_mode";
static char __pyx_k_22[] = "MPFR_VERSION_PATCHLEVEL";
static char __pyx_k_23[] = "mpfr_buildopt_decimal_p";
static char __pyx_k_24[] = "mpfr_clear_underflow";
static char __pyx_k_25[] = "mpfr_clear_erangeflag";
static char __pyx_k__b[] = "b";
static char __pyx_k__e[] = "e";
static char __pyx_k__k[] = "k";
static char __pyx_k__n[] = "n";
static char __pyx_k__r[] = "r";
static char __pyx_k__s[] = "s";
static char __pyx_k__t[] = "t";
static char __pyx_k__x[] = "x";
static char __pyx_k__y[] = "y";
static char __pyx_k__op[] = "op";
static char __pyx_k__cop[] = "cop";
static char __pyx_k__err[] = "err";
static char __pyx_k__exp[] = "exp";
static char __pyx_k__fop[] = "fop";
static char __pyx_k__iop[] = "iop";
static char __pyx_k__op1[] = "op1";
static char __pyx_k__op2[] = "op2";
static char __pyx_k__op3[] = "op3";
static char __pyx_k__rnd[] = "rnd";
static char __pyx_k__rop[] = "rop";
static char __pyx_k__sop[] = "sop";
static char __pyx_k__base[] = "base";
static char __pyx_k__mpfr[] = "mpfr";
static char __pyx_k__prec[] = "prec";
static char __pyx_k__rnd1[] = "rnd1";
static char __pyx_k__rnd2[] = "rnd2";
static char __pyx_k__sign[] = "sign";
static char __pyx_k__major[] = "major";
static char __pyx_k__minor[] = "minor";
static char __pyx_k__split[] = "split";
static char __pyx_k___value[] = "_value";
static char __pyx_k__format[] = "format";
static char __pyx_k___mpfr_d[] = "_mpfr_d";
static char __pyx_k__mpfr_ai[] = "mpfr_ai";
static char __pyx_k__mpfr_j0[] = "mpfr_j0";
static char __pyx_k__mpfr_j1[] = "mpfr_j1";
static char __pyx_k__mpfr_jn[] = "mpfr_jn";
static char __pyx_k__mpfr_y0[] = "mpfr_y0";
static char __pyx_k__mpfr_y1[] = "mpfr_y1";
static char __pyx_k__mpfr_yn[] = "mpfr_yn";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__mpfr_abs[] = "mpfr_abs";
static char __pyx_k__mpfr_add[] = "mpfr_add";
static char __pyx_k__mpfr_agm[] = "mpfr_agm";
static char __pyx_k__mpfr_cmp[] = "mpfr_cmp";
static char __pyx_k__mpfr_cos[] = "mpfr_cos";
static char __pyx_k__mpfr_cot[] = "mpfr_cot";
static char __pyx_k__mpfr_csc[] = "mpfr_csc";
static char __pyx_k__mpfr_dim[] = "mpfr_dim";
static char __pyx_k__mpfr_div[] = "mpfr_div";
static char __pyx_k__mpfr_erf[] = "mpfr_erf";
static char __pyx_k__mpfr_exp[] = "mpfr_exp";
static char __pyx_k__mpfr_fma[] = "mpfr_fma";
static char __pyx_k__mpfr_fms[] = "mpfr_fms";
static char __pyx_k__mpfr_li2[] = "mpfr_li2";
static char __pyx_k__mpfr_log[] = "mpfr_log";
static char __pyx_k__mpfr_max[] = "mpfr_max";
static char __pyx_k__mpfr_min[] = "mpfr_min";
static char __pyx_k__mpfr_mul[] = "mpfr_mul";
static char __pyx_k__mpfr_neg[] = "mpfr_neg";
static char __pyx_k__mpfr_pow[] = "mpfr_pow";
static char __pyx_k__mpfr_sec[] = "mpfr_sec";
static char __pyx_k__mpfr_set[] = "mpfr_set";
static char __pyx_k__mpfr_sgn[] = "mpfr_sgn";
static char __pyx_k__mpfr_sin[] = "mpfr_sin";
static char __pyx_k__mpfr_sqr[] = "mpfr_sqr";
static char __pyx_k__mpfr_sub[] = "mpfr_sub";
static char __pyx_k__mpfr_tan[] = "mpfr_tan";
static char __pyx_k__MPFR_RNDA[] = "MPFR_RNDA";
static char __pyx_k__MPFR_RNDD[] = "MPFR_RNDD";
static char __pyx_k__MPFR_RNDN[] = "MPFR_RNDN";
static char __pyx_k__MPFR_RNDU[] = "MPFR_RNDU";
static char __pyx_k__MPFR_RNDZ[] = "MPFR_RNDZ";
static char __pyx_k__mpfr_acos[] = "mpfr_acos";
static char __pyx_k__mpfr_asin[] = "mpfr_asin";
static char __pyx_k__mpfr_atan[] = "mpfr_atan";
static char __pyx_k__mpfr_cbrt[] = "mpfr_cbrt";
static char __pyx_k__mpfr_ceil[] = "mpfr_ceil";
static char __pyx_k__mpfr_cosh[] = "mpfr_cosh";
static char __pyx_k__mpfr_coth[] = "mpfr_coth";
static char __pyx_k__mpfr_csch[] = "mpfr_csch";
static char __pyx_k__mpfr_eint[] = "mpfr_eint";
static char __pyx_k__mpfr_erfc[] = "mpfr_erfc";
static char __pyx_k__mpfr_exp2[] = "mpfr_exp2";
static char __pyx_k__mpfr_fmod[] = "mpfr_fmod";
static char __pyx_k__mpfr_frac[] = "mpfr_frac";
static char __pyx_k__mpfr_init[] = "mpfr_init";
static char __pyx_k__mpfr_log2[] = "mpfr_log2";
static char __pyx_k__mpfr_modf[] = "mpfr_modf";
static char __pyx_k__mpfr_rint[] = "mpfr_rint";
static char __pyx_k__mpfr_root[] = "mpfr_root";
static char __pyx_k__mpfr_sech[] = "mpfr_sech";
static char __pyx_k__mpfr_sinh[] = "mpfr_sinh";
static char __pyx_k__mpfr_sqrt[] = "mpfr_sqrt";
static char __pyx_k__mpfr_swap[] = "mpfr_swap";
static char __pyx_k__mpfr_tanh[] = "mpfr_tanh";
static char __pyx_k__mpfr_zeta[] = "mpfr_zeta";
static char __pyx_k__ValueError[] = "ValueError";
static char __pyx_k__mpfr_acosh[] = "mpfr_acosh";
static char __pyx_k__mpfr_asinh[] = "mpfr_asinh";
static char __pyx_k__mpfr_atan2[] = "mpfr_atan2";
static char __pyx_k__mpfr_atanh[] = "mpfr_atanh";
static char __pyx_k__mpfr_clear[] = "mpfr_clear";
static char __pyx_k__mpfr_exp10[] = "mpfr_exp10";
static char __pyx_k__mpfr_expm1[] = "mpfr_expm1";
static char __pyx_k__mpfr_floor[] = "mpfr_floor";
static char __pyx_k__mpfr_gamma[] = "mpfr_gamma";
static char __pyx_k__mpfr_get_d[] = "mpfr_get_d";
static char __pyx_k__mpfr_hypot[] = "mpfr_hypot";
static char __pyx_k__mpfr_inf_p[] = "mpfr_inf_p";
static char __pyx_k__mpfr_init2[] = "mpfr_init2";
static char __pyx_k__mpfr_inits[] = "mpfr_inits";
static char __pyx_k__mpfr_log10[] = "mpfr_log10";
static char __pyx_k__mpfr_log1p[] = "mpfr_log1p";
static char __pyx_k__mpfr_nan_p[] = "mpfr_nan_p";
static char __pyx_k__mpfr_round[] = "mpfr_round";
static char __pyx_k__mpfr_set_d[] = "mpfr_set_d";
static char __pyx_k__mpfr_trunc[] = "mpfr_trunc";
static char __pyx_k__patchlevel[] = "patchlevel";
static char __pyx_k__mpfr_clears[] = "mpfr_clears";
static char __pyx_k__mpfr_cmpabs[] = "mpfr_cmpabs";
static char __pyx_k__mpfr_fac_ui[] = "mpfr_fac_ui";
static char __pyx_k__mpfr_get_si[] = "mpfr_get_si";
static char __pyx_k__mpfr_inits2[] = "mpfr_inits2";
static char __pyx_k__mpfr_less_p[] = "mpfr_less_p";
static char __pyx_k__mpfr_lgamma[] = "mpfr_lgamma";
static char __pyx_k__mpfr_remquo[] = "mpfr_remquo";
static char __pyx_k__mpfr_set_si[] = "mpfr_set_si";
static char __pyx_k__mpfr_zero_p[] = "mpfr_zero_p";
static char __pyx_k__MPFR_VERSION[] = "MPFR_VERSION";
static char __pyx_k__RuntimeError[] = "RuntimeError";
static char __pyx_k__mpfr_digamma[] = "mpfr_digamma";
static char __pyx_k__mpfr_equal_p[] = "mpfr_equal_p";
static char __pyx_k__mpfr_get_exp[] = "mpfr_get_exp";
static char __pyx_k__mpfr_get_str[] = "mpfr_get_str";
static char __pyx_k__mpfr_lngamma[] = "mpfr_lngamma";
static char __pyx_k__mpfr_set_exp[] = "mpfr_set_exp";
static char __pyx_k__mpfr_set_inf[] = "mpfr_set_inf";
static char __pyx_k__mpfr_set_nan[] = "mpfr_set_nan";
static char __pyx_k__mpfr_set_str[] = "mpfr_set_str";
static char __pyx_k__mpfr_setsign[] = "mpfr_setsign";
static char __pyx_k__mpfr_signbit[] = "mpfr_signbit";
static char __pyx_k__mpfr_sin_cos[] = "mpfr_sin_cos";
static char __pyx_k__mpfr_strtofr[] = "mpfr_strtofr";
static char __pyx_k__mpfr_zeta_ui[] = "mpfr_zeta_ui";
static char __pyx_k__MPFR_PREC_MAX[] = "MPFR_PREC_MAX";
static char __pyx_k__MPFR_PREC_MIN[] = "MPFR_PREC_MIN";
static char __pyx_k__mpfr_const_pi[] = "mpfr_const_pi";
static char __pyx_k__mpfr_copysign[] = "mpfr_copysign";
static char __pyx_k__mpfr_get_emax[] = "mpfr_get_emax";
static char __pyx_k__mpfr_get_emin[] = "mpfr_get_emin";
static char __pyx_k__mpfr_get_prec[] = "mpfr_get_prec";
static char __pyx_k__mpfr_min_prec[] = "mpfr_min_prec";
static char __pyx_k__mpfr_number_p[] = "mpfr_number_p";
static char __pyx_k__mpfr_rec_sqrt[] = "mpfr_rec_sqrt";
static char __pyx_k__mpfr_set_emax[] = "mpfr_set_emax";
static char __pyx_k__mpfr_set_emin[] = "mpfr_set_emin";
static char __pyx_k__mpfr_set_prec[] = "mpfr_set_prec";
static char __pyx_k__mpfr_set_zero[] = "mpfr_set_zero";
static char __pyx_k__mpfr_can_round[] = "mpfr_can_round";
static char __pyx_k__mpfr_greater_p[] = "mpfr_greater_p";
static char __pyx_k__mpfr_integer_p[] = "mpfr_integer_p";
static char __pyx_k__mpfr_nanflag_p[] = "mpfr_nanflag_p";
static char __pyx_k__mpfr_nextabove[] = "mpfr_nextabove";
static char __pyx_k__mpfr_nextbelow[] = "mpfr_nextbelow";
static char __pyx_k__mpfr_regular_p[] = "mpfr_regular_p";
static char __pyx_k__mpfr_remainder[] = "mpfr_remainder";
static char __pyx_k__mpfr_rint_ceil[] = "mpfr_rint_ceil";
static char __pyx_k__mpfr_sinh_cosh[] = "mpfr_sinh_cosh";
static char __pyx_k__mpfr_const_log2[] = "mpfr_const_log2";
static char __pyx_k__mpfr_free_cache[] = "mpfr_free_cache";
static char __pyx_k__mpfr_get_d_2exp[] = "mpfr_get_d_2exp";
static char __pyx_k__mpfr_inexflag_p[] = "mpfr_inexflag_p";
static char __pyx_k__mpfr_nexttoward[] = "mpfr_nexttoward";
static char __pyx_k__mpfr_overflow_p[] = "mpfr_overflow_p";
static char __pyx_k__mpfr_prec_round[] = "mpfr_prec_round";
static char __pyx_k__mpfr_rint_floor[] = "mpfr_rint_floor";
static char __pyx_k__mpfr_rint_round[] = "mpfr_rint_round";
static char __pyx_k__mpfr_rint_trunc[] = "mpfr_rint_trunc";
static char __pyx_k__MPFR_VERSION_NUM[] = "MPFR_VERSION_NUM";
static char __pyx_k__mpfr_check_range[] = "mpfr_check_range";
static char __pyx_k__mpfr_clear_flags[] = "mpfr_clear_flags";
static char __pyx_k__mpfr_const_euler[] = "mpfr_const_euler";
static char __pyx_k__mpfr_get_patches[] = "mpfr_get_patches";
static char __pyx_k__mpfr_get_version[] = "mpfr_get_version";
static char __pyx_k__mpfr_lessequal_p[] = "mpfr_lessequal_p";
static char __pyx_k__mpfr_set_nanflag[] = "mpfr_set_nanflag";
static char __pyx_k__mpfr_set_si_2exp[] = "mpfr_set_si_2exp";
static char __pyx_k__mpfr_underflow_p[] = "mpfr_underflow_p";
static char __pyx_k__mpfr_unordered_p[] = "mpfr_unordered_p";
static char __pyx_k__MPFR_EMAX_DEFAULT[] = "MPFR_EMAX_DEFAULT";
static char __pyx_k__MPFR_EMIN_DEFAULT[] = "MPFR_EMIN_DEFAULT";
static char __pyx_k__mpfr_erangeflag_p[] = "mpfr_erangeflag_p";
static char __pyx_k__mpfr_fits_slong_p[] = "mpfr_fits_slong_p";
static char __pyx_k__mpfr_get_emax_max[] = "mpfr_get_emax_max";
static char __pyx_k__mpfr_get_emax_min[] = "mpfr_get_emax_min";
static char __pyx_k__mpfr_get_emin_max[] = "mpfr_get_emin_max";
static char __pyx_k__mpfr_get_emin_min[] = "mpfr_get_emin_min";
static char __pyx_k__mpfr_set_inexflag[] = "mpfr_set_inexflag";
static char __pyx_k__mpfr_set_overflow[] = "mpfr_set_overflow";
static char __pyx_k__mpfr_subnormalize[] = "mpfr_subnormalize";
static char __pyx_k__MPFR_VERSION_MAJOR[] = "MPFR_VERSION_MAJOR";
static char __pyx_k__MPFR_VERSION_MINOR[] = "MPFR_VERSION_MINOR";
static char __pyx_k__mpfr_clear_nanflag[] = "mpfr_clear_nanflag";
static char __pyx_k__mpfr_const_catalan[] = "mpfr_const_catalan";
static char __pyx_k__mpfr_initialized_p[] = "mpfr_initialized_p";
static char __pyx_k__mpfr_lessgreater_p[] = "mpfr_lessgreater_p";
static char __pyx_k__mpfr_set_underflow[] = "mpfr_set_underflow";
static char __pyx_k__MPFR_VERSION_STRING[] = "MPFR_VERSION_STRING";
static char __pyx_k__mpfr_buildopt_tls_p[] = "mpfr_buildopt_tls_p";
static char __pyx_k__mpfr_clear_inexflag[] = "mpfr_clear_inexflag";
static char __pyx_k__mpfr_clear_overflow[] = "mpfr_clear_overflow";
static char __pyx_k__mpfr_greaterequal_p[] = "mpfr_greaterequal_p";
static char __pyx_k__mpfr_print_rnd_mode[] = "mpfr_print_rnd_mode";
static char __pyx_k__mpfr_set_erangeflag[] = "mpfr_set_erangeflag";
static PyObject *__pyx_kp_s_1;
static PyObject *__pyx_kp_s_10;
static PyObject *__pyx_kp_s_11;
static PyObject *__pyx_kp_s_13;
static PyObject *__pyx_kp_s_15;
static PyObject *__pyx_n_s_18;
static PyObject *__pyx_n_s_19;
static PyObject *__pyx_kp_s_2;
static PyObject *__pyx_n_s_20;
static PyObject *__pyx_n_s_21;
static PyObject *__pyx_n_s_22;
static PyObject *__pyx_n_s_23;
static PyObject *__pyx_n_s_24;
static PyObject *__pyx_n_s_25;
static PyObject *__pyx_kp_s_4;
static PyObject *__pyx_kp_s_6;
static PyObject *__pyx_kp_s_8;
static PyObject *__pyx_kp_s_9;
static PyObject *__pyx_n_s__MPFR_EMAX_DEFAULT;
static PyObject *__pyx_n_s__MPFR_EMIN_DEFAULT;
static PyObject *__pyx_n_s__MPFR_PREC_MAX;
static PyObject *__pyx_n_s__MPFR_PREC_MIN;
static PyObject *__pyx_n_s__MPFR_RNDA;
static PyObject *__pyx_n_s__MPFR_RNDD;
static PyObject *__pyx_n_s__MPFR_RNDN;
static PyObject *__pyx_n_s__MPFR_RNDU;
static PyObject *__pyx_n_s__MPFR_RNDZ;
static PyObject *__pyx_n_s__MPFR_VERSION;
static PyObject *__pyx_n_s__MPFR_VERSION_MAJOR;
static PyObject *__pyx_n_s__MPFR_VERSION_MINOR;
static PyObject *__pyx_n_s__MPFR_VERSION_NUM;
static PyObject *__pyx_n_s__MPFR_VERSION_STRING;
static PyObject *__pyx_n_s__RuntimeError;
static PyObject *__pyx_n_s__ValueError;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s___mpfr_d;
static PyObject *__pyx_n_s___value;
static PyObject *__pyx_n_s__b;
static PyObject *__pyx_n_s__base;
static PyObject *__pyx_n_s__cop;
static PyObject *__pyx_n_s__e;
static PyObject *__pyx_n_s__err;
static PyObject *__pyx_n_s__exp;
static PyObject *__pyx_n_s__fop;
static PyObject *__pyx_n_s__format;
static PyObject *__pyx_n_s__iop;
static PyObject *__pyx_n_s__k;
static PyObject *__pyx_n_s__major;
static PyObject *__pyx_n_s__minor;
static PyObject *__pyx_n_s__mpfr;
static PyObject *__pyx_n_s__mpfr_abs;
static PyObject *__pyx_n_s__mpfr_acos;
static PyObject *__pyx_n_s__mpfr_acosh;
static PyObject *__pyx_n_s__mpfr_add;
static PyObject *__pyx_n_s__mpfr_agm;
static PyObject *__pyx_n_s__mpfr_ai;
static PyObject *__pyx_n_s__mpfr_asin;
static PyObject *__pyx_n_s__mpfr_asinh;
static PyObject *__pyx_n_s__mpfr_atan;
static PyObject *__pyx_n_s__mpfr_atan2;
static PyObject *__pyx_n_s__mpfr_atanh;
static PyObject *__pyx_n_s__mpfr_buildopt_tls_p;
static PyObject *__pyx_n_s__mpfr_can_round;
static PyObject *__pyx_n_s__mpfr_cbrt;
static PyObject *__pyx_n_s__mpfr_ceil;
static PyObject *__pyx_n_s__mpfr_check_range;
static PyObject *__pyx_n_s__mpfr_clear;
static PyObject *__pyx_n_s__mpfr_clear_flags;
static PyObject *__pyx_n_s__mpfr_clear_inexflag;
static PyObject *__pyx_n_s__mpfr_clear_nanflag;
static PyObject *__pyx_n_s__mpfr_clear_overflow;
static PyObject *__pyx_n_s__mpfr_clears;
static PyObject *__pyx_n_s__mpfr_cmp;
static PyObject *__pyx_n_s__mpfr_cmpabs;
static PyObject *__pyx_n_s__mpfr_const_catalan;
static PyObject *__pyx_n_s__mpfr_const_euler;
static PyObject *__pyx_n_s__mpfr_const_log2;
static PyObject *__pyx_n_s__mpfr_const_pi;
static PyObject *__pyx_n_s__mpfr_copysign;
static PyObject *__pyx_n_s__mpfr_cos;
static PyObject *__pyx_n_s__mpfr_cosh;
static PyObject *__pyx_n_s__mpfr_cot;
static PyObject *__pyx_n_s__mpfr_coth;
static PyObject *__pyx_n_s__mpfr_csc;
static PyObject *__pyx_n_s__mpfr_csch;
static PyObject *__pyx_n_s__mpfr_digamma;
static PyObject *__pyx_n_s__mpfr_dim;
static PyObject *__pyx_n_s__mpfr_div;
static PyObject *__pyx_n_s__mpfr_eint;
static PyObject *__pyx_n_s__mpfr_equal_p;
static PyObject *__pyx_n_s__mpfr_erangeflag_p;
static PyObject *__pyx_n_s__mpfr_erf;
static PyObject *__pyx_n_s__mpfr_erfc;
static PyObject *__pyx_n_s__mpfr_exp;
static PyObject *__pyx_n_s__mpfr_exp10;
static PyObject *__pyx_n_s__mpfr_exp2;
static PyObject *__pyx_n_s__mpfr_expm1;
static PyObject *__pyx_n_s__mpfr_fac_ui;
static PyObject *__pyx_n_s__mpfr_fits_slong_p;
static PyObject *__pyx_n_s__mpfr_floor;
static PyObject *__pyx_n_s__mpfr_fma;
static PyObject *__pyx_n_s__mpfr_fmod;
static PyObject *__pyx_n_s__mpfr_fms;
static PyObject *__pyx_n_s__mpfr_frac;
static PyObject *__pyx_n_s__mpfr_free_cache;
static PyObject *__pyx_n_s__mpfr_gamma;
static PyObject *__pyx_n_s__mpfr_get_d;
static PyObject *__pyx_n_s__mpfr_get_d_2exp;
static PyObject *__pyx_n_s__mpfr_get_emax;
static PyObject *__pyx_n_s__mpfr_get_emax_max;
static PyObject *__pyx_n_s__mpfr_get_emax_min;
static PyObject *__pyx_n_s__mpfr_get_emin;
static PyObject *__pyx_n_s__mpfr_get_emin_max;
static PyObject *__pyx_n_s__mpfr_get_emin_min;
static PyObject *__pyx_n_s__mpfr_get_exp;
static PyObject *__pyx_n_s__mpfr_get_patches;
static PyObject *__pyx_n_s__mpfr_get_prec;
static PyObject *__pyx_n_s__mpfr_get_si;
static PyObject *__pyx_n_s__mpfr_get_str;
static PyObject *__pyx_n_s__mpfr_get_version;
static PyObject *__pyx_n_s__mpfr_greater_p;
static PyObject *__pyx_n_s__mpfr_greaterequal_p;
static PyObject *__pyx_n_s__mpfr_hypot;
static PyObject *__pyx_n_s__mpfr_inexflag_p;
static PyObject *__pyx_n_s__mpfr_inf_p;
static PyObject *__pyx_n_s__mpfr_init;
static PyObject *__pyx_n_s__mpfr_init2;
static PyObject *__pyx_n_s__mpfr_initialized_p;
static PyObject *__pyx_n_s__mpfr_inits;
static PyObject *__pyx_n_s__mpfr_inits2;
static PyObject *__pyx_n_s__mpfr_integer_p;
static PyObject *__pyx_n_s__mpfr_j0;
static PyObject *__pyx_n_s__mpfr_j1;
static PyObject *__pyx_n_s__mpfr_jn;
static PyObject *__pyx_n_s__mpfr_less_p;
static PyObject *__pyx_n_s__mpfr_lessequal_p;
static PyObject *__pyx_n_s__mpfr_lessgreater_p;
static PyObject *__pyx_n_s__mpfr_lgamma;
static PyObject *__pyx_n_s__mpfr_li2;
static PyObject *__pyx_n_s__mpfr_lngamma;
static PyObject *__pyx_n_s__mpfr_log;
static PyObject *__pyx_n_s__mpfr_log10;
static PyObject *__pyx_n_s__mpfr_log1p;
static PyObject *__pyx_n_s__mpfr_log2;
static PyObject *__pyx_n_s__mpfr_max;
static PyObject *__pyx_n_s__mpfr_min;
static PyObject *__pyx_n_s__mpfr_min_prec;
static PyObject *__pyx_n_s__mpfr_modf;
static PyObject *__pyx_n_s__mpfr_mul;
static PyObject *__pyx_n_s__mpfr_nan_p;
static PyObject *__pyx_n_s__mpfr_nanflag_p;
static PyObject *__pyx_n_s__mpfr_neg;
static PyObject *__pyx_n_s__mpfr_nextabove;
static PyObject *__pyx_n_s__mpfr_nextbelow;
static PyObject *__pyx_n_s__mpfr_nexttoward;
static PyObject *__pyx_n_s__mpfr_number_p;
static PyObject *__pyx_n_s__mpfr_overflow_p;
static PyObject *__pyx_n_s__mpfr_pow;
static PyObject *__pyx_n_s__mpfr_prec_round;
static PyObject *__pyx_n_s__mpfr_print_rnd_mode;
static PyObject *__pyx_n_s__mpfr_rec_sqrt;
static PyObject *__pyx_n_s__mpfr_regular_p;
static PyObject *__pyx_n_s__mpfr_remainder;
static PyObject *__pyx_n_s__mpfr_remquo;
static PyObject *__pyx_n_s__mpfr_rint;
static PyObject *__pyx_n_s__mpfr_rint_ceil;
static PyObject *__pyx_n_s__mpfr_rint_floor;
static PyObject *__pyx_n_s__mpfr_rint_round;
static PyObject *__pyx_n_s__mpfr_rint_trunc;
static PyObject *__pyx_n_s__mpfr_root;
static PyObject *__pyx_n_s__mpfr_round;
static PyObject *__pyx_n_s__mpfr_sec;
static PyObject *__pyx_n_s__mpfr_sech;
static PyObject *__pyx_n_s__mpfr_set;
static PyObject *__pyx_n_s__mpfr_set_d;
static PyObject *__pyx_n_s__mpfr_set_emax;
static PyObject *__pyx_n_s__mpfr_set_emin;
static PyObject *__pyx_n_s__mpfr_set_erangeflag;
static PyObject *__pyx_n_s__mpfr_set_exp;
static PyObject *__pyx_n_s__mpfr_set_inexflag;
static PyObject *__pyx_n_s__mpfr_set_inf;
static PyObject *__pyx_n_s__mpfr_set_nan;
static PyObject *__pyx_n_s__mpfr_set_nanflag;
static PyObject *__pyx_n_s__mpfr_set_overflow;
static PyObject *__pyx_n_s__mpfr_set_prec;
static PyObject *__pyx_n_s__mpfr_set_si;
static PyObject *__pyx_n_s__mpfr_set_si_2exp;
static PyObject *__pyx_n_s__mpfr_set_str;
static PyObject *__pyx_n_s__mpfr_set_underflow;
static PyObject *__pyx_n_s__mpfr_set_zero;
static PyObject *__pyx_n_s__mpfr_setsign;
static PyObject *__pyx_n_s__mpfr_sgn;
static PyObject *__pyx_n_s__mpfr_signbit;
static PyObject *__pyx_n_s__mpfr_sin;
static PyObject *__pyx_n_s__mpfr_sin_cos;
static PyObject *__pyx_n_s__mpfr_sinh;
static PyObject *__pyx_n_s__mpfr_sinh_cosh;
static PyObject *__pyx_n_s__mpfr_sqr;
static PyObject *__pyx_n_s__mpfr_sqrt;
static PyObject *__pyx_n_s__mpfr_strtofr;
static PyObject *__pyx_n_s__mpfr_sub;
static PyObject *__pyx_n_s__mpfr_subnormalize;
static PyObject *__pyx_n_s__mpfr_swap;
static PyObject *__pyx_n_s__mpfr_tan;
static PyObject *__pyx_n_s__mpfr_tanh;
static PyObject *__pyx_n_s__mpfr_trunc;
static PyObject *__pyx_n_s__mpfr_underflow_p;
static PyObject *__pyx_n_s__mpfr_unordered_p;
static PyObject *__pyx_n_s__mpfr_y0;
static PyObject *__pyx_n_s__mpfr_y1;
static PyObject *__pyx_n_s__mpfr_yn;
static PyObject *__pyx_n_s__mpfr_zero_p;
static PyObject *__pyx_n_s__mpfr_zeta;
static PyObject *__pyx_n_s__mpfr_zeta_ui;
static PyObject *__pyx_n_s__n;
static PyObject *__pyx_n_s__op;
static PyObject *__pyx_n_s__op1;
static PyObject *__pyx_n_s__op2;
static PyObject *__pyx_n_s__op3;
static PyObject *__pyx_n_s__patchlevel;
static PyObject *__pyx_n_s__prec;
static PyObject *__pyx_n_s__r;
static PyObject *__pyx_n_s__rnd;
static PyObject *__pyx_n_s__rnd1;
static PyObject *__pyx_n_s__rnd2;
static PyObject *__pyx_n_s__rop;
static PyObject *__pyx_n_s__s;
static PyObject *__pyx_n_s__sign;
static PyObject *__pyx_n_s__sop;
static PyObject *__pyx_n_s__split;
static PyObject *__pyx_n_s__t;
static PyObject *__pyx_n_s__x;
static PyObject *__pyx_n_s__y;
static PyObject *__pyx_k_tuple_3;
static PyObject *__pyx_k_tuple_5;
static PyObject *__pyx_k_tuple_7;
static PyObject *__pyx_k_tuple_12;
static PyObject *__pyx_k_tuple_14;
static PyObject *__pyx_k_tuple_16;
static PyObject *__pyx_k_tuple_17;

/* "mpfr.pyx":52
 * 
 * # Checks for valid parameter ranges
 * cdef int check_rounding_mode(cmpfr.mpfr_rnd_t rnd) except -1:             # <<<<<<<<<<<<<<
 *     """
 *     Check that the given rounding mode is valid.  Raise ValueError if not.
 */

static  int __pyx_f_4mpfr_check_rounding_mode(mpfr_rnd_t __pyx_v_rnd) {
  int __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("check_rounding_mode");

  /* "mpfr.pyx":57
 * 
 *     """
 *     if MPFR_RNDN <= rnd <= MPFR_RNDA:             # <<<<<<<<<<<<<<
 *         return 0
 *     else:
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__MPFR_RNDN); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_rnd); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_LE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_IsTrue(__pyx_t_3)) {
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__MPFR_RNDA); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_LE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "mpfr.pyx":58
 *     """
 *     if MPFR_RNDN <= rnd <= MPFR_RNDA:
 *         return 0             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError("invalid rounding mode {}".format(rnd))
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "mpfr.pyx":60
 *         return 0
 *     else:
 *         raise ValueError("invalid rounding mode {}".format(rnd))             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = PyObject_GetAttr(((PyObject *)__pyx_kp_s_1), __pyx_n_s__format); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyInt_FromLong(__pyx_v_rnd); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_1), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mpfr.check_rounding_mode");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":63
 * 
 * 
 * cdef int check_base(int b, int allow_zero) except -1:             # <<<<<<<<<<<<<<
 *     """
 *     Check that the given base (for string conversion) is valid.
 */

static  int __pyx_f_4mpfr_check_base(int __pyx_v_b, int __pyx_v_allow_zero) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("check_base");

  /* "mpfr.pyx":70
 * 
 *     """
 *     if allow_zero:             # <<<<<<<<<<<<<<
 *         if 2 <= b <= 62 or b == 0:
 *             return 0
 */
  if (__pyx_v_allow_zero) {

    /* "mpfr.pyx":71
 *     """
 *     if allow_zero:
 *         if 2 <= b <= 62 or b == 0:             # <<<<<<<<<<<<<<
 *             return 0
 *         else:
 */
    __pyx_t_1 = (2 <= __pyx_v_b);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_b <= 62);
    }
    if (!__pyx_t_1) {
      __pyx_t_2 = (__pyx_v_b == 0);
      __pyx_t_3 = __pyx_t_2;
    } else {
      __pyx_t_3 = __pyx_t_1;
    }
    if (__pyx_t_3) {

      /* "mpfr.pyx":72
 *     if allow_zero:
 *         if 2 <= b <= 62 or b == 0:
 *             return 0             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(
 */
      __pyx_r = 0;
      goto __pyx_L0;
      goto __pyx_L4;
    }
    /*else*/ {

      /* "mpfr.pyx":74
 *             return 0
 *         else:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "base should be zero or in the range 2 to 62 (inclusive)"
 *             )
 */
      __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "mpfr.pyx":78
 *             )
 *     else:
 *         if 2 <= b <= 62:             # <<<<<<<<<<<<<<
 *             return 0
 *         else:
 */
    __pyx_t_3 = (2 <= __pyx_v_b);
    if (__pyx_t_3) {
      __pyx_t_3 = (__pyx_v_b <= 62);
    }
    if (__pyx_t_3) {

      /* "mpfr.pyx":79
 *     else:
 *         if 2 <= b <= 62:
 *             return 0             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("base should be in the range 2 to 62 (inclusive)")
 */
      __pyx_r = 0;
      goto __pyx_L0;
      goto __pyx_L5;
    }
    /*else*/ {

      /* "mpfr.pyx":81
 *             return 0
 *         else:
 *             raise ValueError("base should be in the range 2 to 62 (inclusive)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_5), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L5:;
  }
  __pyx_L3:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mpfr.check_base");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":84
 * 
 * 
 * cdef int check_get_str_n(size_t n) except -1:             # <<<<<<<<<<<<<<
 *     """
 *     Check that the given number of requested digits is valid.
 */

static  int __pyx_f_4mpfr_check_get_str_n(size_t __pyx_v_n) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("check_get_str_n");

  /* "mpfr.pyx":91
 * 
 *     """
 *     if n == 0 or 2 <= n:             # <<<<<<<<<<<<<<
 *         return 0
 *     else:
 */
  __pyx_t_1 = (__pyx_v_n == 0);
  if (!__pyx_t_1) {
    __pyx_t_2 = (2 <= __pyx_v_n);
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  if (__pyx_t_3) {

    /* "mpfr.pyx":92
 *     """
 *     if n == 0 or 2 <= n:
 *         return 0             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError("n should be either 0 or at least 2")
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "mpfr.pyx":94
 *         return 0
 *     else:
 *         raise ValueError("n should be either 0 or at least 2")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_7), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mpfr.check_get_str_n");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":97
 * 
 * 
 * cdef int check_precision(cmpfr.mpfr_prec_t precision) except -1:             # <<<<<<<<<<<<<<
 *     """
 *     Check that the given precision is valid.  Raise ValueError if not.
 */

static  int __pyx_f_4mpfr_check_precision(mpfr_prec_t __pyx_v_precision) {
  int __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("check_precision");

  /* "mpfr.pyx":102
 * 
 *     """
 *     if MPFR_PREC_MIN <= precision <= MPFR_PREC_MAX:             # <<<<<<<<<<<<<<
 *         return 0
 *     else:
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__MPFR_PREC_MIN); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_to_py_mpfr_prec_t(__pyx_v_precision); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_LE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_IsTrue(__pyx_t_3)) {
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__MPFR_PREC_MAX); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_LE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "mpfr.pyx":103
 *     """
 *     if MPFR_PREC_MIN <= precision <= MPFR_PREC_MAX:
 *         return 0             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError(
 */
    __pyx_r = 0;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "mpfr.pyx":106
 *     else:
 *         raise ValueError(
 *             "precision should be between {} and {}".format(             # <<<<<<<<<<<<<<
 *                 MPFR_PREC_MIN, MPFR_PREC_MAX
 *             )
 */
    __pyx_t_3 = PyObject_GetAttr(((PyObject *)__pyx_kp_s_8), __pyx_n_s__format); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);

    /* "mpfr.pyx":107
 *         raise ValueError(
 *             "precision should be between {} and {}".format(
 *                 MPFR_PREC_MIN, MPFR_PREC_MAX             # <<<<<<<<<<<<<<
 *             )
 *         )
 */
    __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__MPFR_PREC_MIN); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);

    /* "mpfr.pyx":108
 *             "precision should be between {} and {}".format(
 *                 MPFR_PREC_MIN, MPFR_PREC_MAX
 *             )             # <<<<<<<<<<<<<<
 *         )
 * 
 */
    __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__MPFR_PREC_MAX); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mpfr.check_precision");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":112
 * 
 * 
 * cdef int check_initialized(Mpfr_t x) except -1:             # <<<<<<<<<<<<<<
 *     """
 *     Check that the given Mpfr_t x instance has been initialized.
 */

static  int __pyx_f_4mpfr_check_initialized(struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_x) {
  int __pyx_r;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("check_initialized");

  /* "mpfr.pyx":119
 * 
 *     """
 *     if not cmpfr_initialized_p(&x._value):             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             "Mpfr_t instance {} should be initialized before use".format(x)
 */
  __pyx_t_1 = (!__pyx_f_4mpfr_cmpfr_initialized_p((&__pyx_v_x->_value)));
  if (__pyx_t_1) {

    /* "mpfr.pyx":121
 *     if not cmpfr_initialized_p(&x._value):
 *         raise ValueError(
 *             "Mpfr_t instance {} should be initialized before use".format(x)             # <<<<<<<<<<<<<<
 *         )
 * 
 */
    __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_kp_s_9), __pyx_n_s__format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(((PyObject *)__pyx_v_x));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_x));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_x));
    __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mpfr.check_initialized");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":125
 * 
 * 
 * cdef int check_not_initialized(Mpfr_t x) except -1:             # <<<<<<<<<<<<<<
 *     """
 *     Check that the given Mpfr_t x instance has *not* been initialized.
 */

static  int __pyx_f_4mpfr_check_not_initialized(struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_x) {
  int __pyx_r;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("check_not_initialized");

  /* "mpfr.pyx":133
 * 
 *     """
 *     if cmpfr_initialized_p(&x._value):             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             "Mpfr_t instance {} is already initialized.".format(x)
 */
  __pyx_t_1 = __pyx_f_4mpfr_cmpfr_initialized_p((&__pyx_v_x->_value));
  if (__pyx_t_1) {

    /* "mpfr.pyx":135
 *     if cmpfr_initialized_p(&x._value):
 *         raise ValueError(
 *             "Mpfr_t instance {} is already initialized.".format(x)             # <<<<<<<<<<<<<<
 *         )
 * 
 */
    __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_kp_s_10), __pyx_n_s__format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    __Pyx_INCREF(((PyObject *)__pyx_v_x));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_x));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_x));
    __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_3));
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_t_3), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mpfr.check_not_initialized");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":139
 * 
 * 
 * cdef decode_ternary_pair(int ternary_pair):             # <<<<<<<<<<<<<<
 *     """
 *     Decode an encoded pair of ternary values.
 */

static  PyObject *__pyx_f_4mpfr_decode_ternary_pair(int __pyx_v_ternary_pair) {
  int __pyx_v_first_ternary;
  int __pyx_v_second_ternary;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("decode_ternary_pair");

  /* "mpfr.pyx":151
 *     cdef int first_ternary, second_ternary
 * 
 *     first_ternary = ternary_pair & 3             # <<<<<<<<<<<<<<
 *     if first_ternary == 2:
 *         first_ternary = -1
 */
  __pyx_v_first_ternary = (__pyx_v_ternary_pair & 3);

  /* "mpfr.pyx":152
 * 
 *     first_ternary = ternary_pair & 3
 *     if first_ternary == 2:             # <<<<<<<<<<<<<<
 *         first_ternary = -1
 *     second_ternary = ternary_pair >> 2
 */
  __pyx_t_1 = (__pyx_v_first_ternary == 2);
  if (__pyx_t_1) {

    /* "mpfr.pyx":153
 *     first_ternary = ternary_pair & 3
 *     if first_ternary == 2:
 *         first_ternary = -1             # <<<<<<<<<<<<<<
 *     second_ternary = ternary_pair >> 2
 *     if second_ternary == 2:
 */
    __pyx_v_first_ternary = -1;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "mpfr.pyx":154
 *     if first_ternary == 2:
 *         first_ternary = -1
 *     second_ternary = ternary_pair >> 2             # <<<<<<<<<<<<<<
 *     if second_ternary == 2:
 *         second_ternary = -1
 */
  __pyx_v_second_ternary = (__pyx_v_ternary_pair >> 2);

  /* "mpfr.pyx":155
 *         first_ternary = -1
 *     second_ternary = ternary_pair >> 2
 *     if second_ternary == 2:             # <<<<<<<<<<<<<<
 *         second_ternary = -1
 *     return first_ternary, second_ternary
 */
  __pyx_t_1 = (__pyx_v_second_ternary == 2);
  if (__pyx_t_1) {

    /* "mpfr.pyx":156
 *     second_ternary = ternary_pair >> 2
 *     if second_ternary == 2:
 *         second_ternary = -1             # <<<<<<<<<<<<<<
 *     return first_ternary, second_ternary
 * 
 */
    __pyx_v_second_ternary = -1;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "mpfr.pyx":157
 *     if second_ternary == 2:
 *         second_ternary = -1
 *     return first_ternary, second_ternary             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_first_ternary); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(__pyx_v_second_ternary); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mpfr.decode_ternary_pair");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":160
 * 
 * 
 * cdef int cmpfr_initialized_p(cmpfr.mpfr_ptr op):             # <<<<<<<<<<<<<<
 *     """
 *     Return non-zero if op is initialized.  Return zero otherwise.
 */

static  int __pyx_f_4mpfr_cmpfr_initialized_p(mpfr_ptr __pyx_v_op) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("cmpfr_initialized_p");

  /* "mpfr.pyx":165
 * 
 *     """
 *     return op._mpfr_d != NULL             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (__pyx_v_op->_mpfr_d != NULL);
  goto __pyx_L0;

  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":186
 *     cdef cmpfr.__mpfr_struct _value
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if cmpfr_initialized_p(&self._value):
 *             cmpfr.mpfr_clear(&self._value)
 */

static void __pyx_pf_4mpfr_6Mpfr_t___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_4mpfr_6Mpfr_t___dealloc__(PyObject *__pyx_v_self) {
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "mpfr.pyx":187
 * 
 *     def __dealloc__(self):
 *         if cmpfr_initialized_p(&self._value):             # <<<<<<<<<<<<<<
 *             cmpfr.mpfr_clear(&self._value)
 * 
 */
  __pyx_t_1 = __pyx_f_4mpfr_cmpfr_initialized_p((&((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_v_self)->_value));
  if (__pyx_t_1) {

    /* "mpfr.pyx":188
 *     def __dealloc__(self):
 *         if cmpfr_initialized_p(&self._value):
 *             cmpfr.mpfr_clear(&self._value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    mpfr_clear((&((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_v_self)->_value));
    goto __pyx_L5;
  }
  __pyx_L5:;

  __Pyx_RefNannyFinishContext();
}

/* "mpfr.pyx":195
 * ###############################################################################
 * 
 * def mpfr_initialized_p(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op has been initialized.  Return False otherwise.
 */

static PyObject *__pyx_pf_4mpfr_mpfr_initialized_p(PyObject *__pyx_self, PyObject *__pyx_v_op); /*proto*/
static char __pyx_doc_4mpfr_mpfr_initialized_p[] = "mpfr_initialized_p(Mpfr_t op)\n\n    Return True if op has been initialized.  Return False otherwise.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_mpfr_initialized_p = {__Pyx_NAMESTR("mpfr_initialized_p"), (PyCFunction)__pyx_pf_4mpfr_mpfr_initialized_p, METH_O, __Pyx_DOCSTR(__pyx_doc_4mpfr_mpfr_initialized_p)};
static PyObject *__pyx_pf_4mpfr_mpfr_initialized_p(PyObject *__pyx_self, PyObject *__pyx_v_op) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("mpfr_initialized_p");
  __pyx_self = __pyx_self;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":200
 * 
 *     """
 *     return bool(cmpfr_initialized_p(&op._value))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_f_4mpfr_cmpfr_initialized_p((&((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_v_op)->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_2))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_initialized_p");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":207
 * ###############################################################################
 * 
 * def mpfr_init2(Mpfr_t x not None, cmpfr.mpfr_prec_t prec):             # <<<<<<<<<<<<<<
 *     """
 *     Initialize x, set its precision to be prec bits and its value to NaN.
 */

static PyObject *__pyx_pf_4mpfr_1mpfr_init2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_1mpfr_init2[] = "mpfr_init2(Mpfr_t x, mpfr_prec_t prec)\n\n    Initialize x, set its precision to be prec bits and its value to NaN.\n\n    Normally, a variable should be initialized once only or at least be\n    cleared, using mpfr_clear, between initializations. To change the precision\n    of a variable which has already been initialized, use mpfr_set_prec. The\n    precision prec must be an integer between MPFR_PREC_MIN and MPFR_PREC_MAX\n    (otherwise the behavior is undefined).\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_1mpfr_init2 = {__Pyx_NAMESTR("mpfr_init2"), (PyCFunction)__pyx_pf_4mpfr_1mpfr_init2, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_1mpfr_init2)};
static PyObject *__pyx_pf_4mpfr_1mpfr_init2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_x = 0;
  mpfr_prec_t __pyx_v_prec;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__prec,0};
  __Pyx_RefNannySetupContext("mpfr_init2");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__prec);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_init2", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_init2") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_prec = __Pyx_PyInt_from_py_mpfr_prec_t(values[1]); if (unlikely((__pyx_v_prec == (mpfr_prec_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_prec = __Pyx_PyInt_from_py_mpfr_prec_t(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_prec == (mpfr_prec_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_init2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_init2");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_4mpfr_Mpfr_t, 0, "x", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":218
 * 
 *     """
 *     check_not_initialized(x)             # <<<<<<<<<<<<<<
 *     check_precision(prec)
 *     cmpfr.mpfr_init2(&x._value, prec)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_x);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_not_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":219
 *     """
 *     check_not_initialized(x)
 *     check_precision(prec)             # <<<<<<<<<<<<<<
 *     cmpfr.mpfr_init2(&x._value, prec)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_precision(__pyx_v_prec); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":220
 *     check_not_initialized(x)
 *     check_precision(prec)
 *     cmpfr.mpfr_init2(&x._value, prec)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_inits2(cmpfr.mpfr_prec_t prec, *args):
 */
  mpfr_init2((&__pyx_v_x->_value), __pyx_v_prec);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_init2");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":222
 *     cmpfr.mpfr_init2(&x._value, prec)
 * 
 * def mpfr_inits2(cmpfr.mpfr_prec_t prec, *args):             # <<<<<<<<<<<<<<
 *     """
 *     Initialize each of the variables in args: set its precision to prec bits
 */

static PyObject *__pyx_pf_4mpfr_2mpfr_inits2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_2mpfr_inits2[] = "mpfr_inits2(mpfr_prec_t prec, *args)\n\n    Initialize each of the variables in args: set its precision to prec bits\n    and its value to NaN.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_2mpfr_inits2 = {__Pyx_NAMESTR("mpfr_inits2"), (PyCFunction)__pyx_pf_4mpfr_2mpfr_inits2, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_2mpfr_inits2)};
static PyObject *__pyx_pf_4mpfr_2mpfr_inits2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  mpfr_prec_t __pyx_v_prec;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_arg;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__prec,0};
  __Pyx_RefNannySetupContext("mpfr_inits2");
  __pyx_self = __pyx_self;
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args)); __Pyx_GOTREF(__pyx_v_args);
    if (unlikely(!__pyx_v_args)) return NULL;
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      default:
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__prec);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      const Py_ssize_t used_pos_args = (PyTuple_GET_SIZE(__pyx_args) < 1) ? PyTuple_GET_SIZE(__pyx_args) : 1;
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "mpfr_inits2") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_prec = __Pyx_PyInt_from_py_mpfr_prec_t(values[0]); if (unlikely((__pyx_v_prec == (mpfr_prec_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_prec = __Pyx_PyInt_from_py_mpfr_prec_t(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_prec == (mpfr_prec_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_inits2", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_AddTraceback("mpfr.mpfr_inits2");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_arg = Py_None; __Pyx_INCREF(Py_None);

  /* "mpfr.pyx":228
 * 
 *     """
 *     check_precision(prec)             # <<<<<<<<<<<<<<
 *     for arg in args:
 *         mpfr_init2(arg, prec)
 */
  __pyx_t_1 = __pyx_f_4mpfr_check_precision(__pyx_v_prec); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":229
 *     """
 *     check_precision(prec)
 *     for arg in args:             # <<<<<<<<<<<<<<
 *         mpfr_init2(arg, prec)
 * 
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_2 = 0; __pyx_t_3 = ((PyObject *)__pyx_v_args); __Pyx_INCREF(__pyx_t_3);
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
    __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++;
    __Pyx_DECREF(__pyx_v_arg);
    __pyx_v_arg = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "mpfr.pyx":230
 *     check_precision(prec)
 *     for arg in args:
 *         mpfr_init2(arg, prec)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_clear(Mpfr_t x not None):
 */
    __pyx_t_4 = __Pyx_GetName(__pyx_m, __pyx_n_s__mpfr_init2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_to_py_mpfr_prec_t(__pyx_v_prec); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_6));
    __Pyx_INCREF(__pyx_v_arg);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_arg);
    __Pyx_GIVEREF(__pyx_v_arg);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_Call(__pyx_t_4, ((PyObject *)__pyx_t_6), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_6)); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("mpfr.mpfr_inits2");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_arg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":232
 *         mpfr_init2(arg, prec)
 * 
 * def mpfr_clear(Mpfr_t x not None):             # <<<<<<<<<<<<<<
 *     """
 *     Free the space occupied by the significand of x.
 */

static PyObject *__pyx_pf_4mpfr_3mpfr_clear(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static char __pyx_doc_4mpfr_3mpfr_clear[] = "mpfr_clear(Mpfr_t x)\n\n    Free the space occupied by the significand of x.\n\n    It's not usually necessary to call this function directly: it will be\n    called automatically when x is garbage-collected.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_3mpfr_clear = {__Pyx_NAMESTR("mpfr_clear"), (PyCFunction)__pyx_pf_4mpfr_3mpfr_clear, METH_O, __Pyx_DOCSTR(__pyx_doc_4mpfr_3mpfr_clear)};
static PyObject *__pyx_pf_4mpfr_3mpfr_clear(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("mpfr_clear");
  __pyx_self = __pyx_self;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_4mpfr_Mpfr_t, 0, "x", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":240
 * 
 *     """
 *     check_initialized(x)             # <<<<<<<<<<<<<<
 *     cmpfr.mpfr_clear(&x._value)
 * 
 */
  __pyx_t_1 = __pyx_v_x;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":241
 *     """
 *     check_initialized(x)
 *     cmpfr.mpfr_clear(&x._value)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_clears(*args):
 */
  mpfr_clear((&((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_v_x)->_value));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_clear");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":243
 *     cmpfr.mpfr_clear(&x._value)
 * 
 * def mpfr_clears(*args):             # <<<<<<<<<<<<<<
 *     """
 *     Free the space occupied by each of the variables in args.  See mpfr_clear
 */

static PyObject *__pyx_pf_4mpfr_4mpfr_clears(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_4mpfr_clears[] = "mpfr_clears(*args)\n\n    Free the space occupied by each of the variables in args.  See mpfr_clear\n    for more details.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_4mpfr_clears = {__Pyx_NAMESTR("mpfr_clears"), (PyCFunction)__pyx_pf_4mpfr_4mpfr_clears, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_4mpfr_clears)};
static PyObject *__pyx_pf_4mpfr_4mpfr_clears(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_arg;
  PyObject *__pyx_r = NULL;
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("mpfr_clears");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "mpfr_clears", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_v_arg = Py_None; __Pyx_INCREF(Py_None);

  /* "mpfr.pyx":249
 * 
 *     """
 *     for arg in args:             # <<<<<<<<<<<<<<
 *         mpfr_clear(arg)
 * 
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = 0; __pyx_t_2 = ((PyObject *)__pyx_v_args); __Pyx_INCREF(__pyx_t_2);
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++;
    __Pyx_DECREF(__pyx_v_arg);
    __pyx_v_arg = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "mpfr.pyx":250
 *     """
 *     for arg in args:
 *         mpfr_clear(arg)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_init(Mpfr_t x not None):
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__mpfr_clear); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __Pyx_INCREF(__pyx_v_arg);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_arg);
    __Pyx_GIVEREF(__pyx_v_arg);
    __pyx_t_5 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mpfr.mpfr_clears");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_arg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":252
 *         mpfr_clear(arg)
 * 
 * def mpfr_init(Mpfr_t x not None):             # <<<<<<<<<<<<<<
 *     """
 *     Initialize x, set its precision to the default precision, and set its value
 */

static PyObject *__pyx_pf_4mpfr_5mpfr_init(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static char __pyx_doc_4mpfr_5mpfr_init[] = "mpfr_init(Mpfr_t x)\n\n    Initialize x, set its precision to the default precision, and set its value\n    to NaN. The default precision can be changed by a call to\n    mpfr_set_default_prec.\n\n    Warning! In a given program, some other libraries might change the default\n    precision and not restore it. Thus it is safer to use mpfr_init2.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_5mpfr_init = {__Pyx_NAMESTR("mpfr_init"), (PyCFunction)__pyx_pf_4mpfr_5mpfr_init, METH_O, __Pyx_DOCSTR(__pyx_doc_4mpfr_5mpfr_init)};
static PyObject *__pyx_pf_4mpfr_5mpfr_init(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("mpfr_init");
  __pyx_self = __pyx_self;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_4mpfr_Mpfr_t, 0, "x", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":262
 * 
 *     """
 *     check_not_initialized(x)             # <<<<<<<<<<<<<<
 *     cmpfr.mpfr_init(&x._value)
 * 
 */
  __pyx_t_1 = __pyx_v_x;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_not_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":263
 *     """
 *     check_not_initialized(x)
 *     cmpfr.mpfr_init(&x._value)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_inits(*args):
 */
  mpfr_init((&((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_v_x)->_value));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_init");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":265
 *     cmpfr.mpfr_init(&x._value)
 * 
 * def mpfr_inits(*args):             # <<<<<<<<<<<<<<
 *     """
 *     Initialize each of the variables in args: set its precision to the default
 */

static PyObject *__pyx_pf_4mpfr_6mpfr_inits(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_6mpfr_inits[] = "mpfr_inits(*args)\n\n    Initialize each of the variables in args: set its precision to the default\n    precision, and set its value to NaN. The default precision can be changed\n    by a call to mpfr_set_default_prec.\n\n    Warning! In a given program, some other libraries might change the default\n    precision and not restore it. Thus it is safer to use mpfr_inits2.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_6mpfr_inits = {__Pyx_NAMESTR("mpfr_inits"), (PyCFunction)__pyx_pf_4mpfr_6mpfr_inits, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_6mpfr_inits)};
static PyObject *__pyx_pf_4mpfr_6mpfr_inits(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_arg;
  PyObject *__pyx_r = NULL;
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("mpfr_inits");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "mpfr_inits", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_v_arg = Py_None; __Pyx_INCREF(Py_None);

  /* "mpfr.pyx":275
 * 
 *     """
 *     for arg in args:             # <<<<<<<<<<<<<<
 *         mpfr_init(arg)
 * 
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = 0; __pyx_t_2 = ((PyObject *)__pyx_v_args); __Pyx_INCREF(__pyx_t_2);
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++;
    __Pyx_DECREF(__pyx_v_arg);
    __pyx_v_arg = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "mpfr.pyx":276
 *     """
 *     for arg in args:
 *         mpfr_init(arg)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_set_default_prec(cmpfr.mpfr_prec_t prec):
 */
    __pyx_t_3 = __Pyx_GetName(__pyx_m, __pyx_n_s__mpfr_init); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __Pyx_INCREF(__pyx_v_arg);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_arg);
    __Pyx_GIVEREF(__pyx_v_arg);
    __pyx_t_5 = PyObject_Call(__pyx_t_3, ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("mpfr.mpfr_inits");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_DECREF(__pyx_v_arg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":278
 *         mpfr_init(arg)
 * 
 * def mpfr_set_default_prec(cmpfr.mpfr_prec_t prec):             # <<<<<<<<<<<<<<
 *     """
 *     Set the default precision to be exactly prec bits.
 */

static PyObject *__pyx_pf_4mpfr_7mpfr_set_default_prec(PyObject *__pyx_self, PyObject *__pyx_arg_prec); /*proto*/
static char __pyx_doc_4mpfr_7mpfr_set_default_prec[] = "mpfr_set_default_prec(mpfr_prec_t prec)\n\n    Set the default precision to be exactly prec bits.\n\n    prec can be any integer between MPFR_PREC_MIN and MPFR_PREC_MAX. The\n    precision of a variable means the number of bits used to store its\n    significand. All subsequent calls to mpfr_init or mpfr_inits will use this\n    precision, but previously initialized variables are unaffected. The default\n    precision is set to 53 bits initially.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_7mpfr_set_default_prec = {__Pyx_NAMESTR("mpfr_set_default_prec"), (PyCFunction)__pyx_pf_4mpfr_7mpfr_set_default_prec, METH_O, __Pyx_DOCSTR(__pyx_doc_4mpfr_7mpfr_set_default_prec)};
static PyObject *__pyx_pf_4mpfr_7mpfr_set_default_prec(PyObject *__pyx_self, PyObject *__pyx_arg_prec) {
  mpfr_prec_t __pyx_v_prec;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("mpfr_set_default_prec");
  __pyx_self = __pyx_self;
  assert(__pyx_arg_prec); {
    __pyx_v_prec = __Pyx_PyInt_from_py_mpfr_prec_t(__pyx_arg_prec); if (unlikely((__pyx_v_prec == (mpfr_prec_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_set_default_prec");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "mpfr.pyx":289
 * 
 *     """
 *     check_precision(prec)             # <<<<<<<<<<<<<<
 *     cmpfr.mpfr_set_default_prec(prec)
 * 
 */
  __pyx_t_1 = __pyx_f_4mpfr_check_precision(__pyx_v_prec); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":290
 *     """
 *     check_precision(prec)
 *     cmpfr.mpfr_set_default_prec(prec)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_get_default_prec():
 */
  mpfr_set_default_prec(__pyx_v_prec);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mpfr.mpfr_set_default_prec");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":292
 *     cmpfr.mpfr_set_default_prec(prec)
 * 
 * def mpfr_get_default_prec():             # <<<<<<<<<<<<<<
 *     """
 *     Return the current default MPFR precision in bits.
 */

static PyObject *__pyx_pf_4mpfr_8mpfr_get_default_prec(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_8mpfr_get_default_prec[] = "mpfr_get_default_prec()\n\n    Return the current default MPFR precision in bits.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_8mpfr_get_default_prec = {__Pyx_NAMESTR("mpfr_get_default_prec"), (PyCFunction)__pyx_pf_4mpfr_8mpfr_get_default_prec, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_8mpfr_get_default_prec)};
static PyObject *__pyx_pf_4mpfr_8mpfr_get_default_prec(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("mpfr_get_default_prec");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":297
 * 
 *     """
 *     return cmpfr.mpfr_get_default_prec()             # <<<<<<<<<<<<<<
 * 
 * def mpfr_set_prec(Mpfr_t x not None, cmpfr.mpfr_prec_t prec):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_mpfr_prec_t(mpfr_get_default_prec()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_get_default_prec");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":299
 *     return cmpfr.mpfr_get_default_prec()
 * 
 * def mpfr_set_prec(Mpfr_t x not None, cmpfr.mpfr_prec_t prec):             # <<<<<<<<<<<<<<
 *     """
 *     Reset precision of x.
 */

static PyObject *__pyx_pf_4mpfr_9mpfr_set_prec(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_9mpfr_set_prec[] = "mpfr_set_prec(Mpfr_t x, mpfr_prec_t prec)\n\n    Reset precision of x.\n\n    Reset the precision of x to be exactly prec bits, and set its value to\n    NaN. The previous value stored in x is lost. It is equivalent to a call to\n    mpfr_clear(x) followed by a call to mpfr_init2(x, prec), but more efficient\n    as no allocation is done in case the current allocated space for the\n    significand of x is enough. The precision prec can be any integer between\n    MPFR_PREC_MIN and MPFR_PREC_MAX. In case you want to keep the previous\n    value stored in x, use mpfr_prec_round instead.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_9mpfr_set_prec = {__Pyx_NAMESTR("mpfr_set_prec"), (PyCFunction)__pyx_pf_4mpfr_9mpfr_set_prec, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_9mpfr_set_prec)};
static PyObject *__pyx_pf_4mpfr_9mpfr_set_prec(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_x = 0;
  mpfr_prec_t __pyx_v_prec;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__prec,0};
  __Pyx_RefNannySetupContext("mpfr_set_prec");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__prec);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_set_prec", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_set_prec") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_prec = __Pyx_PyInt_from_py_mpfr_prec_t(values[1]); if (unlikely((__pyx_v_prec == (mpfr_prec_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_prec = __Pyx_PyInt_from_py_mpfr_prec_t(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_prec == (mpfr_prec_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_set_prec", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_set_prec");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_4mpfr_Mpfr_t, 0, "x", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":312
 * 
 *     """
 *     check_initialized(x)             # <<<<<<<<<<<<<<
 *     check_precision(prec)
 *     cmpfr.mpfr_set_prec(&x._value, prec)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_x);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":313
 *     """
 *     check_initialized(x)
 *     check_precision(prec)             # <<<<<<<<<<<<<<
 *     cmpfr.mpfr_set_prec(&x._value, prec)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_precision(__pyx_v_prec); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":314
 *     check_initialized(x)
 *     check_precision(prec)
 *     cmpfr.mpfr_set_prec(&x._value, prec)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_get_prec(Mpfr_t x not None):
 */
  mpfr_set_prec((&__pyx_v_x->_value), __pyx_v_prec);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_set_prec");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":316
 *     cmpfr.mpfr_set_prec(&x._value, prec)
 * 
 * def mpfr_get_prec(Mpfr_t x not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return the precision of x
 */

static PyObject *__pyx_pf_4mpfr_10mpfr_get_prec(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static char __pyx_doc_4mpfr_10mpfr_get_prec[] = "mpfr_get_prec(Mpfr_t x)\n\n    Return the precision of x\n\n    Returns the number of bits used to store the significand of x.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_10mpfr_get_prec = {__Pyx_NAMESTR("mpfr_get_prec"), (PyCFunction)__pyx_pf_4mpfr_10mpfr_get_prec, METH_O, __Pyx_DOCSTR(__pyx_doc_4mpfr_10mpfr_get_prec)};
static PyObject *__pyx_pf_4mpfr_10mpfr_get_prec(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("mpfr_get_prec");
  __pyx_self = __pyx_self;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_4mpfr_Mpfr_t, 0, "x", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":323
 * 
 *     """
 *     check_initialized(x)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_get_prec(&x._value)
 * 
 */
  __pyx_t_1 = __pyx_v_x;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":324
 *     """
 *     check_initialized(x)
 *     return cmpfr.mpfr_get_prec(&x._value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_mpfr_prec_t(mpfr_get_prec((&((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_v_x)->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_get_prec");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":331
 * ###############################################################################
 * 
 * def mpfr_set(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop from op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_11mpfr_set(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_11mpfr_set[] = "mpfr_set(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop from op, rounded in the direction rnd.\n\n    Set the value of rop from the value of the Mpfr_t object op, rounded toward\n    the given direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_11mpfr_set = {__Pyx_NAMESTR("mpfr_set"), (PyCFunction)__pyx_pf_4mpfr_11mpfr_set, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_11mpfr_set)};
static PyObject *__pyx_pf_4mpfr_11mpfr_set(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_set");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_set", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_set", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_set") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_set", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_set");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":339
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":340
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_set(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":341
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_set(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":342
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_set(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_set_si(Mpfr_t rop not None, long int op, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_set((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_set");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":344
 *     return cmpfr.mpfr_set(&rop._value, &op._value, rnd)
 * 
 * def mpfr_set_si(Mpfr_t rop not None, long int op, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set the value of rop from a Python int, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_12mpfr_set_si(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_12mpfr_set_si[] = "mpfr_set_si(Mpfr_t rop, long op, mpfr_rnd_t rnd)\n\n    Set the value of rop from a Python int, rounded in the direction rnd.\n\n    Set the value of rop from op, rounded toward the given direction rnd. Note\n    that the input 0 is converted to +0, regardless of the rounding mode.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_12mpfr_set_si = {__Pyx_NAMESTR("mpfr_set_si"), (PyCFunction)__pyx_pf_4mpfr_12mpfr_set_si, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_12mpfr_set_si)};
static PyObject *__pyx_pf_4mpfr_12mpfr_set_si(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  long __pyx_v_op;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_set_si");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_set_si", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_set_si", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_set_si") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = __Pyx_PyInt_AsLong(values[1]); if (unlikely((__pyx_v_op == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = __Pyx_PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_op == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_set_si", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_set_si");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":352
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_set_si(&rop._value, op, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":353
 *     """
 *     check_initialized(rop)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_set_si(&rop._value, op, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":354
 *     check_initialized(rop)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_set_si(&rop._value, op, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_set_d(Mpfr_t rop not None, double op, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_set_si((&__pyx_v_rop->_value), __pyx_v_op, __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_set_si");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":356
 *     return cmpfr.mpfr_set_si(&rop._value, op, rnd)
 * 
 * def mpfr_set_d(Mpfr_t rop not None, double op, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set the value of rop from a Python float op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_13mpfr_set_d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_13mpfr_set_d[] = "mpfr_set_d(Mpfr_t rop, double op, mpfr_rnd_t rnd)\n\n    Set the value of rop from a Python float op, rounded in the direction rnd.\n\n    Set the value of rop from op, rounded toward the given direction rnd.  If\n    the system does not support the IEEE 754 standard, mpfr_set_d might not\n    preserve the signed zeros.\n\n    Note: If you want to store a floating-point constant to an Mpfr_t object, you\n    should use mpfr_set_str (or one of the MPFR constant functions, such as\n    mpfr_const_pi for Pi) instead of mpfr_set_d.  Otherwise the floating-point\n    constant will be first converted into a reduced-precision (e.g., 53-bit)\n    binary number before MPFR can work with it.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_13mpfr_set_d = {__Pyx_NAMESTR("mpfr_set_d"), (PyCFunction)__pyx_pf_4mpfr_13mpfr_set_d, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_13mpfr_set_d)};
static PyObject *__pyx_pf_4mpfr_13mpfr_set_d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  double __pyx_v_op;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_set_d");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_set_d", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_set_d", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_set_d") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_op == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_op == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_set_d", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_set_d");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":371
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_set_d(&rop._value, op, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 371; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":372
 *     """
 *     check_initialized(rop)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_set_d(&rop._value, op, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":373
 *     check_initialized(rop)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_set_d(&rop._value, op, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_set_si_2exp(Mpfr_t rop not None, long int op,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_set_d((&__pyx_v_rop->_value), __pyx_v_op, __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_set_d");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":375
 *     return cmpfr.mpfr_set_d(&rop._value, op, rnd)
 * 
 * def mpfr_set_si_2exp(Mpfr_t rop not None, long int op,             # <<<<<<<<<<<<<<
 *                      cmpfr.mpfr_exp_t e, cmpfr.mpfr_rnd_t rnd):
 *     """
 */

static PyObject *__pyx_pf_4mpfr_14mpfr_set_si_2exp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_14mpfr_set_si_2exp[] = "mpfr_set_si_2exp(Mpfr_t rop, long op, mpfr_exp_t e, mpfr_rnd_t rnd)\n\n    Set rop to op multiplied by a power of 2.\n\n    Set the value of rop from op multiplied by two to the power e, rounded\n    toward the given direction rnd. Note that the input 0 is converted to +0.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_14mpfr_set_si_2exp = {__Pyx_NAMESTR("mpfr_set_si_2exp"), (PyCFunction)__pyx_pf_4mpfr_14mpfr_set_si_2exp, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_14mpfr_set_si_2exp)};
static PyObject *__pyx_pf_4mpfr_14mpfr_set_si_2exp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  long __pyx_v_op;
  mpfr_exp_t __pyx_v_e;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__e,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_set_si_2exp");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_set_si_2exp", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__e);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_set_si_2exp", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_set_si_2exp", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_set_si_2exp") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = __Pyx_PyInt_AsLong(values[1]); if (unlikely((__pyx_v_op == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_e = __Pyx_PyInt_from_py_mp_exp_t(values[2]); if (unlikely((__pyx_v_e == (mpfr_exp_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = __Pyx_PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_op == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_e = __Pyx_PyInt_from_py_mp_exp_t(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_e == (mpfr_exp_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_set_si_2exp", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_set_si_2exp");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":384
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_set_si_2exp(&rop._value, op, e, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":385
 *     """
 *     check_initialized(rop)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_set_si_2exp(&rop._value, op, e, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":386
 *     check_initialized(rop)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_set_si_2exp(&rop._value, op, e, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_set_str(Mpfr_t rop not None, bytes s, int base, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_set_si_2exp((&__pyx_v_rop->_value), __pyx_v_op, __pyx_v_e, __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_set_si_2exp");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":388
 *     return cmpfr.mpfr_set_si_2exp(&rop._value, op, e, rnd)
 * 
 * def mpfr_set_str(Mpfr_t rop not None, bytes s, int base, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop from a string s.
 */

static PyObject *__pyx_pf_4mpfr_15mpfr_set_str(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_15mpfr_set_str[] = "mpfr_set_str(Mpfr_t rop, bytes s, int base, mpfr_rnd_t rnd)\n\n    Set rop from a string s.\n\n    Set rop to the value of the string s in base base, rounded in the direction\n    rnd. See the documentation of mpfr_strtofr for a detailed description of\n    the valid string formats. Contrary to mpfr_strtofr, mpfr_set_str requires\n    the whole string to represent a valid floating-point number. This function\n    returns 0 if the entire string up to the final null character is a valid\n    number in base base; otherwise it returns \342\210\2221, and rop may have\n    changed. Note: it is preferable to use mpfr_strtofr if one wants to\n    distinguish between an infinite rop value coming from an infinite s or from\n    an overflow.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_15mpfr_set_str = {__Pyx_NAMESTR("mpfr_set_str"), (PyCFunction)__pyx_pf_4mpfr_15mpfr_set_str, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_15mpfr_set_str)};
static PyObject *__pyx_pf_4mpfr_15mpfr_set_str(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  PyObject *__pyx_v_s = 0;
  int __pyx_v_base;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __mpfr_struct *__pyx_t_3;
  char *__pyx_t_4;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__s,&__pyx_n_s__base,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_set_str");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_set_str", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__base);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_set_str", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_set_str", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_set_str") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_s = ((PyObject*)values[1]);
    __pyx_v_base = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_base == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_s = ((PyObject*)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_base = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_base == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_set_str", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_set_str");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s), (&PyBytes_Type), 1, "s", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":403
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_base(base, False)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":404
 *     """
 *     check_initialized(rop)
 *     check_base(base, False)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_set_str(&rop._value, s, base, rnd)
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_base(__pyx_v_base, 0); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":405
 *     check_initialized(rop)
 *     check_base(base, False)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_set_str(&rop._value, s, base, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":406
 *     check_base(base, False)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_set_str(&rop._value, s, base, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_strtofr(Mpfr_t rop not None, bytes s, int base, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = (&__pyx_v_rop->_value);
  __pyx_t_4 = PyBytes_AsString(((PyObject *)__pyx_v_s)); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __pyx_v_base;
  __pyx_t_1 = PyInt_FromLong(mpfr_set_str(__pyx_t_3, __pyx_t_4, __pyx_t_2, __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_set_str");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":408
 *     return cmpfr.mpfr_set_str(&rop._value, s, base, rnd)
 * 
 * def mpfr_strtofr(Mpfr_t rop not None, bytes s, int base, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Read a floating-point number from a string.
 */

static PyObject *__pyx_pf_4mpfr_16mpfr_strtofr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_16mpfr_strtofr[] = "mpfr_strtofr(Mpfr_t rop, bytes s, int base, mpfr_rnd_t rnd)\n\n    Read a floating-point number from a string.\n\n    Read a floating-point number from a string s in base base, rounded in\n    the direction rnd; base must be either 0 (to detect the base, as described\n    below) or a number from 2 to 62 (otherwise the behavior is undefined).\n\n    If s starts with valid data, the result is stored in rop and the function\n    returns a pair (ternary, endindex) where ternary is the usual ternary\n    return value and endindex gives the index of the character just after the\n    valid data.  Otherwise rop is set to zero (for consistency with strtod) and\n    endindex is 0.\n\n    Parsing follows the standard C strtod function with some extensions. After\n    optional leading whitespace, one has a subject sequence consisting of an\n    optional sign (+ or -), and either numeric data or special data. The\n    subject sequence is defined as the longest initial subsequence of the input\n    string, starting with the first non-whitespace character, that is of the\n    expected form.\n\n    The form of numeric data is a non-empty sequence of significand digits with\n    an optional decimal point, and an optional exponent consisting of an\n    exponent prefix followed by an optional sign and a non-empty sequence of\n    decimal digits. A significand digit is either a decimal digit or a Latin\n    letter (62 possible characters), with A = 10, B = 11, ..., Z = 35; case is\n    ignored in bases less or equal to 36, in bases larger than 36, a = 36, b =\n    37, ..., z = 61. The value of a significand digit must be strictly less\n    than the base. The decimal point can be either the one defined by the\n    current locale or the period (the first one is accepted for consistency\n    with the C standard and the practice, the second one is accepted to allow\n    the programmer to provide MPFR numbers from strings in a way that does not\n    depend on the current locale). The expone""nt prefix can be e or E for bases\n    up to 10, or @ in any base; it indicates a multiplication by a power of the\n    base. In bases 2 and 16, the exponent prefix can also be p or P, in which\n    case the exponent, called binary exponent, indicates a multiplication by a\n    power of 2 instead of the base (there is a difference only for base 16); in\n    base 16 for example 1p2 represents 4 whereas 1@2 represents 256. The value\n    of an exponent is always written in base 10.\n\n    If the argument base is 0, then the base is automatically detected as\n    follows. If the significand starts with 0b or 0B, base 2 is assumed. If the\n    significand starts with 0x or 0X, base 16 is assumed. Otherwise base 10 is\n    assumed.\n\n    Note: The exponent (if present) must contain at least a digit. Otherwise\n    the possible exponent prefix and sign are not part of the number (which\n    ends with the significand). Similarly, if 0b, 0B, 0x or 0X is not followed\n    by a binary/hexadecimal digit, then the subject sequence stops at the\n    character 0, thus 0 is read.\n\n    Special data (for infinities and NaN) can be @inf@ or\n    @nan@(n-char-sequence-opt), and if base <= 16, it can also be infinity,\n    inf, nan or nan(n-char-sequence-opt), all case insensitive. A\n    n-char-sequence-opt is a possibly empty string containing only digits,\n    Latin letters and the underscore (0, 1, 2, ..., 9, a, b, ..., z, A, B, ...,\n    Z, _). Note: one has an optional sign for all data, even NaN. For example,\n    -@nAn@(This_Is_Not_17) is a valid representation for NaN in base 17.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_16mpfr_strtofr = {__Pyx_NAMESTR("mpfr_strtofr"), (PyCFunction)__pyx_pf_4mpfr_16mpfr_strtofr, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_16mpfr_strtofr)};
static PyObject *__pyx_pf_4mpfr_16mpfr_strtofr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  PyObject *__pyx_v_s = 0;
  int __pyx_v_base;
  mpfr_rnd_t __pyx_v_rnd;
  char *__pyx_v_endptr;
  char *__pyx_v_startptr;
  int __pyx_v_ternary;
  int __pyx_v_endindex;
  PyObject *__pyx_r = NULL;
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __mpfr_struct *__pyx_t_4;
  char **__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__s,&__pyx_n_s__base,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_strtofr");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_strtofr", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__base);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_strtofr", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_strtofr", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_strtofr") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_s = ((PyObject*)values[1]);
    __pyx_v_base = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_base == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_s = ((PyObject*)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_base = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_base == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_strtofr", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_strtofr");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s), (&PyBytes_Type), 1, "s", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":471
 *     cdef char* startptr
 * 
 *     startptr = s             # <<<<<<<<<<<<<<
 * 
 *     check_initialized(rop)
 */
  __pyx_t_1 = PyBytes_AsString(((PyObject *)__pyx_v_s)); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_startptr = __pyx_t_1;

  /* "mpfr.pyx":473
 *     startptr = s
 * 
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_base(base, True)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_2)); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mpfr.pyx":474
 * 
 *     check_initialized(rop)
 *     check_base(base, True)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     ternary = cmpfr.mpfr_strtofr(
 */
  __pyx_t_3 = __pyx_f_4mpfr_check_base(__pyx_v_base, 1); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":475
 *     check_initialized(rop)
 *     check_base(base, True)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     ternary = cmpfr.mpfr_strtofr(
 *         &rop._value,
 */
  __pyx_t_3 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":477
 *     check_rounding_mode(rnd)
 *     ternary = cmpfr.mpfr_strtofr(
 *         &rop._value,             # <<<<<<<<<<<<<<
 *         s,
 *         &endptr,
 */
  __pyx_t_4 = (&__pyx_v_rop->_value);

  /* "mpfr.pyx":478
 *     ternary = cmpfr.mpfr_strtofr(
 *         &rop._value,
 *         s,             # <<<<<<<<<<<<<<
 *         &endptr,
 *         base,
 */
  __pyx_t_1 = PyBytes_AsString(((PyObject *)__pyx_v_s)); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":479
 *         &rop._value,
 *         s,
 *         &endptr,             # <<<<<<<<<<<<<<
 *         base,
 *         rnd,
 */
  __pyx_t_5 = (&__pyx_v_endptr);

  /* "mpfr.pyx":480
 *         s,
 *         &endptr,
 *         base,             # <<<<<<<<<<<<<<
 *         rnd,
 *     )
 */
  __pyx_t_3 = __pyx_v_base;

  /* "mpfr.pyx":481
 *         &endptr,
 *         base,
 *         rnd,             # <<<<<<<<<<<<<<
 *     )
 *     endindex = endptr - startptr
 */
  __pyx_v_ternary = mpfr_strtofr(__pyx_t_4, __pyx_t_1, __pyx_t_5, __pyx_t_3, __pyx_v_rnd);

  /* "mpfr.pyx":483
 *         rnd,
 *     )
 *     endindex = endptr - startptr             # <<<<<<<<<<<<<<
 *     return ternary, endindex
 * 
 */
  __pyx_v_endindex = (__pyx_v_endptr - __pyx_v_startptr);

  /* "mpfr.pyx":484
 *     )
 *     endindex = endptr - startptr
 *     return ternary, endindex             # <<<<<<<<<<<<<<
 * 
 * def mpfr_set_nan(Mpfr_t op not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyInt_FromLong(__pyx_v_ternary); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyInt_FromLong(__pyx_v_endindex); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_7));
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_2 = 0;
  __pyx_t_6 = 0;
  __pyx_r = ((PyObject *)__pyx_t_7);
  __pyx_t_7 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("mpfr.mpfr_strtofr");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":486
 *     return ternary, endindex
 * 
 * def mpfr_set_nan(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """ Set x to a NaN.
 * 
 */

static PyObject *__pyx_pf_4mpfr_17mpfr_set_nan(PyObject *__pyx_self, PyObject *__pyx_v_op); /*proto*/
static char __pyx_doc_4mpfr_17mpfr_set_nan[] = "mpfr_set_nan(Mpfr_t op)\n Set x to a NaN.\n\n    Set the variable x to NaN (Not-a-Number).  The sign bit of the result is\n    unspecified.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_17mpfr_set_nan = {__Pyx_NAMESTR("mpfr_set_nan"), (PyCFunction)__pyx_pf_4mpfr_17mpfr_set_nan, METH_O, __Pyx_DOCSTR(__pyx_doc_4mpfr_17mpfr_set_nan)};
static PyObject *__pyx_pf_4mpfr_17mpfr_set_nan(PyObject *__pyx_self, PyObject *__pyx_v_op) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("mpfr_set_nan");
  __pyx_self = __pyx_self;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":493
 * 
 *     """
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     cmpfr.mpfr_set_nan(&op._value)
 * 
 */
  __pyx_t_1 = __pyx_v_op;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":494
 *     """
 *     check_initialized(op)
 *     cmpfr.mpfr_set_nan(&op._value)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_set_inf(Mpfr_t op not None, int sign):
 */
  mpfr_set_nan((&((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_v_op)->_value));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_set_nan");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":496
 *     cmpfr.mpfr_set_nan(&op._value)
 * 
 * def mpfr_set_inf(Mpfr_t op not None, int sign):             # <<<<<<<<<<<<<<
 *     """ Set x to an infinity.
 * 
 */

static PyObject *__pyx_pf_4mpfr_18mpfr_set_inf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_18mpfr_set_inf[] = "mpfr_set_inf(Mpfr_t op, int sign)\n Set x to an infinity.\n\n    Set the variable x to infinity.  x is set to positive infinity if the sign\n    is nonnegative, and negative infinity otherwise.\n\n    Note the unusual sign convention here: most MPFR function that deal with\n    signs use a nonzero value (or True) to indicate a negative number, and zero\n    to indiciate a positive number.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_18mpfr_set_inf = {__Pyx_NAMESTR("mpfr_set_inf"), (PyCFunction)__pyx_pf_4mpfr_18mpfr_set_inf, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_18mpfr_set_inf)};
static PyObject *__pyx_pf_4mpfr_18mpfr_set_inf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  int __pyx_v_sign;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__op,&__pyx_n_s__sign,0};
  __Pyx_RefNannySetupContext("mpfr_set_inf");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sign);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_set_inf", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_set_inf") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_sign = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_sign == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_sign = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_sign == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_set_inf", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_set_inf");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":507
 * 
 *     """
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     cmpfr.mpfr_set_inf(&op._value, sign)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 507; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":508
 *     """
 *     check_initialized(op)
 *     cmpfr.mpfr_set_inf(&op._value, sign)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_set_zero(Mpfr_t op not None, int sign):
 */
  mpfr_set_inf((&__pyx_v_op->_value), __pyx_v_sign);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_set_inf");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":510
 *     cmpfr.mpfr_set_inf(&op._value, sign)
 * 
 * def mpfr_set_zero(Mpfr_t op not None, int sign):             # <<<<<<<<<<<<<<
 *     """ Set x to a zero.
 * 
 */

static PyObject *__pyx_pf_4mpfr_19mpfr_set_zero(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_19mpfr_set_zero[] = "mpfr_set_zero(Mpfr_t op, int sign)\n Set x to a zero.\n\n    Set the variable x to zero.  x is set to positive zero if the sign is\n    nonnegative, and negative zero otherwise.\n\n    Note the unusual sign convention here: most MPFR function that deal with\n    signs use a nonzero value (or True) to indicate a negative number, and zero\n    to indiciate a positive number.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_19mpfr_set_zero = {__Pyx_NAMESTR("mpfr_set_zero"), (PyCFunction)__pyx_pf_4mpfr_19mpfr_set_zero, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_19mpfr_set_zero)};
static PyObject *__pyx_pf_4mpfr_19mpfr_set_zero(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  int __pyx_v_sign;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__op,&__pyx_n_s__sign,0};
  __Pyx_RefNannySetupContext("mpfr_set_zero");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sign);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_set_zero", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_set_zero") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_sign = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_sign == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_sign = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_sign == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_set_zero", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_set_zero");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":521
 * 
 *     """
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     cmpfr.mpfr_set_zero(&op._value, sign)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":522
 *     """
 *     check_initialized(op)
 *     cmpfr.mpfr_set_zero(&op._value, sign)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_swap(Mpfr_t x not None, Mpfr_t y not None):
 */
  mpfr_set_zero((&__pyx_v_op->_value), __pyx_v_sign);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_set_zero");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":524
 *     cmpfr.mpfr_set_zero(&op._value, sign)
 * 
 * def mpfr_swap(Mpfr_t x not None, Mpfr_t y not None):             # <<<<<<<<<<<<<<
 *     """
 *     Swap the values of x and y efficiently.
 */

static PyObject *__pyx_pf_4mpfr_20mpfr_swap(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_20mpfr_swap[] = "mpfr_swap(Mpfr_t x, Mpfr_t y)\n\n    Swap the values of x and y efficiently.\n\n    Warning: the precisions are exchanged too; in case the precisions are\n    different, mpfr_swap is thus not equivalent to three mpfr_set calls using a\n    third auxiliary variable.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_20mpfr_swap = {__Pyx_NAMESTR("mpfr_swap"), (PyCFunction)__pyx_pf_4mpfr_20mpfr_swap, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_20mpfr_swap)};
static PyObject *__pyx_pf_4mpfr_20mpfr_swap(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_x = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_y = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__y,0};
  __Pyx_RefNannySetupContext("mpfr_swap");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_swap", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_swap") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_y = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_y = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_swap", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_swap");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_4mpfr_Mpfr_t, 0, "x", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_4mpfr_Mpfr_t, 0, "y", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":533
 * 
 *     """
 *     check_initialized(x)             # <<<<<<<<<<<<<<
 *     check_initialized(y)
 *     cmpfr.mpfr_swap(&x._value, &y._value)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_x);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 533; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":534
 *     """
 *     check_initialized(x)
 *     check_initialized(y)             # <<<<<<<<<<<<<<
 *     cmpfr.mpfr_swap(&x._value, &y._value)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_y);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 534; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":535
 *     check_initialized(x)
 *     check_initialized(y)
 *     cmpfr.mpfr_swap(&x._value, &y._value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  mpfr_swap((&__pyx_v_x->_value), (&__pyx_v_y->_value));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_swap");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":542
 * ###############################################################################
 * 
 * def mpfr_get_d(Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Convert op to a Python float.
 */

static PyObject *__pyx_pf_4mpfr_21mpfr_get_d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_21mpfr_get_d[] = "mpfr_get_d(Mpfr_t op, mpfr_rnd_t rnd)\n\n    Convert op to a Python float.\n\n    Convert op to a Python float using the rounding mode rnd. If op is NaN,\n    some fixed NaN (either quiet or signaling) or the result of 0.0/0.0 is\n    returned. If op is \302\261Inf, an infinity of the same sign or the result of\n    \302\2611.0/0.0 is returned. If op is zero, this function returns a zero, trying\n    to preserve its sign, if possible.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_21mpfr_get_d = {__Pyx_NAMESTR("mpfr_get_d"), (PyCFunction)__pyx_pf_4mpfr_21mpfr_get_d, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_21mpfr_get_d)};
static PyObject *__pyx_pf_4mpfr_21mpfr_get_d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_get_d");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_get_d", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_get_d") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_rnd = PyInt_AsLong(values[1]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_get_d", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_get_d");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":553
 * 
 *     """
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_get_d(&op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 553; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":554
 *     """
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_get_d(&op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 554; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":555
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_get_d(&op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_get_si(Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(mpfr_get_d((&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 555; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_get_d");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":557
 *     return cmpfr.mpfr_get_d(&op._value, rnd)
 * 
 * def mpfr_get_si(Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Convert op to a Python int.
 */

static PyObject *__pyx_pf_4mpfr_22mpfr_get_si(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_22mpfr_get_si[] = "mpfr_get_si(Mpfr_t op, mpfr_rnd_t rnd)\n\n    Convert op to a Python int.\n\n    Convert op to a Python int after rounding it with respect to rnd. If op is\n    NaN, 0 is returned and the erange flag is set. If op is too big for a\n    Python int, the function returns the maximum or the minimum representable\n    int, depending on the direction of the overflow; the erange flag is set\n    too.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_22mpfr_get_si = {__Pyx_NAMESTR("mpfr_get_si"), (PyCFunction)__pyx_pf_4mpfr_22mpfr_get_si, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_22mpfr_get_si)};
static PyObject *__pyx_pf_4mpfr_22mpfr_get_si(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_get_si");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_get_si", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_get_si") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_rnd = PyInt_AsLong(values[1]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_get_si", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_get_si");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":568
 * 
 *     """
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_get_si(&op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":569
 *     """
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_get_si(&op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":570
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_get_si(&op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_get_d_2exp(Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_get_si((&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_get_si");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":572
 *     return cmpfr.mpfr_get_si(&op._value, rnd)
 * 
 * def mpfr_get_d_2exp(Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Convert op to a Python float and an exponent.
 */

static PyObject *__pyx_pf_4mpfr_23mpfr_get_d_2exp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_23mpfr_get_d_2exp[] = "mpfr_get_d_2exp(Mpfr_t op, mpfr_rnd_t rnd)\n\n    Convert op to a Python float and an exponent.\n\n    Return a pair (d, exp) consisting of a Python float d and an exponent exp\n    such that 0.5<=abs(d)<1 and d times 2 raised to exp equals op rounded to\n    double (resp. long double) precision, using the given rounding mode. If op\n    is zero, then a zero of the same sign (or an unsigned zero, if the\n    implementation does not have signed zeros) is returned, and exp is set to\n    0. If op is NaN or an infinity, then the corresponding double precision\n    (resp. long-double precision) value is returned, and exp is undefined.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_23mpfr_get_d_2exp = {__Pyx_NAMESTR("mpfr_get_d_2exp"), (PyCFunction)__pyx_pf_4mpfr_23mpfr_get_d_2exp, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_23mpfr_get_d_2exp)};
static PyObject *__pyx_pf_4mpfr_23mpfr_get_d_2exp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  long __pyx_v_exp;
  double __pyx_v_d;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_get_d_2exp");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_get_d_2exp", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_get_d_2exp") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_rnd = PyInt_AsLong(values[1]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_get_d_2exp", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_get_d_2exp");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":588
 *     cdef double d
 * 
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     d =  cmpfr.mpfr_get_d_2exp(&exp, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 588; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":589
 * 
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     d =  cmpfr.mpfr_get_d_2exp(&exp, &op._value, rnd)
 *     return d, exp
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":590
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     d =  cmpfr.mpfr_get_d_2exp(&exp, &op._value, rnd)             # <<<<<<<<<<<<<<
 *     return d, exp
 * 
 */
  __pyx_v_d = mpfr_get_d_2exp((&__pyx_v_exp), (&__pyx_v_op->_value), __pyx_v_rnd);

  /* "mpfr.pyx":591
 *     check_rounding_mode(rnd)
 *     d =  cmpfr.mpfr_get_d_2exp(&exp, &op._value, rnd)
 *     return d, exp             # <<<<<<<<<<<<<<
 * 
 * def mpfr_get_str(int b, size_t n, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_d); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong(__pyx_v_exp); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 591; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mpfr.mpfr_get_d_2exp");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":593
 *     return d, exp
 * 
 * def mpfr_get_str(int b, size_t n, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Compute a base 'b' string representation for 'op'.
 */

static PyObject *__pyx_pf_4mpfr_24mpfr_get_str(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_24mpfr_get_str[] = "mpfr_get_str(int b, size_t n, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Compute a base 'b' string representation for 'op'.\n\n    Convert op to a string of digits in base b, with rounding in the direction\n    rnd, where n is either zero (see below) or the number of significant digits\n    output in the string; in the latter case, n must be greater or equal to\n    2. The base may vary from 2 to 62.  Returns a pair (digits, exp) where\n    digits gives the base-b digits of op, and for an ordinary number, exp is\n    the exponent (for input 0, the current minimal exponent is written).\n\n    The generated string is a fraction, with an implicit radix point\n    immediately to the left of the first digit. For example, the number \342\210\2223.1416\n    would be returned as (\"\342\210\22231416\", 1). If rnd is to nearest, and op is exactly\n    in the middle of two consecutive possible outputs, the one with an even\n    significand is chosen, where both significands are considered with the\n    exponent of op. Note that for an odd base, this may not correspond to an\n    even last digit: for example with 2 digits in base 7, (14) and a half is\n    rounded to (15) which is 12 in decimal, (16) and a half is rounded to (20)\n    which is 14 in decimal, and (26) and a half is rounded to (26) which is 20\n    in decimal.\n\n    If n is zero, the number of digits of the significand is chosen large\n    enough so that re-reading the printed value with the same precision,\n    assuming both output and input use rounding to nearest, will recover the\n    original value of op. More precisely, in most cases, the chosen precision\n    of str is the minimal precision m depending only on p = PREC(op) and b that\n    satisfies the above property, i.e., m = 1 + ceil(p*log(2)/log(b)), with p\n    replaced by p\342\210\2221 if b is a power of 2, but in some very rare cases, it might\n    be m+1 (the smallest case for bases up to 62 is when p equals 186564318007\n    for bases 7 and 49).\n\n    ""Space for the digit string is automatically allocated, and freed by Python\n    when no longer needed.  There's no requirement to free this space manually.\n\n    RuntimeError is raised on error.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_24mpfr_get_str = {__Pyx_NAMESTR("mpfr_get_str"), (PyCFunction)__pyx_pf_4mpfr_24mpfr_get_str, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_24mpfr_get_str)};
static PyObject *__pyx_pf_4mpfr_24mpfr_get_str(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_b;
  size_t __pyx_v_n;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  mpfr_exp_t __pyx_v_exp;
  PyObject *__pyx_v_digits;
  char *__pyx_v_c_digits;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__b,&__pyx_n_s__n,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_get_str");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__b);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__n);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_get_str", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_get_str", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_get_str", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_get_str") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_b = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_b == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_n = __Pyx_PyInt_AsSize_t(values[1]); if (unlikely((__pyx_v_n == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[2]);
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_b = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_b == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_n = __Pyx_PyInt_AsSize_t(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_n == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 2));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_get_str", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_get_str");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_digits = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":635
 *     cdef char *c_digits
 * 
 *     check_base(b, False)             # <<<<<<<<<<<<<<
 *     check_get_str_n(n)
 *     check_initialized(op)
 */
  __pyx_t_1 = __pyx_f_4mpfr_check_base(__pyx_v_b, 0); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":636
 * 
 *     check_base(b, False)
 *     check_get_str_n(n)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = __pyx_f_4mpfr_check_get_str_n(__pyx_v_n); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 636; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":637
 *     check_base(b, False)
 *     check_get_str_n(n)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     c_digits = cmpfr.mpfr_get_str(NULL, &exp, b, n, &op._value, rnd)
 */
  __pyx_t_2 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_2)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "mpfr.pyx":638
 *     check_get_str_n(n)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     c_digits = cmpfr.mpfr_get_str(NULL, &exp, b, n, &op._value, rnd)
 *     if c_digits == NULL:
 */
  __pyx_t_1 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":639
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     c_digits = cmpfr.mpfr_get_str(NULL, &exp, b, n, &op._value, rnd)             # <<<<<<<<<<<<<<
 *     if c_digits == NULL:
 *         raise RuntimeError("Error during string conversion.")
 */
  __pyx_v_c_digits = mpfr_get_str(NULL, (&__pyx_v_exp), __pyx_v_b, __pyx_v_n, (&__pyx_v_op->_value), __pyx_v_rnd);

  /* "mpfr.pyx":640
 *     check_rounding_mode(rnd)
 *     c_digits = cmpfr.mpfr_get_str(NULL, &exp, b, n, &op._value, rnd)
 *     if c_digits == NULL:             # <<<<<<<<<<<<<<
 *         raise RuntimeError("Error during string conversion.")
 * 
 */
  __pyx_t_3 = (__pyx_v_c_digits == NULL);
  if (__pyx_t_3) {

    /* "mpfr.pyx":641
 *     c_digits = cmpfr.mpfr_get_str(NULL, &exp, b, n, &op._value, rnd)
 *     if c_digits == NULL:
 *         raise RuntimeError("Error during string conversion.")             # <<<<<<<<<<<<<<
 * 
 *     # It's possible for the conversion from c_digits to digits to raise, so use
 */
    __pyx_t_2 = PyObject_Call(__pyx_builtin_RuntimeError, ((PyObject *)__pyx_k_tuple_12), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "mpfr.pyx":645
 *     # It's possible for the conversion from c_digits to digits to raise, so use
 *     # a try-finally block to ensure that c_digits always gets freed.
 *     try:             # <<<<<<<<<<<<<<
 *         digits = str(c_digits)
 *     finally:
 */
  /*try:*/ {

    /* "mpfr.pyx":646
 *     # a try-finally block to ensure that c_digits always gets freed.
 *     try:
 *         digits = str(c_digits)             # <<<<<<<<<<<<<<
 *     finally:
 *         cmpfr.mpfr_free_str(c_digits)
 */
    __pyx_t_2 = PyBytes_FromString(__pyx_v_c_digits); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L8;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L8;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_2));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
    __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), ((PyObject *)__pyx_t_4), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L8;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected bytes, got %.200s", Py_TYPE(__pyx_t_2)->tp_name), 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 646; __pyx_clineno = __LINE__; goto __pyx_L8;}
    __Pyx_DECREF(((PyObject *)__pyx_v_digits));
    __pyx_v_digits = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
  }

  /* "mpfr.pyx":648
 *         digits = str(c_digits)
 *     finally:
 *         cmpfr.mpfr_free_str(c_digits)             # <<<<<<<<<<<<<<
 * 
 *     return digits, exp
 */
  /*finally:*/ {
    int __pyx_why;
    PyObject *__pyx_exc_type, *__pyx_exc_value, *__pyx_exc_tb;
    int __pyx_exc_lineno;
    __pyx_exc_type = 0; __pyx_exc_value = 0; __pyx_exc_tb = 0; __pyx_exc_lineno = 0;
    __pyx_why = 0; goto __pyx_L9;
    __pyx_L8: {
      __pyx_why = 4;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_ErrFetch(&__pyx_exc_type, &__pyx_exc_value, &__pyx_exc_tb);
      __pyx_exc_lineno = __pyx_lineno;
      goto __pyx_L9;
    }
    __pyx_L9:;
    mpfr_free_str(__pyx_v_c_digits);
    switch (__pyx_why) {
      case 4: {
        __Pyx_ErrRestore(__pyx_exc_type, __pyx_exc_value, __pyx_exc_tb);
        __pyx_lineno = __pyx_exc_lineno;
        __pyx_exc_type = 0;
        __pyx_exc_value = 0;
        __pyx_exc_tb = 0;
        goto __pyx_L1_error;
      }
    }
  }

  /* "mpfr.pyx":650
 *         cmpfr.mpfr_free_str(c_digits)
 * 
 *     return digits, exp             # <<<<<<<<<<<<<<
 * 
 * def mpfr_fits_slong_p(Mpfr_t x not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_to_py_mp_exp_t(__pyx_v_exp); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __Pyx_INCREF(((PyObject *)__pyx_v_digits));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_digits));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_digits));
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mpfr.mpfr_get_str");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_digits);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":652
 *     return digits, exp
 * 
 * def mpfr_fits_slong_p(Mpfr_t x not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op would fit into a Python int.
 */

static PyObject *__pyx_pf_4mpfr_25mpfr_fits_slong_p(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_25mpfr_fits_slong_p[] = "mpfr_fits_slong_p(Mpfr_t x, mpfr_rnd_t rnd)\n\n    Return True if op would fit into a Python int.\n\n    Return True if op would fit into a Python int when rounded to an integer\n    in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_25mpfr_fits_slong_p = {__Pyx_NAMESTR("mpfr_fits_slong_p"), (PyCFunction)__pyx_pf_4mpfr_25mpfr_fits_slong_p, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_25mpfr_fits_slong_p)};
static PyObject *__pyx_pf_4mpfr_25mpfr_fits_slong_p(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_x = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_fits_slong_p");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_fits_slong_p", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_fits_slong_p") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_rnd = PyInt_AsLong(values[1]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_fits_slong_p", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_fits_slong_p");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_4mpfr_Mpfr_t, 0, "x", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":660
 * 
 *     """
 *     check_initialized(x)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return bool(cmpfr.mpfr_fits_slong_p(&x._value, rnd))
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_x);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":661
 *     """
 *     check_initialized(x)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return bool(cmpfr.mpfr_fits_slong_p(&x._value, rnd))
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 661; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":662
 *     check_initialized(x)
 *     check_rounding_mode(rnd)
 *     return bool(cmpfr.mpfr_fits_slong_p(&x._value, rnd))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_fits_slong_p((&__pyx_v_x->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_3))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_fits_slong_p");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":669
 * ###############################################################################
 * 
 * def mpfr_add(Mpfr_t rop not None, Mpfr_t op1 not None, Mpfr_t op2 not None,             # <<<<<<<<<<<<<<
 *              cmpfr.mpfr_rnd_t rnd):
 *     """
 */

static PyObject *__pyx_pf_4mpfr_26mpfr_add(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_26mpfr_add[] = "mpfr_add(Mpfr_t rop, Mpfr_t op1, Mpfr_t op2, mpfr_rnd_t rnd)\n\n    Set rop to op1 + op2 rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_26mpfr_add = {__Pyx_NAMESTR("mpfr_add"), (PyCFunction)__pyx_pf_4mpfr_26mpfr_add, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_26mpfr_add)};
static PyObject *__pyx_pf_4mpfr_26mpfr_add(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op1 = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op2 = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op1,&__pyx_n_s__op2,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_add");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op1);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_add", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op2);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_add", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_add", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_add") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[2]);
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 670; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 2));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 670; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_add", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_add");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op1), __pyx_ptype_4mpfr_Mpfr_t, 0, "op1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op2), __pyx_ptype_4mpfr_Mpfr_t, 0, "op2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":675
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op1)
 *     check_initialized(op2)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":676
 *     """
 *     check_initialized(rop)
 *     check_initialized(op1)             # <<<<<<<<<<<<<<
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":677
 *     check_initialized(rop)
 *     check_initialized(op1)
 *     check_initialized(op2)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_add(&rop._value, &op1._value, &op2._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op2);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":678
 *     check_initialized(op1)
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_add(&rop._value, &op1._value, &op2._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":679
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_add(&rop._value, &op1._value, &op2._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_sub(Mpfr_t rop not None, Mpfr_t op1 not None, Mpfr_t op2 not None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_add((&__pyx_v_rop->_value), (&__pyx_v_op1->_value), (&__pyx_v_op2->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 679; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_add");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":681
 *     return cmpfr.mpfr_add(&rop._value, &op1._value, &op2._value, rnd)
 * 
 * def mpfr_sub(Mpfr_t rop not None, Mpfr_t op1 not None, Mpfr_t op2 not None,             # <<<<<<<<<<<<<<
 *              cmpfr.mpfr_rnd_t rnd):
 *     """
 */

static PyObject *__pyx_pf_4mpfr_27mpfr_sub(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_27mpfr_sub[] = "mpfr_sub(Mpfr_t rop, Mpfr_t op1, Mpfr_t op2, mpfr_rnd_t rnd)\n\n    Set rop to op1 - op2, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_27mpfr_sub = {__Pyx_NAMESTR("mpfr_sub"), (PyCFunction)__pyx_pf_4mpfr_27mpfr_sub, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_27mpfr_sub)};
static PyObject *__pyx_pf_4mpfr_27mpfr_sub(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op1 = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op2 = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op1,&__pyx_n_s__op2,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_sub");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op1);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_sub", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op2);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_sub", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_sub", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_sub") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[2]);
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 682; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 2));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 682; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_sub", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_sub");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op1), __pyx_ptype_4mpfr_Mpfr_t, 0, "op1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op2), __pyx_ptype_4mpfr_Mpfr_t, 0, "op2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":687
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op1)
 *     check_initialized(op2)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 687; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":688
 *     """
 *     check_initialized(rop)
 *     check_initialized(op1)             # <<<<<<<<<<<<<<
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 688; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":689
 *     check_initialized(rop)
 *     check_initialized(op1)
 *     check_initialized(op2)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_sub(&rop._value, &op1._value, &op2._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op2);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 689; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":690
 *     check_initialized(op1)
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_sub(&rop._value, &op1._value, &op2._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":691
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_sub(&rop._value, &op1._value, &op2._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_mul(Mpfr_t rop not None, Mpfr_t op1 not None, Mpfr_t op2 not None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_sub((&__pyx_v_rop->_value), (&__pyx_v_op1->_value), (&__pyx_v_op2->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 691; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_sub");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":693
 *     return cmpfr.mpfr_sub(&rop._value, &op1._value, &op2._value, rnd)
 * 
 * def mpfr_mul(Mpfr_t rop not None, Mpfr_t op1 not None, Mpfr_t op2 not None,             # <<<<<<<<<<<<<<
 *              cmpfr.mpfr_rnd_t rnd):
 *     """
 */

static PyObject *__pyx_pf_4mpfr_28mpfr_mul(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_28mpfr_mul[] = "mpfr_mul(Mpfr_t rop, Mpfr_t op1, Mpfr_t op2, mpfr_rnd_t rnd)\n\n    Set rop to op1 times op2, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_28mpfr_mul = {__Pyx_NAMESTR("mpfr_mul"), (PyCFunction)__pyx_pf_4mpfr_28mpfr_mul, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_28mpfr_mul)};
static PyObject *__pyx_pf_4mpfr_28mpfr_mul(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op1 = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op2 = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op1,&__pyx_n_s__op2,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_mul");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op1);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_mul", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op2);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_mul", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_mul", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_mul") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[2]);
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 2));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 694; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_mul", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_mul");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op1), __pyx_ptype_4mpfr_Mpfr_t, 0, "op1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op2), __pyx_ptype_4mpfr_Mpfr_t, 0, "op2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":699
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op1)
 *     check_initialized(op2)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":700
 *     """
 *     check_initialized(rop)
 *     check_initialized(op1)             # <<<<<<<<<<<<<<
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":701
 *     check_initialized(rop)
 *     check_initialized(op1)
 *     check_initialized(op2)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_mul(&rop._value, &op1._value, &op2._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op2);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":702
 *     check_initialized(op1)
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_mul(&rop._value, &op1._value, &op2._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":703
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_mul(&rop._value, &op1._value, &op2._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_sqr(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_mul((&__pyx_v_rop->_value), (&__pyx_v_op1->_value), (&__pyx_v_op2->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_mul");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":705
 *     return cmpfr.mpfr_mul(&rop._value, &op1._value, &op2._value, rnd)
 * 
 * def mpfr_sqr(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the square of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_29mpfr_sqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_29mpfr_sqr[] = "mpfr_sqr(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the square of op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_29mpfr_sqr = {__Pyx_NAMESTR("mpfr_sqr"), (PyCFunction)__pyx_pf_4mpfr_29mpfr_sqr, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_29mpfr_sqr)};
static PyObject *__pyx_pf_4mpfr_29mpfr_sqr(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_sqr");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_sqr", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_sqr", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_sqr") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_sqr", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_sqr");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":710
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":711
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_sqr(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":712
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_sqr(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":713
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_sqr(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_div(Mpfr_t rop not None, Mpfr_t op1 not None, Mpfr_t op2 not None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_sqr((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_sqr");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":715
 *     return cmpfr.mpfr_sqr(&rop._value, &op._value, rnd)
 * 
 * def mpfr_div(Mpfr_t rop not None, Mpfr_t op1 not None, Mpfr_t op2 not None,             # <<<<<<<<<<<<<<
 *              cmpfr.mpfr_rnd_t rnd):
 *     """
 */

static PyObject *__pyx_pf_4mpfr_30mpfr_div(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_30mpfr_div[] = "mpfr_div(Mpfr_t rop, Mpfr_t op1, Mpfr_t op2, mpfr_rnd_t rnd)\n\n    Set rop to op1 divided by op2, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_30mpfr_div = {__Pyx_NAMESTR("mpfr_div"), (PyCFunction)__pyx_pf_4mpfr_30mpfr_div, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_30mpfr_div)};
static PyObject *__pyx_pf_4mpfr_30mpfr_div(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op1 = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op2 = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op1,&__pyx_n_s__op2,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_div");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op1);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_div", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op2);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_div", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_div", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_div") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[2]);
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 716; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 2));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 716; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_div", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_div");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op1), __pyx_ptype_4mpfr_Mpfr_t, 0, "op1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op2), __pyx_ptype_4mpfr_Mpfr_t, 0, "op2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":721
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op1)
 *     check_initialized(op2)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":722
 *     """
 *     check_initialized(rop)
 *     check_initialized(op1)             # <<<<<<<<<<<<<<
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":723
 *     check_initialized(rop)
 *     check_initialized(op1)
 *     check_initialized(op2)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_div(&rop._value, &op1._value, &op2._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op2);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 723; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":724
 *     check_initialized(op1)
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_div(&rop._value, &op1._value, &op2._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":725
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_div(&rop._value, &op1._value, &op2._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_sqrt(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_div((&__pyx_v_rop->_value), (&__pyx_v_op1->_value), (&__pyx_v_op2->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_div");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":727
 *     return cmpfr.mpfr_div(&rop._value, &op1._value, &op2._value, rnd)
 * 
 * def mpfr_sqrt(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the square root of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_31mpfr_sqrt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_31mpfr_sqrt[] = "mpfr_sqrt(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the square root of op, rounded in the direction rnd.\n\n    Set rop to \342\210\2220 if op is \342\210\2220, to be consistent with the IEEE 754 standard. Set\n    rop to NaN if op is negative.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_31mpfr_sqrt = {__Pyx_NAMESTR("mpfr_sqrt"), (PyCFunction)__pyx_pf_4mpfr_31mpfr_sqrt, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_31mpfr_sqrt)};
static PyObject *__pyx_pf_4mpfr_31mpfr_sqrt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_sqrt");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_sqrt", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 727; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_sqrt", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 727; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_sqrt") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 727; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 727; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 727; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_sqrt", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 727; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_sqrt");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":735
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":736
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_sqrt(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 736; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":737
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_sqrt(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 737; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":738
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_sqrt(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_rec_sqrt(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_sqrt((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 738; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_sqrt");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":740
 *     return cmpfr.mpfr_sqrt(&rop._value, &op._value, rnd)
 * 
 * def mpfr_rec_sqrt(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the reciprocal square root of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_32mpfr_rec_sqrt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_32mpfr_rec_sqrt[] = "mpfr_rec_sqrt(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the reciprocal square root of op, rounded in the direction rnd.\n\n    Set rop to +Inf if op is \302\2610, +0 if op is +Inf, and NaN if op is negative.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_32mpfr_rec_sqrt = {__Pyx_NAMESTR("mpfr_rec_sqrt"), (PyCFunction)__pyx_pf_4mpfr_32mpfr_rec_sqrt, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_32mpfr_rec_sqrt)};
static PyObject *__pyx_pf_4mpfr_32mpfr_rec_sqrt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_rec_sqrt");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_rec_sqrt", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_rec_sqrt", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_rec_sqrt") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_rec_sqrt", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_rec_sqrt");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":747
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":748
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_rec_sqrt(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":749
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_rec_sqrt(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":750
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_rec_sqrt(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_cbrt(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_rec_sqrt((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_rec_sqrt");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":752
 *     return cmpfr.mpfr_rec_sqrt(&rop._value, &op._value, rnd)
 * 
 * def mpfr_cbrt(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the cube root of op rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_33mpfr_cbrt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_33mpfr_cbrt[] = "mpfr_cbrt(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the cube root of op rounded in the direction rnd.\n\n    For op negative, set rop to a negative number.  The cube root of -0 is\n    defined to be -0.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_33mpfr_cbrt = {__Pyx_NAMESTR("mpfr_cbrt"), (PyCFunction)__pyx_pf_4mpfr_33mpfr_cbrt, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_33mpfr_cbrt)};
static PyObject *__pyx_pf_4mpfr_33mpfr_cbrt(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_cbrt");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_cbrt", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_cbrt", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_cbrt") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_cbrt", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_cbrt");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":760
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 760; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":761
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_cbrt(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 761; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":762
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_cbrt(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 762; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":763
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_cbrt(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_root(Mpfr_t rop not None, Mpfr_t op not None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_cbrt((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 763; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_cbrt");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":765
 *     return cmpfr.mpfr_cbrt(&rop._value, &op._value, rnd)
 * 
 * def mpfr_root(Mpfr_t rop not None, Mpfr_t op not None,             # <<<<<<<<<<<<<<
 *               unsigned long int k, cmpfr.mpfr_rnd_t rnd):
 *     """
 */

static PyObject *__pyx_pf_4mpfr_34mpfr_root(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_34mpfr_root[] = "mpfr_root(Mpfr_t rop, Mpfr_t op, unsigned long k, mpfr_rnd_t rnd)\n\n    Set rop to the kth root of op, rounding in the direction rnd.\n\n    For k odd (resp. even) and op negative (including \342\210\222Inf), set rop to a\n    negative number (resp. NaN). The kth root of \342\210\2220 is defined to be \342\210\2220,\n    whatever the parity of k.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_34mpfr_root = {__Pyx_NAMESTR("mpfr_root"), (PyCFunction)__pyx_pf_4mpfr_34mpfr_root, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_34mpfr_root)};
static PyObject *__pyx_pf_4mpfr_34mpfr_root(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  unsigned long __pyx_v_k;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__k,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_root");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_root", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__k);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_root", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_root", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_root") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_k = __Pyx_PyInt_AsUnsignedLong(values[2]); if (unlikely((__pyx_v_k == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_k = __Pyx_PyInt_AsUnsignedLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_k == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_root", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_root");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":775
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":776
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_root(&rop._value, &op._value, k, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":777
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_root(&rop._value, &op._value, k, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 777; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":778
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_root(&rop._value, &op._value, k, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_pow(Mpfr_t rop not None, Mpfr_t op1 not None, Mpfr_t op2 not None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_root((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_k, __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_root");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":780
 *     return cmpfr.mpfr_root(&rop._value, &op._value, k, rnd)
 * 
 * def mpfr_pow(Mpfr_t rop not None, Mpfr_t op1 not None, Mpfr_t op2 not None,             # <<<<<<<<<<<<<<
 *              cmpfr.mpfr_rnd_t rnd):
 *     """
 */

static PyObject *__pyx_pf_4mpfr_35mpfr_pow(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_35mpfr_pow[] = "mpfr_pow(Mpfr_t rop, Mpfr_t op1, Mpfr_t op2, mpfr_rnd_t rnd)\n\n    Set rop to op1 raised to the power op2, rounded in the direction rnd.\n\n    Special values are handled as described in the ISO C99 and IEEE 754-2008\n    standards for the pow function.\n\n      * pow(\302\2610, y) returns plus or minus infinity for y a negative odd integer.\n\n      * pow(\302\2610, y) returns plus infinity for y negative and not an odd integer.\n\n      * pow(\302\2610, y) returns plus or minus zero for y a positive odd integer.\n\n      * pow(\302\2610, y) returns plus zero for y positive and not an odd integer.\n\n      * pow(-1, \302\261Inf) returns 1.\n\n      * pow(+1, y) returns 1 for any y, even a NaN.\n\n      * pow(x, \302\2610) returns 1 for any x, even a NaN.\n\n      * pow(x, y) returns NaN for finite negative x and finite non-integer y.\n\n      * pow(x, -Inf) returns plus infinity for 0 < abs(x) < 1, and plus zero\n        for abs(x) > 1.\n\n      * pow(x, +Inf) returns plus zero for 0 < abs(x) < 1, and plus infinity\n        for abs(x) > 1.\n\n      * pow(-Inf, y) returns minus zero for y a negative odd integer.\n\n      * pow(-Inf, y) returns plus zero for y negative and not an odd integer.\n\n      * pow(-Inf, y) returns minus infinity for y a positive odd integer.\n\n      * pow(-Inf, y) returns plus infinity for y positive and not an odd\n        integer.\n\n      * pow(+Inf, y) returns plus zero for y negative, and plus infinity for y\n        positive.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_35mpfr_pow = {__Pyx_NAMESTR("mpfr_pow"), (PyCFunction)__pyx_pf_4mpfr_35mpfr_pow, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_35mpfr_pow)};
static PyObject *__pyx_pf_4mpfr_35mpfr_pow(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op1 = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op2 = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op1,&__pyx_n_s__op2,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_pow");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op1);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_pow", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op2);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_pow", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_pow", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_pow") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[2]);
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 2));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_pow", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_pow");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op1), __pyx_ptype_4mpfr_Mpfr_t, 0, "op1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op2), __pyx_ptype_4mpfr_Mpfr_t, 0, "op2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":823
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op1)
 *     check_initialized(op2)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":824
 *     """
 *     check_initialized(rop)
 *     check_initialized(op1)             # <<<<<<<<<<<<<<
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 824; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":825
 *     check_initialized(rop)
 *     check_initialized(op1)
 *     check_initialized(op2)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_pow(&rop._value, &op1._value, &op2._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op2);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":826
 *     check_initialized(op1)
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_pow(&rop._value, &op1._value, &op2._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":827
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_pow(&rop._value, &op1._value, &op2._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_neg(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_pow((&__pyx_v_rop->_value), (&__pyx_v_op1->_value), (&__pyx_v_op2->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_pow");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":829
 *     return cmpfr.mpfr_pow(&rop._value, &op1._value, &op2._value, rnd)
 * 
 * def mpfr_neg(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to -op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_36mpfr_neg(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_36mpfr_neg[] = "mpfr_neg(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to -op, rounded in the direction rnd.\n\n    This function just changes or adjusts the sign if rop and op are the same\n    variable, otherwise a rounding might occur if the precision of rop is less\n    than that of op.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_36mpfr_neg = {__Pyx_NAMESTR("mpfr_neg"), (PyCFunction)__pyx_pf_4mpfr_36mpfr_neg, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_36mpfr_neg)};
static PyObject *__pyx_pf_4mpfr_36mpfr_neg(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_neg");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_neg", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_neg", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_neg") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_neg", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_neg");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":838
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":839
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_neg(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":840
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_neg(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":841
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_neg(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_abs(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_neg((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_neg");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":843
 *     return cmpfr.mpfr_neg(&rop._value, &op._value, rnd)
 * 
 * def mpfr_abs(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the absolute value of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_37mpfr_abs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_37mpfr_abs[] = "mpfr_abs(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the absolute value of op, rounded in the direction rnd.\n\n    This function just changes or adjusts the sign if rop and op are the same\n    variable, otherwise a rounding might occur if the precision of rop is less\n    than that of op.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_37mpfr_abs = {__Pyx_NAMESTR("mpfr_abs"), (PyCFunction)__pyx_pf_4mpfr_37mpfr_abs, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_37mpfr_abs)};
static PyObject *__pyx_pf_4mpfr_37mpfr_abs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_abs");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_abs", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_abs", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_abs") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_abs", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_abs");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":852
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":853
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_abs(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":854
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_abs(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 854; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":855
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_abs(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_dim(Mpfr_t rop not None, Mpfr_t op1 not None, Mpfr_t op2 not None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_abs((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 855; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_abs");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":857
 *     return cmpfr.mpfr_abs(&rop._value, &op._value, rnd)
 * 
 * def mpfr_dim(Mpfr_t rop not None, Mpfr_t op1 not None, Mpfr_t op2 not None,             # <<<<<<<<<<<<<<
 *              cmpfr.mpfr_rnd_t rnd):
 *     """
 */

static PyObject *__pyx_pf_4mpfr_38mpfr_dim(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_38mpfr_dim[] = "mpfr_dim(Mpfr_t rop, Mpfr_t op1, Mpfr_t op2, mpfr_rnd_t rnd)\n\n    Set rop to max(op1 - op2, 0), rounded in the direction rnd.\n\n    Set rop to op1 - op2 rounded in the direction rnd if op1 > op2, +0 if op1\n    <= op2, and NaN if op1 or op2 is NaN.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_38mpfr_dim = {__Pyx_NAMESTR("mpfr_dim"), (PyCFunction)__pyx_pf_4mpfr_38mpfr_dim, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_38mpfr_dim)};
static PyObject *__pyx_pf_4mpfr_38mpfr_dim(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op1 = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op2 = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op1,&__pyx_n_s__op2,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_dim");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op1);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_dim", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op2);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_dim", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_dim", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_dim") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[2]);
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 858; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 2));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 858; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_dim", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_dim");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op1), __pyx_ptype_4mpfr_Mpfr_t, 0, "op1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op2), __pyx_ptype_4mpfr_Mpfr_t, 0, "op2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":866
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op1)
 *     check_initialized(op2)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 866; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":867
 *     """
 *     check_initialized(rop)
 *     check_initialized(op1)             # <<<<<<<<<<<<<<
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 867; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":868
 *     check_initialized(rop)
 *     check_initialized(op1)
 *     check_initialized(op2)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_dim(&rop._value, &op1._value, &op2._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op2);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 868; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":869
 *     check_initialized(op1)
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_dim(&rop._value, &op1._value, &op2._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 869; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":870
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_dim(&rop._value, &op1._value, &op2._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_dim((&__pyx_v_rop->_value), (&__pyx_v_op1->_value), (&__pyx_v_op2->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 870; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_dim");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":877
 * ###############################################################################
 * 
 * def mpfr_cmp(Mpfr_t op1 not None, Mpfr_t op2 not None):             # <<<<<<<<<<<<<<
 *     """
 *     Perform a three-way comparison of op1 and op2.
 */

static PyObject *__pyx_pf_4mpfr_39mpfr_cmp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_39mpfr_cmp[] = "mpfr_cmp(Mpfr_t op1, Mpfr_t op2)\n\n    Perform a three-way comparison of op1 and op2.\n\n    Return a positive value if op1 > op2, zero if op1 = op2, and a negative\n    value if op1 < op2. Both op1 and op2 are considered to their full own\n    precision, which may differ. If one of the operands is NaN, set the erange\n    flag and return zero.\n\n    Note: This function may be useful to distinguish the three possible\n    cases. If you need to distinguish two cases only, it is recommended to use\n    the predicate functions (e.g., mpfr_equal_p for the equality) described\n    below; they behave like the IEEE 754 comparisons, in particular when one or\n    both arguments are NaN.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_39mpfr_cmp = {__Pyx_NAMESTR("mpfr_cmp"), (PyCFunction)__pyx_pf_4mpfr_39mpfr_cmp, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_39mpfr_cmp)};
static PyObject *__pyx_pf_4mpfr_39mpfr_cmp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op1 = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op2 = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__op1,&__pyx_n_s__op2,0};
  __Pyx_RefNannySetupContext("mpfr_cmp");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op1);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op2);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_cmp", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_cmp") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_cmp", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_cmp");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op1), __pyx_ptype_4mpfr_Mpfr_t, 0, "op1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op2), __pyx_ptype_4mpfr_Mpfr_t, 0, "op2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":893
 * 
 *     """
 *     check_initialized(op1)             # <<<<<<<<<<<<<<
 *     check_initialized(op2)
 *     return cmpfr.mpfr_cmp(&op1._value, &op2._value)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 893; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":894
 *     """
 *     check_initialized(op1)
 *     check_initialized(op2)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_cmp(&op1._value, &op2._value)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op2);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":895
 *     check_initialized(op1)
 *     check_initialized(op2)
 *     return cmpfr.mpfr_cmp(&op1._value, &op2._value)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_cmpabs(Mpfr_t op1 not None, Mpfr_t op2 not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_cmp((&__pyx_v_op1->_value), (&__pyx_v_op2->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_cmp");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":897
 *     return cmpfr.mpfr_cmp(&op1._value, &op2._value)
 * 
 * def mpfr_cmpabs(Mpfr_t op1 not None, Mpfr_t op2 not None):             # <<<<<<<<<<<<<<
 *     """
 *     Compare the absolute values of op1 and op2.
 */

static PyObject *__pyx_pf_4mpfr_40mpfr_cmpabs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_40mpfr_cmpabs[] = "mpfr_cmpabs(Mpfr_t op1, Mpfr_t op2)\n\n    Compare the absolute values of op1 and op2.\n\n    Compare |op1| and |op2|. Return a positive value if |op1| > |op2|, zero if\n    |op1| == |op2|, and a negative value if |op1| < |op2|. If one of the\n    operands is NaN, set the erange flag and return zero.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_40mpfr_cmpabs = {__Pyx_NAMESTR("mpfr_cmpabs"), (PyCFunction)__pyx_pf_4mpfr_40mpfr_cmpabs, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_40mpfr_cmpabs)};
static PyObject *__pyx_pf_4mpfr_40mpfr_cmpabs(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op1 = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op2 = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__op1,&__pyx_n_s__op2,0};
  __Pyx_RefNannySetupContext("mpfr_cmpabs");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op1);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op2);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_cmpabs", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_cmpabs") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_cmpabs", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_cmpabs");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op1), __pyx_ptype_4mpfr_Mpfr_t, 0, "op1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op2), __pyx_ptype_4mpfr_Mpfr_t, 0, "op2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":906
 * 
 *     """
 *     check_initialized(op1)             # <<<<<<<<<<<<<<
 *     check_initialized(op2)
 *     return cmpfr.mpfr_cmpabs(&op1._value, &op2._value)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 906; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":907
 *     """
 *     check_initialized(op1)
 *     check_initialized(op2)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_cmpabs(&op1._value, &op2._value)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op2);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 907; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":908
 *     check_initialized(op1)
 *     check_initialized(op2)
 *     return cmpfr.mpfr_cmpabs(&op1._value, &op2._value)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_nan_p(Mpfr_t op not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_cmpabs((&__pyx_v_op1->_value), (&__pyx_v_op2->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 908; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_cmpabs");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":910
 *     return cmpfr.mpfr_cmpabs(&op1._value, &op2._value)
 * 
 * def mpfr_nan_p(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op is a NaN.  Return False otherwise.
 */

static PyObject *__pyx_pf_4mpfr_41mpfr_nan_p(PyObject *__pyx_self, PyObject *__pyx_v_op); /*proto*/
static char __pyx_doc_4mpfr_41mpfr_nan_p[] = "mpfr_nan_p(Mpfr_t op)\n\n    Return True if op is a NaN.  Return False otherwise.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_41mpfr_nan_p = {__Pyx_NAMESTR("mpfr_nan_p"), (PyCFunction)__pyx_pf_4mpfr_41mpfr_nan_p, METH_O, __Pyx_DOCSTR(__pyx_doc_4mpfr_41mpfr_nan_p)};
static PyObject *__pyx_pf_4mpfr_41mpfr_nan_p(PyObject *__pyx_self, PyObject *__pyx_v_op) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("mpfr_nan_p");
  __pyx_self = __pyx_self;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":915
 * 
 *     """
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     return bool(cmpfr.mpfr_nan_p(&op._value))
 * 
 */
  __pyx_t_1 = __pyx_v_op;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":916
 *     """
 *     check_initialized(op)
 *     return bool(cmpfr.mpfr_nan_p(&op._value))             # <<<<<<<<<<<<<<
 * 
 * def mpfr_inf_p(Mpfr_t op not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_nan_p((&((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_v_op)->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_3))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_nan_p");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":918
 *     return bool(cmpfr.mpfr_nan_p(&op._value))
 * 
 * def mpfr_inf_p(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op is an infinity.  Return False otherwise.
 */

static PyObject *__pyx_pf_4mpfr_42mpfr_inf_p(PyObject *__pyx_self, PyObject *__pyx_v_op); /*proto*/
static char __pyx_doc_4mpfr_42mpfr_inf_p[] = "mpfr_inf_p(Mpfr_t op)\n\n    Return True if op is an infinity.  Return False otherwise.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_42mpfr_inf_p = {__Pyx_NAMESTR("mpfr_inf_p"), (PyCFunction)__pyx_pf_4mpfr_42mpfr_inf_p, METH_O, __Pyx_DOCSTR(__pyx_doc_4mpfr_42mpfr_inf_p)};
static PyObject *__pyx_pf_4mpfr_42mpfr_inf_p(PyObject *__pyx_self, PyObject *__pyx_v_op) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("mpfr_inf_p");
  __pyx_self = __pyx_self;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":923
 * 
 *     """
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     return bool(cmpfr.mpfr_inf_p(&op._value))
 * 
 */
  __pyx_t_1 = __pyx_v_op;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 923; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":924
 *     """
 *     check_initialized(op)
 *     return bool(cmpfr.mpfr_inf_p(&op._value))             # <<<<<<<<<<<<<<
 * 
 * def mpfr_number_p(Mpfr_t op not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_inf_p((&((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_v_op)->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_3))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 924; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_inf_p");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":926
 *     return bool(cmpfr.mpfr_inf_p(&op._value))
 * 
 * def mpfr_number_p(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op is an ordinary number.  Return False otherwise.
 */

static PyObject *__pyx_pf_4mpfr_43mpfr_number_p(PyObject *__pyx_self, PyObject *__pyx_v_op); /*proto*/
static char __pyx_doc_4mpfr_43mpfr_number_p[] = "mpfr_number_p(Mpfr_t op)\n\n    Return True if op is an ordinary number.  Return False otherwise.\n\n    An ordinary number is a number which is neither a NaN nor an infinity.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_43mpfr_number_p = {__Pyx_NAMESTR("mpfr_number_p"), (PyCFunction)__pyx_pf_4mpfr_43mpfr_number_p, METH_O, __Pyx_DOCSTR(__pyx_doc_4mpfr_43mpfr_number_p)};
static PyObject *__pyx_pf_4mpfr_43mpfr_number_p(PyObject *__pyx_self, PyObject *__pyx_v_op) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("mpfr_number_p");
  __pyx_self = __pyx_self;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 926; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":933
 * 
 *     """
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     return bool(cmpfr.mpfr_number_p(&op._value))
 * 
 */
  __pyx_t_1 = __pyx_v_op;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":934
 *     """
 *     check_initialized(op)
 *     return bool(cmpfr.mpfr_number_p(&op._value))             # <<<<<<<<<<<<<<
 * 
 * def mpfr_zero_p(Mpfr_t op not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_number_p((&((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_v_op)->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_3))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_number_p");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":936
 *     return bool(cmpfr.mpfr_number_p(&op._value))
 * 
 * def mpfr_zero_p(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op is zero.  Return False otherwise.
 */

static PyObject *__pyx_pf_4mpfr_44mpfr_zero_p(PyObject *__pyx_self, PyObject *__pyx_v_op); /*proto*/
static char __pyx_doc_4mpfr_44mpfr_zero_p[] = "mpfr_zero_p(Mpfr_t op)\n\n    Return True if op is zero.  Return False otherwise.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_44mpfr_zero_p = {__Pyx_NAMESTR("mpfr_zero_p"), (PyCFunction)__pyx_pf_4mpfr_44mpfr_zero_p, METH_O, __Pyx_DOCSTR(__pyx_doc_4mpfr_44mpfr_zero_p)};
static PyObject *__pyx_pf_4mpfr_44mpfr_zero_p(PyObject *__pyx_self, PyObject *__pyx_v_op) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("mpfr_zero_p");
  __pyx_self = __pyx_self;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":941
 * 
 *     """
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     return bool(cmpfr.mpfr_zero_p(&op._value))
 * 
 */
  __pyx_t_1 = __pyx_v_op;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 941; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":942
 *     """
 *     check_initialized(op)
 *     return bool(cmpfr.mpfr_zero_p(&op._value))             # <<<<<<<<<<<<<<
 * 
 * def mpfr_regular_p(Mpfr_t op not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_zero_p((&((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_v_op)->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 942; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 942; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_3))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 942; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_zero_p");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":944
 *     return bool(cmpfr.mpfr_zero_p(&op._value))
 * 
 * def mpfr_regular_p(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op is a regular number.  Return False otherwise.
 */

static PyObject *__pyx_pf_4mpfr_45mpfr_regular_p(PyObject *__pyx_self, PyObject *__pyx_v_op); /*proto*/
static char __pyx_doc_4mpfr_45mpfr_regular_p[] = "mpfr_regular_p(Mpfr_t op)\n\n    Return True if op is a regular number.  Return False otherwise.\n\n    A regular number is a number which is neither a NaN, nor an infinity, nor a\n    zero.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_45mpfr_regular_p = {__Pyx_NAMESTR("mpfr_regular_p"), (PyCFunction)__pyx_pf_4mpfr_45mpfr_regular_p, METH_O, __Pyx_DOCSTR(__pyx_doc_4mpfr_45mpfr_regular_p)};
static PyObject *__pyx_pf_4mpfr_45mpfr_regular_p(PyObject *__pyx_self, PyObject *__pyx_v_op) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("mpfr_regular_p");
  __pyx_self = __pyx_self;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":952
 * 
 *     """
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     return bool(cmpfr.mpfr_regular_p(&op._value))
 * 
 */
  __pyx_t_1 = __pyx_v_op;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":953
 *     """
 *     check_initialized(op)
 *     return bool(cmpfr.mpfr_regular_p(&op._value))             # <<<<<<<<<<<<<<
 * 
 * def mpfr_sgn(Mpfr_t op not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_regular_p((&((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_v_op)->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_3))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 953; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_regular_p");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":955
 *     return bool(cmpfr.mpfr_regular_p(&op._value))
 * 
 * def mpfr_sgn(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return the sign of op.
 */

static PyObject *__pyx_pf_4mpfr_46mpfr_sgn(PyObject *__pyx_self, PyObject *__pyx_v_op); /*proto*/
static char __pyx_doc_4mpfr_46mpfr_sgn[] = "mpfr_sgn(Mpfr_t op)\n\n    Return the sign of op.\n\n    Return a positive value if op > 0, zero if op = 0, and a negative value if\n    op < 0. If the operand is NaN, set the erange flag and return zero. This is\n    equivalent to mpfr_cmp_ui (op, 0), but more efficient.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_46mpfr_sgn = {__Pyx_NAMESTR("mpfr_sgn"), (PyCFunction)__pyx_pf_4mpfr_46mpfr_sgn, METH_O, __Pyx_DOCSTR(__pyx_doc_4mpfr_46mpfr_sgn)};
static PyObject *__pyx_pf_4mpfr_46mpfr_sgn(PyObject *__pyx_self, PyObject *__pyx_v_op) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("mpfr_sgn");
  __pyx_self = __pyx_self;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 955; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":964
 * 
 *     """
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_sgn(&op._value)
 * 
 */
  __pyx_t_1 = __pyx_v_op;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 964; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":965
 *     """
 *     check_initialized(op)
 *     return cmpfr.mpfr_sgn(&op._value)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_greater_p(Mpfr_t op1 not None, Mpfr_t op2 not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_sgn((&((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_v_op)->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 965; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_sgn");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":967
 *     return cmpfr.mpfr_sgn(&op._value)
 * 
 * def mpfr_greater_p(Mpfr_t op1 not None, Mpfr_t op2 not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op1 > op2 and False otherwise.
 */

static PyObject *__pyx_pf_4mpfr_47mpfr_greater_p(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_47mpfr_greater_p[] = "mpfr_greater_p(Mpfr_t op1, Mpfr_t op2)\n\n    Return True if op1 > op2 and False otherwise.\n\n    This function returns False whenever op1 and/or op2 is a NaN.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_47mpfr_greater_p = {__Pyx_NAMESTR("mpfr_greater_p"), (PyCFunction)__pyx_pf_4mpfr_47mpfr_greater_p, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_47mpfr_greater_p)};
static PyObject *__pyx_pf_4mpfr_47mpfr_greater_p(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op1 = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op2 = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__op1,&__pyx_n_s__op2,0};
  __Pyx_RefNannySetupContext("mpfr_greater_p");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op1);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op2);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_greater_p", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_greater_p") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_greater_p", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_greater_p");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op1), __pyx_ptype_4mpfr_Mpfr_t, 0, "op1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op2), __pyx_ptype_4mpfr_Mpfr_t, 0, "op2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":974
 * 
 *     """
 *     check_initialized(op1)             # <<<<<<<<<<<<<<
 *     check_initialized(op2)
 *     return bool(cmpfr.mpfr_greater_p(&op1._value, &op2._value))
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":975
 *     """
 *     check_initialized(op1)
 *     check_initialized(op2)             # <<<<<<<<<<<<<<
 *     return bool(cmpfr.mpfr_greater_p(&op1._value, &op2._value))
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op2);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 975; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":976
 *     check_initialized(op1)
 *     check_initialized(op2)
 *     return bool(cmpfr.mpfr_greater_p(&op1._value, &op2._value))             # <<<<<<<<<<<<<<
 * 
 * def mpfr_greaterequal_p(Mpfr_t op1 not None, Mpfr_t op2 not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_greater_p((&__pyx_v_op1->_value), (&__pyx_v_op2->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_3))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_greater_p");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":978
 *     return bool(cmpfr.mpfr_greater_p(&op1._value, &op2._value))
 * 
 * def mpfr_greaterequal_p(Mpfr_t op1 not None, Mpfr_t op2 not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op1 >= op2 and False otherwise.
 */

static PyObject *__pyx_pf_4mpfr_48mpfr_greaterequal_p(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_48mpfr_greaterequal_p[] = "mpfr_greaterequal_p(Mpfr_t op1, Mpfr_t op2)\n\n    Return True if op1 >= op2 and False otherwise.\n\n    This function returns False whenever op1 and/or op2 is a NaN.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_48mpfr_greaterequal_p = {__Pyx_NAMESTR("mpfr_greaterequal_p"), (PyCFunction)__pyx_pf_4mpfr_48mpfr_greaterequal_p, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_48mpfr_greaterequal_p)};
static PyObject *__pyx_pf_4mpfr_48mpfr_greaterequal_p(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op1 = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op2 = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__op1,&__pyx_n_s__op2,0};
  __Pyx_RefNannySetupContext("mpfr_greaterequal_p");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op1);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op2);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_greaterequal_p", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_greaterequal_p") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_greaterequal_p", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_greaterequal_p");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op1), __pyx_ptype_4mpfr_Mpfr_t, 0, "op1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op2), __pyx_ptype_4mpfr_Mpfr_t, 0, "op2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":985
 * 
 *     """
 *     check_initialized(op1)             # <<<<<<<<<<<<<<
 *     check_initialized(op2)
 *     return bool(cmpfr.mpfr_greaterequal_p(&op1._value, &op2._value))
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 985; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":986
 *     """
 *     check_initialized(op1)
 *     check_initialized(op2)             # <<<<<<<<<<<<<<
 *     return bool(cmpfr.mpfr_greaterequal_p(&op1._value, &op2._value))
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op2);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 986; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":987
 *     check_initialized(op1)
 *     check_initialized(op2)
 *     return bool(cmpfr.mpfr_greaterequal_p(&op1._value, &op2._value))             # <<<<<<<<<<<<<<
 * 
 * def mpfr_less_p(Mpfr_t op1 not None, Mpfr_t op2 not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_greaterequal_p((&__pyx_v_op1->_value), (&__pyx_v_op2->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 987; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 987; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_3))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 987; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_greaterequal_p");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":989
 *     return bool(cmpfr.mpfr_greaterequal_p(&op1._value, &op2._value))
 * 
 * def mpfr_less_p(Mpfr_t op1 not None, Mpfr_t op2 not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op1 < op2 and False otherwise.
 */

static PyObject *__pyx_pf_4mpfr_49mpfr_less_p(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_49mpfr_less_p[] = "mpfr_less_p(Mpfr_t op1, Mpfr_t op2)\n\n    Return True if op1 < op2 and False otherwise.\n\n    This function returns False whenever op1 and/or op2 is a NaN.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_49mpfr_less_p = {__Pyx_NAMESTR("mpfr_less_p"), (PyCFunction)__pyx_pf_4mpfr_49mpfr_less_p, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_49mpfr_less_p)};
static PyObject *__pyx_pf_4mpfr_49mpfr_less_p(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op1 = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op2 = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__op1,&__pyx_n_s__op2,0};
  __Pyx_RefNannySetupContext("mpfr_less_p");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op1);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op2);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_less_p", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_less_p") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_less_p", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_less_p");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op1), __pyx_ptype_4mpfr_Mpfr_t, 0, "op1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op2), __pyx_ptype_4mpfr_Mpfr_t, 0, "op2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":996
 * 
 *     """
 *     check_initialized(op1)             # <<<<<<<<<<<<<<
 *     check_initialized(op2)
 *     return bool(cmpfr.mpfr_less_p(&op1._value, &op2._value))
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 996; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":997
 *     """
 *     check_initialized(op1)
 *     check_initialized(op2)             # <<<<<<<<<<<<<<
 *     return bool(cmpfr.mpfr_less_p(&op1._value, &op2._value))
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op2);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 997; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":998
 *     check_initialized(op1)
 *     check_initialized(op2)
 *     return bool(cmpfr.mpfr_less_p(&op1._value, &op2._value))             # <<<<<<<<<<<<<<
 * 
 * def mpfr_lessequal_p(Mpfr_t op1 not None, Mpfr_t op2 not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_less_p((&__pyx_v_op1->_value), (&__pyx_v_op2->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 998; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 998; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_3))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 998; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_less_p");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1000
 *     return bool(cmpfr.mpfr_less_p(&op1._value, &op2._value))
 * 
 * def mpfr_lessequal_p(Mpfr_t op1 not None, Mpfr_t op2 not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op1 <= op2 and False otherwise.
 */

static PyObject *__pyx_pf_4mpfr_50mpfr_lessequal_p(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_50mpfr_lessequal_p[] = "mpfr_lessequal_p(Mpfr_t op1, Mpfr_t op2)\n\n    Return True if op1 <= op2 and False otherwise.\n\n    This function returns False whenever op1 and/or op2 is a NaN.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_50mpfr_lessequal_p = {__Pyx_NAMESTR("mpfr_lessequal_p"), (PyCFunction)__pyx_pf_4mpfr_50mpfr_lessequal_p, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_50mpfr_lessequal_p)};
static PyObject *__pyx_pf_4mpfr_50mpfr_lessequal_p(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op1 = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op2 = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__op1,&__pyx_n_s__op2,0};
  __Pyx_RefNannySetupContext("mpfr_lessequal_p");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op1);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op2);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_lessequal_p", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_lessequal_p") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_lessequal_p", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_lessequal_p");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op1), __pyx_ptype_4mpfr_Mpfr_t, 0, "op1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op2), __pyx_ptype_4mpfr_Mpfr_t, 0, "op2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1007
 * 
 *     """
 *     check_initialized(op1)             # <<<<<<<<<<<<<<
 *     check_initialized(op2)
 *     return bool(cmpfr.mpfr_lessequal_p(&op1._value, &op2._value))
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1007; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1008
 *     """
 *     check_initialized(op1)
 *     check_initialized(op2)             # <<<<<<<<<<<<<<
 *     return bool(cmpfr.mpfr_lessequal_p(&op1._value, &op2._value))
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op2);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1008; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1009
 *     check_initialized(op1)
 *     check_initialized(op2)
 *     return bool(cmpfr.mpfr_lessequal_p(&op1._value, &op2._value))             # <<<<<<<<<<<<<<
 * 
 * def mpfr_equal_p(Mpfr_t op1 not None, Mpfr_t op2 not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_lessequal_p((&__pyx_v_op1->_value), (&__pyx_v_op2->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1009; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1009; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_3))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1009; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_lessequal_p");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1011
 *     return bool(cmpfr.mpfr_lessequal_p(&op1._value, &op2._value))
 * 
 * def mpfr_equal_p(Mpfr_t op1 not None, Mpfr_t op2 not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op1 == op2 and False otherwise.
 */

static PyObject *__pyx_pf_4mpfr_51mpfr_equal_p(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_51mpfr_equal_p[] = "mpfr_equal_p(Mpfr_t op1, Mpfr_t op2)\n\n    Return True if op1 == op2 and False otherwise.\n\n    This function returns False whenever op1 and/or op2 is a NaN.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_51mpfr_equal_p = {__Pyx_NAMESTR("mpfr_equal_p"), (PyCFunction)__pyx_pf_4mpfr_51mpfr_equal_p, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_51mpfr_equal_p)};
static PyObject *__pyx_pf_4mpfr_51mpfr_equal_p(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op1 = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op2 = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__op1,&__pyx_n_s__op2,0};
  __Pyx_RefNannySetupContext("mpfr_equal_p");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op1);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op2);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_equal_p", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1011; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_equal_p") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1011; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_equal_p", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1011; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_equal_p");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op1), __pyx_ptype_4mpfr_Mpfr_t, 0, "op1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op2), __pyx_ptype_4mpfr_Mpfr_t, 0, "op2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1018
 * 
 *     """
 *     check_initialized(op1)             # <<<<<<<<<<<<<<
 *     check_initialized(op2)
 *     return bool(cmpfr.mpfr_equal_p(&op1._value, &op2._value))
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1019
 *     """
 *     check_initialized(op1)
 *     check_initialized(op2)             # <<<<<<<<<<<<<<
 *     return bool(cmpfr.mpfr_equal_p(&op1._value, &op2._value))
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op2);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1019; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1020
 *     check_initialized(op1)
 *     check_initialized(op2)
 *     return bool(cmpfr.mpfr_equal_p(&op1._value, &op2._value))             # <<<<<<<<<<<<<<
 * 
 * def mpfr_lessgreater_p(Mpfr_t op1 not None, Mpfr_t op2 not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_equal_p((&__pyx_v_op1->_value), (&__pyx_v_op2->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_3))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_equal_p");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1022
 *     return bool(cmpfr.mpfr_equal_p(&op1._value, &op2._value))
 * 
 * def mpfr_lessgreater_p(Mpfr_t op1 not None, Mpfr_t op2 not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op1 < op2 or op1 > op2 and False otherwise.
 */

static PyObject *__pyx_pf_4mpfr_52mpfr_lessgreater_p(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_52mpfr_lessgreater_p[] = "mpfr_lessgreater_p(Mpfr_t op1, Mpfr_t op2)\n\n    Return True if op1 < op2 or op1 > op2 and False otherwise.\n\n    This function returns False whenever op1 and/or op2 is a NaN.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_52mpfr_lessgreater_p = {__Pyx_NAMESTR("mpfr_lessgreater_p"), (PyCFunction)__pyx_pf_4mpfr_52mpfr_lessgreater_p, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_52mpfr_lessgreater_p)};
static PyObject *__pyx_pf_4mpfr_52mpfr_lessgreater_p(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op1 = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op2 = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__op1,&__pyx_n_s__op2,0};
  __Pyx_RefNannySetupContext("mpfr_lessgreater_p");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op1);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op2);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_lessgreater_p", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_lessgreater_p") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_lessgreater_p", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_lessgreater_p");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op1), __pyx_ptype_4mpfr_Mpfr_t, 0, "op1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op2), __pyx_ptype_4mpfr_Mpfr_t, 0, "op2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1029
 * 
 *     """
 *     check_initialized(op1)             # <<<<<<<<<<<<<<
 *     check_initialized(op2)
 *     return bool(cmpfr.mpfr_lessgreater_p(&op1._value, &op2._value))
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1030
 *     """
 *     check_initialized(op1)
 *     check_initialized(op2)             # <<<<<<<<<<<<<<
 *     return bool(cmpfr.mpfr_lessgreater_p(&op1._value, &op2._value))
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op2);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1030; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1031
 *     check_initialized(op1)
 *     check_initialized(op2)
 *     return bool(cmpfr.mpfr_lessgreater_p(&op1._value, &op2._value))             # <<<<<<<<<<<<<<
 * 
 * def mpfr_unordered_p(Mpfr_t op1 not None, Mpfr_t op2 not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_lessgreater_p((&__pyx_v_op1->_value), (&__pyx_v_op2->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1031; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1031; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_3))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1031; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_lessgreater_p");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1033
 *     return bool(cmpfr.mpfr_lessgreater_p(&op1._value, &op2._value))
 * 
 * def mpfr_unordered_p(Mpfr_t op1 not None, Mpfr_t op2 not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op1 or op2 is a NaN and False otherwise.
 */

static PyObject *__pyx_pf_4mpfr_53mpfr_unordered_p(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_53mpfr_unordered_p[] = "mpfr_unordered_p(Mpfr_t op1, Mpfr_t op2)\n\n    Return True if op1 or op2 is a NaN and False otherwise.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_53mpfr_unordered_p = {__Pyx_NAMESTR("mpfr_unordered_p"), (PyCFunction)__pyx_pf_4mpfr_53mpfr_unordered_p, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_53mpfr_unordered_p)};
static PyObject *__pyx_pf_4mpfr_53mpfr_unordered_p(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op1 = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op2 = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__op1,&__pyx_n_s__op2,0};
  __Pyx_RefNannySetupContext("mpfr_unordered_p");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op1);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op2);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_unordered_p", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1033; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_unordered_p") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1033; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_unordered_p", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1033; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_unordered_p");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op1), __pyx_ptype_4mpfr_Mpfr_t, 0, "op1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1033; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op2), __pyx_ptype_4mpfr_Mpfr_t, 0, "op2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1033; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1038
 * 
 *     """
 *     check_initialized(op1)             # <<<<<<<<<<<<<<
 *     check_initialized(op2)
 *     return bool(cmpfr.mpfr_unordered_p(&op1._value, &op2._value))
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1039
 *     """
 *     check_initialized(op1)
 *     check_initialized(op2)             # <<<<<<<<<<<<<<
 *     return bool(cmpfr.mpfr_unordered_p(&op1._value, &op2._value))
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op2);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1039; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1040
 *     check_initialized(op1)
 *     check_initialized(op2)
 *     return bool(cmpfr.mpfr_unordered_p(&op1._value, &op2._value))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_unordered_p((&__pyx_v_op1->_value), (&__pyx_v_op2->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_3))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_unordered_p");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1047
 * ###############################################################################
 * 
 * def mpfr_log(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the natural logarithm of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_54mpfr_log(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_54mpfr_log[] = "mpfr_log(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the natural logarithm of op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_54mpfr_log = {__Pyx_NAMESTR("mpfr_log"), (PyCFunction)__pyx_pf_4mpfr_54mpfr_log, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_54mpfr_log)};
static PyObject *__pyx_pf_4mpfr_54mpfr_log(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_log");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_log", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1047; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_log", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1047; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_log") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1047; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1047; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1047; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_log", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1047; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_log");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1052
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1053
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_log(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1053; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1054
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_log(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1054; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1055
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_log(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_log2(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_log((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_log");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1057
 *     return cmpfr.mpfr_log(&rop._value, &op._value, rnd)
 * 
 * def mpfr_log2(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the base-two logarithm of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_55mpfr_log2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_55mpfr_log2[] = "mpfr_log2(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the base-two logarithm of op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_55mpfr_log2 = {__Pyx_NAMESTR("mpfr_log2"), (PyCFunction)__pyx_pf_4mpfr_55mpfr_log2, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_55mpfr_log2)};
static PyObject *__pyx_pf_4mpfr_55mpfr_log2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_log2");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_log2", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_log2", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_log2") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_log2", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_log2");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1062
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1062; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1063
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_log2(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1063; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1064
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_log2(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1065
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_log2(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_log10(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_log2((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1065; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_log2");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1067
 *     return cmpfr.mpfr_log2(&rop._value, &op._value, rnd)
 * 
 * def mpfr_log10(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the base-ten logarithm of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_56mpfr_log10(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_56mpfr_log10[] = "mpfr_log10(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the base-ten logarithm of op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_56mpfr_log10 = {__Pyx_NAMESTR("mpfr_log10"), (PyCFunction)__pyx_pf_4mpfr_56mpfr_log10, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_56mpfr_log10)};
static PyObject *__pyx_pf_4mpfr_56mpfr_log10(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_log10");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_log10", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_log10", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_log10") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_log10", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_log10");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1072
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1072; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1073
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_log10(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1073; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1074
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_log10(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1074; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1075
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_log10(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_exp(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_log10((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_log10");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1077
 *     return cmpfr.mpfr_log10(&rop._value, &op._value, rnd)
 * 
 * def mpfr_exp(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the exponential of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_57mpfr_exp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_57mpfr_exp[] = "mpfr_exp(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the exponential of op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_57mpfr_exp = {__Pyx_NAMESTR("mpfr_exp"), (PyCFunction)__pyx_pf_4mpfr_57mpfr_exp, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_57mpfr_exp)};
static PyObject *__pyx_pf_4mpfr_57mpfr_exp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_exp");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_exp", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_exp", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_exp") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_exp", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_exp");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1082
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1082; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1083
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_exp(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1083; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1084
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_exp(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1084; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1085
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_exp(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_exp2(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_exp((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1085; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_exp");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1087
 *     return cmpfr.mpfr_exp(&rop._value, &op._value, rnd)
 * 
 * def mpfr_exp2(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to two raised to the power op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_58mpfr_exp2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_58mpfr_exp2[] = "mpfr_exp2(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to two raised to the power op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_58mpfr_exp2 = {__Pyx_NAMESTR("mpfr_exp2"), (PyCFunction)__pyx_pf_4mpfr_58mpfr_exp2, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_58mpfr_exp2)};
static PyObject *__pyx_pf_4mpfr_58mpfr_exp2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_exp2");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_exp2", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_exp2", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_exp2") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_exp2", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_exp2");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1092
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1092; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1093
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_exp2(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1093; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1094
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_exp2(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1094; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1095
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_exp2(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_exp10(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_exp2((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1095; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_exp2");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1097
 *     return cmpfr.mpfr_exp2(&rop._value, &op._value, rnd)
 * 
 * def mpfr_exp10(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to ten raised to the power op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_59mpfr_exp10(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_59mpfr_exp10[] = "mpfr_exp10(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to ten raised to the power op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_59mpfr_exp10 = {__Pyx_NAMESTR("mpfr_exp10"), (PyCFunction)__pyx_pf_4mpfr_59mpfr_exp10, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_59mpfr_exp10)};
static PyObject *__pyx_pf_4mpfr_59mpfr_exp10(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_exp10");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_exp10", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1097; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_exp10", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1097; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_exp10") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1097; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1097; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1097; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_exp10", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1097; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_exp10");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1097; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1097; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1102
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1103
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_exp10(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1104
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_exp10(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1105
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_exp10(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_cos(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_exp10((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_exp10");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1107
 *     return cmpfr.mpfr_exp10(&rop._value, &op._value, rnd)
 * 
 * def mpfr_cos(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the cosine of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_60mpfr_cos(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_60mpfr_cos[] = "mpfr_cos(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the cosine of op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_60mpfr_cos = {__Pyx_NAMESTR("mpfr_cos"), (PyCFunction)__pyx_pf_4mpfr_60mpfr_cos, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_60mpfr_cos)};
static PyObject *__pyx_pf_4mpfr_60mpfr_cos(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_cos");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_cos", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1107; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_cos", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1107; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_cos") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1107; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1107; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1107; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_cos", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1107; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_cos");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1112
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1113
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_cos(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1114
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_cos(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1115
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_cos(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_sin(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_cos((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_cos");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1117
 *     return cmpfr.mpfr_cos(&rop._value, &op._value, rnd)
 * 
 * def mpfr_sin(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the sine of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_61mpfr_sin(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_61mpfr_sin[] = "mpfr_sin(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the sine of op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_61mpfr_sin = {__Pyx_NAMESTR("mpfr_sin"), (PyCFunction)__pyx_pf_4mpfr_61mpfr_sin, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_61mpfr_sin)};
static PyObject *__pyx_pf_4mpfr_61mpfr_sin(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_sin");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_sin", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_sin", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_sin") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_sin", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_sin");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1122
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1123
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_sin(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1124
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_sin(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1125
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_sin(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_tan(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_sin((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_sin");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1127
 *     return cmpfr.mpfr_sin(&rop._value, &op._value, rnd)
 * 
 * def mpfr_tan(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the tangent of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_62mpfr_tan(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_62mpfr_tan[] = "mpfr_tan(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the tangent of op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_62mpfr_tan = {__Pyx_NAMESTR("mpfr_tan"), (PyCFunction)__pyx_pf_4mpfr_62mpfr_tan, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_62mpfr_tan)};
static PyObject *__pyx_pf_4mpfr_62mpfr_tan(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_tan");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_tan", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_tan", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_tan") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_tan", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_tan");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1132
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1133
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_tan(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1134
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_tan(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1135
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_tan(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_sin_cos(Mpfr_t sop not None, Mpfr_t cop not None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_tan((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_tan");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1137
 *     return cmpfr.mpfr_tan(&rop._value, &op._value, rnd)
 * 
 * def mpfr_sin_cos(Mpfr_t sop not None, Mpfr_t cop not None,             # <<<<<<<<<<<<<<
 *                  Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 *     """
 */

static PyObject *__pyx_pf_4mpfr_63mpfr_sin_cos(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_63mpfr_sin_cos[] = "mpfr_sin_cos(Mpfr_t sop, Mpfr_t cop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Compute sin(op) and cos(op), rounded in the direction rnd.\n\n    Set simultaneously sop to the sine of op and cop to the cosine of op,\n    rounded in the direction rnd with the corresponding precisions of sop and\n    cop, which must be different variables.\n\n    Returns a pair (sin_ternary, cos_ternary) of the corresponding ternary\n    values.  Note that this differs from the original mpfr_sin_cos function\n    from MPFR, which combines the ternary values into a single int return.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_63mpfr_sin_cos = {__Pyx_NAMESTR("mpfr_sin_cos"), (PyCFunction)__pyx_pf_4mpfr_63mpfr_sin_cos, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_63mpfr_sin_cos)};
static PyObject *__pyx_pf_4mpfr_63mpfr_sin_cos(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_sop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_cop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  int __pyx_v_ternary_pair;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__sop,&__pyx_n_s__cop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_sin_cos");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__cop);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_sin_cos", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_sin_cos", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_sin_cos", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_sin_cos") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_sop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_cop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[2]);
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1138; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_sop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_cop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 2));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1138; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_sin_cos", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1137; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_sin_cos");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sop), __pyx_ptype_4mpfr_Mpfr_t, 0, "sop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cop), __pyx_ptype_4mpfr_Mpfr_t, 0, "cop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1153
 *     cdef int ternary_pair
 * 
 *     check_initialized(sop)             # <<<<<<<<<<<<<<
 *     check_initialized(cop)
 *     check_initialized(op)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_sop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1154
 * 
 *     check_initialized(sop)
 *     check_initialized(cop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_cop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1155
 *     check_initialized(sop)
 *     check_initialized(cop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     ternary_pair = cmpfr.mpfr_sin_cos(
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1156
 *     check_initialized(cop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     ternary_pair = cmpfr.mpfr_sin_cos(
 *         &sop._value, &cop._value, &op._value, rnd
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1159
 *     ternary_pair = cmpfr.mpfr_sin_cos(
 *         &sop._value, &cop._value, &op._value, rnd
 *     )             # <<<<<<<<<<<<<<
 *     return decode_ternary_pair(ternary_pair)
 * 
 */
  __pyx_v_ternary_pair = mpfr_sin_cos((&__pyx_v_sop->_value), (&__pyx_v_cop->_value), (&__pyx_v_op->_value), __pyx_v_rnd);

  /* "mpfr.pyx":1160
 *         &sop._value, &cop._value, &op._value, rnd
 *     )
 *     return decode_ternary_pair(ternary_pair)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_sec(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4mpfr_decode_ternary_pair(__pyx_v_ternary_pair); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_sin_cos");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1162
 *     return decode_ternary_pair(ternary_pair)
 * 
 * def mpfr_sec(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the secant of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_64mpfr_sec(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_64mpfr_sec[] = "mpfr_sec(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the secant of op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_64mpfr_sec = {__Pyx_NAMESTR("mpfr_sec"), (PyCFunction)__pyx_pf_4mpfr_64mpfr_sec, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_64mpfr_sec)};
static PyObject *__pyx_pf_4mpfr_64mpfr_sec(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_sec");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_sec", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_sec", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_sec") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_sec", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_sec");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1167
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1168
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_sec(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1169
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_sec(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1170
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_sec(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_csc(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_sec((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_sec");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1172
 *     return cmpfr.mpfr_sec(&rop._value, &op._value, rnd)
 * 
 * def mpfr_csc(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the cosecant of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_65mpfr_csc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_65mpfr_csc[] = "mpfr_csc(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the cosecant of op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_65mpfr_csc = {__Pyx_NAMESTR("mpfr_csc"), (PyCFunction)__pyx_pf_4mpfr_65mpfr_csc, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_65mpfr_csc)};
static PyObject *__pyx_pf_4mpfr_65mpfr_csc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_csc");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_csc", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_csc", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_csc") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_csc", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_csc");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1177
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1178
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_csc(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1179
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_csc(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1180
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_csc(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_cot(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_csc((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_csc");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1182
 *     return cmpfr.mpfr_csc(&rop._value, &op._value, rnd)
 * 
 * def mpfr_cot(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the cotangent of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_66mpfr_cot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_66mpfr_cot[] = "mpfr_cot(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the cotangent of op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_66mpfr_cot = {__Pyx_NAMESTR("mpfr_cot"), (PyCFunction)__pyx_pf_4mpfr_66mpfr_cot, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_66mpfr_cot)};
static PyObject *__pyx_pf_4mpfr_66mpfr_cot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_cot");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_cot", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1182; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_cot", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1182; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_cot") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1182; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1182; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1182; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_cot", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1182; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_cot");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1187
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1188
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_cot(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1189
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_cot(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1190
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_cot(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_acos(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_cot((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_cot");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1192
 *     return cmpfr.mpfr_cot(&rop._value, &op._value, rnd)
 * 
 * def mpfr_acos(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the arc-cosine of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_67mpfr_acos(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_67mpfr_acos[] = "mpfr_acos(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the arc-cosine of op, rounded in the direction rnd.\n\n    The result will usually be in the range [0, Pi].  However, note that since\n    acos(-1) returns the floating-point number closest to Pi according to the\n    given rounding mode, this number might not be in the output range [0, Pi];\n    still, the result lies in the image of this output range by the rounding\n    function.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_67mpfr_acos = {__Pyx_NAMESTR("mpfr_acos"), (PyCFunction)__pyx_pf_4mpfr_67mpfr_acos, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_67mpfr_acos)};
static PyObject *__pyx_pf_4mpfr_67mpfr_acos(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_acos");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_acos", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1192; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_acos", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1192; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_acos") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1192; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1192; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1192; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_acos", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1192; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_acos");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1203
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1204
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_acos(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1205
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_acos(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1206
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_acos(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_asin(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_acos((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_acos");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1208
 *     return cmpfr.mpfr_acos(&rop._value, &op._value, rnd)
 * 
 * def mpfr_asin(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the arc-sine of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_68mpfr_asin(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_68mpfr_asin[] = "mpfr_asin(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the arc-sine of op, rounded in the direction rnd.\n\n    The result will usually be in the range [-Pi/2, Pi/2].  However, note that\n    since asin(-1) and asin(1) return the floating-point numbers closest to\n    -Pi/2 and Pi/2 (respectively) according to the given rounding mode, these\n    numbers might not be in the output range [-Pi/2, Pi/2]; still, the result\n    lies in the image of this output range by the rounding function.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_68mpfr_asin = {__Pyx_NAMESTR("mpfr_asin"), (PyCFunction)__pyx_pf_4mpfr_68mpfr_asin, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_68mpfr_asin)};
static PyObject *__pyx_pf_4mpfr_68mpfr_asin(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_asin");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_asin", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_asin", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_asin") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_asin", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_asin");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1219
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1220
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_asin(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1221
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_asin(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1222
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_asin(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_atan(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_asin((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_asin");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1224
 *     return cmpfr.mpfr_asin(&rop._value, &op._value, rnd)
 * 
 * def mpfr_atan(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the arc-tangent of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_69mpfr_atan(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_69mpfr_atan[] = "mpfr_atan(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the arc-tangent of op, rounded in the direction rnd.\n\n    The result will usually be in the range [-Pi/2, Pi/2].  However, note that\n    since atan(-inf) and atan(inf) return the floating-point numbers closest to\n    -Pi/2 and Pi/2 (respectively) according to the given rounding mode, these\n    numbers might not be in the output range [-Pi/2, Pi/2]; still, the result\n    lies in the image of this output range by the rounding function.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_69mpfr_atan = {__Pyx_NAMESTR("mpfr_atan"), (PyCFunction)__pyx_pf_4mpfr_69mpfr_atan, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_69mpfr_atan)};
static PyObject *__pyx_pf_4mpfr_69mpfr_atan(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_atan");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_atan", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1224; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_atan", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1224; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_atan") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1224; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1224; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1224; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_atan", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1224; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_atan");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1235
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1236
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_atan(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1237
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_atan(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1238
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_atan(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_atan2(Mpfr_t rop not None, Mpfr_t y not None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_atan((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_atan");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1240
 *     return cmpfr.mpfr_atan(&rop._value, &op._value, rnd)
 * 
 * def mpfr_atan2(Mpfr_t rop not None, Mpfr_t y not None,             # <<<<<<<<<<<<<<
 *                Mpfr_t x not None, cmpfr.mpfr_rnd_t rnd):
 *     """
 */

static PyObject *__pyx_pf_4mpfr_70mpfr_atan2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_70mpfr_atan2[] = "mpfr_atan2(Mpfr_t rop, Mpfr_t y, Mpfr_t x, mpfr_rnd_t rnd)\n\n    Set rop to atan(y / x) with the appropriate choice of function branch.\n\n    Set rop to the arc-tangent2 of y and x, rounded in the direction rnd: if x\n    > 0, atan2(y, x) = atan (y/x); if x < 0, atan2(y, x) = sign(y)*(Pi - atan\n    (abs(y/x))), thus a number from -Pi to Pi. As for atan, in case the exact\n    mathematical result is +Pi or -Pi, its rounded result might be outside the\n    function output range.\n\n    atan2(y, 0) does not raise any floating-point exception. Special values are\n    handled as described in the ISO C99 and IEEE 754-2008 standards for the\n    atan2 function:\n\n    atan2(+0, -0) returns +Pi.\n    atan2(-0, -0) returns -Pi.\n    atan2(+0, +0) returns +0.\n    atan2(-0, +0) returns \342\210\2220.\n    atan2(+0, x) returns +Pi for x < 0.\n    atan2(-0, x) returns -Pi for x < 0.\n    atan2(+0, x) returns +0 for x > 0.\n    atan2(-0, x) returns \342\210\2220 for x > 0.\n    atan2(y, 0) returns -Pi/2 for y < 0.\n    atan2(y, 0) returns +Pi/2 for y > 0.\n    atan2(+Inf, -Inf) returns +3*Pi/4.\n    atan2(-Inf, -Inf) returns -3*Pi/4.\n    atan2(+Inf, +Inf) returns +Pi/4.\n    atan2(-Inf, +Inf) returns -Pi/4.\n    atan2(+Inf, x) returns +Pi/2 for finite x.\n    atan2(-Inf, x) returns -Pi/2 for finite x.\n    atan2(y, -Inf) returns +Pi for finite y > 0.\n    atan2(y, -Inf) returns -Pi for finite y < 0.\n    atan2(y, +Inf) returns +0 for finite y > 0.\n    atan2(y, +Inf) returns \342\210\2220 for finite y < 0.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_70mpfr_atan2 = {__Pyx_NAMESTR("mpfr_atan2"), (PyCFunction)__pyx_pf_4mpfr_70mpfr_atan2, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_70mpfr_atan2)};
static PyObject *__pyx_pf_4mpfr_70mpfr_atan2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_y = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_x = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__y,&__pyx_n_s__x,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_atan2");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_atan2", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1240; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_atan2", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1240; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_atan2", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1240; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_atan2") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1240; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_y = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[2]);
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_y = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 2));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_atan2", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1240; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_atan2");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_4mpfr_Mpfr_t, 0, "y", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_4mpfr_Mpfr_t, 0, "x", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1277
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(y)
 *     check_initialized(x)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1278
 *     """
 *     check_initialized(rop)
 *     check_initialized(y)             # <<<<<<<<<<<<<<
 *     check_initialized(x)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_y);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1279
 *     check_initialized(rop)
 *     check_initialized(y)
 *     check_initialized(x)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_atan2(&rop._value, &y._value, &x._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_x);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1280
 *     check_initialized(y)
 *     check_initialized(x)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_atan2(&rop._value, &y._value, &x._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1281
 *     check_initialized(x)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_atan2(&rop._value, &y._value, &x._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_cosh(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_atan2((&__pyx_v_rop->_value), (&__pyx_v_y->_value), (&__pyx_v_x->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_atan2");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1283
 *     return cmpfr.mpfr_atan2(&rop._value, &y._value, &x._value, rnd)
 * 
 * def mpfr_cosh(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the hyperbolic cosine of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_71mpfr_cosh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_71mpfr_cosh[] = "mpfr_cosh(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the hyperbolic cosine of op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_71mpfr_cosh = {__Pyx_NAMESTR("mpfr_cosh"), (PyCFunction)__pyx_pf_4mpfr_71mpfr_cosh, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_71mpfr_cosh)};
static PyObject *__pyx_pf_4mpfr_71mpfr_cosh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_cosh");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_cosh", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_cosh", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_cosh") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_cosh", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_cosh");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1288
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1289
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_cosh(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1290
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_cosh(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1291
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_cosh(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_sinh(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_cosh((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_cosh");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1293
 *     return cmpfr.mpfr_cosh(&rop._value, &op._value, rnd)
 * 
 * def mpfr_sinh(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the hyperbolic sine of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_72mpfr_sinh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_72mpfr_sinh[] = "mpfr_sinh(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the hyperbolic sine of op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_72mpfr_sinh = {__Pyx_NAMESTR("mpfr_sinh"), (PyCFunction)__pyx_pf_4mpfr_72mpfr_sinh, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_72mpfr_sinh)};
static PyObject *__pyx_pf_4mpfr_72mpfr_sinh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_sinh");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_sinh", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_sinh", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_sinh") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_sinh", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_sinh");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1298
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1299
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_sinh(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1300
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_sinh(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1301
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_sinh(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_tanh(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_sinh((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_sinh");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1303
 *     return cmpfr.mpfr_sinh(&rop._value, &op._value, rnd)
 * 
 * def mpfr_tanh(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the hyperbolic tangent of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_73mpfr_tanh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_73mpfr_tanh[] = "mpfr_tanh(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the hyperbolic tangent of op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_73mpfr_tanh = {__Pyx_NAMESTR("mpfr_tanh"), (PyCFunction)__pyx_pf_4mpfr_73mpfr_tanh, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_73mpfr_tanh)};
static PyObject *__pyx_pf_4mpfr_73mpfr_tanh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_tanh");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_tanh", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_tanh", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_tanh") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_tanh", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_tanh");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1308
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1309
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_tanh(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1310
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_tanh(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1311
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_tanh(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_sinh_cosh(Mpfr_t sop not None, Mpfr_t cop not None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_tanh((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_tanh");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1313
 *     return cmpfr.mpfr_tanh(&rop._value, &op._value, rnd)
 * 
 * def mpfr_sinh_cosh(Mpfr_t sop not None, Mpfr_t cop not None,             # <<<<<<<<<<<<<<
 *                    Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 *     """
 */

static PyObject *__pyx_pf_4mpfr_74mpfr_sinh_cosh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_74mpfr_sinh_cosh[] = "mpfr_sinh_cosh(Mpfr_t sop, Mpfr_t cop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Compute sinh(op) and cosh(op), rounded in the direction rnd.\n\n    Set simultaneously sop to the hyperbolic sine of op and cop to the\n    hyperbolic cosine of op, rounded in the direction rnd with the\n    corresponding precisions of sop and cop, which must be different variables.\n\n    Returns a pair (sinh_ternary, cosh_ternary) of the corresponding ternary\n    values.  Note that this differs from the original mpfr_sinh_cosh function\n    from MPFR, which combines the ternary values into a single int return.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_74mpfr_sinh_cosh = {__Pyx_NAMESTR("mpfr_sinh_cosh"), (PyCFunction)__pyx_pf_4mpfr_74mpfr_sinh_cosh, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_74mpfr_sinh_cosh)};
static PyObject *__pyx_pf_4mpfr_74mpfr_sinh_cosh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_sop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_cop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  int __pyx_v_ternary_pair;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__sop,&__pyx_n_s__cop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_sinh_cosh");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__sop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__cop);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_sinh_cosh", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_sinh_cosh", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_sinh_cosh", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_sinh_cosh") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_sop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_cop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[2]);
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1314; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_sop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_cop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 2));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1314; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_sinh_cosh", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_sinh_cosh");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sop), __pyx_ptype_4mpfr_Mpfr_t, 0, "sop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cop), __pyx_ptype_4mpfr_Mpfr_t, 0, "cop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1329
 *     cdef int ternary_pair
 * 
 *     check_initialized(sop)             # <<<<<<<<<<<<<<
 *     check_initialized(cop)
 *     check_initialized(op)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_sop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1330
 * 
 *     check_initialized(sop)
 *     check_initialized(cop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_cop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1331
 *     check_initialized(sop)
 *     check_initialized(cop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     ternary_pair = cmpfr.mpfr_sinh_cosh(
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1332
 *     check_initialized(cop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     ternary_pair = cmpfr.mpfr_sinh_cosh(
 *         &sop._value, &cop._value, &op._value, rnd
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1335
 *     ternary_pair = cmpfr.mpfr_sinh_cosh(
 *         &sop._value, &cop._value, &op._value, rnd
 *     )             # <<<<<<<<<<<<<<
 *     return decode_ternary_pair(ternary_pair)
 * 
 */
  __pyx_v_ternary_pair = mpfr_sinh_cosh((&__pyx_v_sop->_value), (&__pyx_v_cop->_value), (&__pyx_v_op->_value), __pyx_v_rnd);

  /* "mpfr.pyx":1336
 *         &sop._value, &cop._value, &op._value, rnd
 *     )
 *     return decode_ternary_pair(ternary_pair)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_sech(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4mpfr_decode_ternary_pair(__pyx_v_ternary_pair); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_sinh_cosh");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1338
 *     return decode_ternary_pair(ternary_pair)
 * 
 * def mpfr_sech(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the hyperbolic secant of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_75mpfr_sech(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_75mpfr_sech[] = "mpfr_sech(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the hyperbolic secant of op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_75mpfr_sech = {__Pyx_NAMESTR("mpfr_sech"), (PyCFunction)__pyx_pf_4mpfr_75mpfr_sech, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_75mpfr_sech)};
static PyObject *__pyx_pf_4mpfr_75mpfr_sech(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_sech");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_sech", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1338; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_sech", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1338; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_sech") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1338; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1338; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1338; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_sech", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1338; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_sech");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1343
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1344
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_sech(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1345
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_sech(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1346
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_sech(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_csch(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_sech((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_sech");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1348
 *     return cmpfr.mpfr_sech(&rop._value, &op._value, rnd)
 * 
 * def mpfr_csch(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the hyperbolic cosecant of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_76mpfr_csch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_76mpfr_csch[] = "mpfr_csch(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the hyperbolic cosecant of op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_76mpfr_csch = {__Pyx_NAMESTR("mpfr_csch"), (PyCFunction)__pyx_pf_4mpfr_76mpfr_csch, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_76mpfr_csch)};
static PyObject *__pyx_pf_4mpfr_76mpfr_csch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_csch");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_csch", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_csch", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_csch") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_csch", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_csch");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1353
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1354
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_csch(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1355
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_csch(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1356
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_csch(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_coth(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_csch((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_csch");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1358
 *     return cmpfr.mpfr_csch(&rop._value, &op._value, rnd)
 * 
 * def mpfr_coth(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the hyperbolic cotangent of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_77mpfr_coth(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_77mpfr_coth[] = "mpfr_coth(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the hyperbolic cotangent of op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_77mpfr_coth = {__Pyx_NAMESTR("mpfr_coth"), (PyCFunction)__pyx_pf_4mpfr_77mpfr_coth, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_77mpfr_coth)};
static PyObject *__pyx_pf_4mpfr_77mpfr_coth(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_coth");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_coth", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1358; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_coth", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1358; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_coth") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1358; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1358; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1358; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_coth", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1358; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_coth");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1363
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1364
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_coth(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1365
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_coth(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1366
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_coth(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_acosh(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_coth((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_coth");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1368
 *     return cmpfr.mpfr_coth(&rop._value, &op._value, rnd)
 * 
 * def mpfr_acosh(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the inverse hyperbolic cosine of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_78mpfr_acosh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_78mpfr_acosh[] = "mpfr_acosh(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the inverse hyperbolic cosine of op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_78mpfr_acosh = {__Pyx_NAMESTR("mpfr_acosh"), (PyCFunction)__pyx_pf_4mpfr_78mpfr_acosh, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_78mpfr_acosh)};
static PyObject *__pyx_pf_4mpfr_78mpfr_acosh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_acosh");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_acosh", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_acosh", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_acosh") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_acosh", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_acosh");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1373
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1374
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_acosh(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1375
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_acosh(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1376
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_acosh(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_asinh(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_acosh((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_acosh");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1378
 *     return cmpfr.mpfr_acosh(&rop._value, &op._value, rnd)
 * 
 * def mpfr_asinh(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the inverse hyperbolic sine of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_79mpfr_asinh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_79mpfr_asinh[] = "mpfr_asinh(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the inverse hyperbolic sine of op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_79mpfr_asinh = {__Pyx_NAMESTR("mpfr_asinh"), (PyCFunction)__pyx_pf_4mpfr_79mpfr_asinh, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_79mpfr_asinh)};
static PyObject *__pyx_pf_4mpfr_79mpfr_asinh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_asinh");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_asinh", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1378; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_asinh", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1378; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_asinh") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1378; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1378; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1378; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_asinh", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1378; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_asinh");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1383
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1384
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_asinh(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1385
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_asinh(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1386
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_asinh(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_atanh(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_asinh((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_asinh");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1388
 *     return cmpfr.mpfr_asinh(&rop._value, &op._value, rnd)
 * 
 * def mpfr_atanh(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the inverse hyperbolic tangent of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_80mpfr_atanh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_80mpfr_atanh[] = "mpfr_atanh(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the inverse hyperbolic tangent of op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_80mpfr_atanh = {__Pyx_NAMESTR("mpfr_atanh"), (PyCFunction)__pyx_pf_4mpfr_80mpfr_atanh, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_80mpfr_atanh)};
static PyObject *__pyx_pf_4mpfr_80mpfr_atanh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_atanh");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_atanh", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1388; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_atanh", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1388; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_atanh") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1388; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1388; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1388; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_atanh", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1388; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_atanh");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1393
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1394
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_atanh(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1395
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_atanh(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1396
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_atanh(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_fac_ui(Mpfr_t rop not None, unsigned long int op, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_atanh((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_atanh");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1398
 *     return cmpfr.mpfr_atanh(&rop._value, &op._value, rnd)
 * 
 * def mpfr_fac_ui(Mpfr_t rop not None, unsigned long int op, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the factorial of op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_81mpfr_fac_ui(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_81mpfr_fac_ui[] = "mpfr_fac_ui(Mpfr_t rop, unsigned long op, mpfr_rnd_t rnd)\n\n    Set rop to the factorial of op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_81mpfr_fac_ui = {__Pyx_NAMESTR("mpfr_fac_ui"), (PyCFunction)__pyx_pf_4mpfr_81mpfr_fac_ui, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_81mpfr_fac_ui)};
static PyObject *__pyx_pf_4mpfr_81mpfr_fac_ui(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  unsigned long __pyx_v_op;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_fac_ui");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_fac_ui", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_fac_ui", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_fac_ui") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = __Pyx_PyInt_AsUnsignedLong(values[1]); if (unlikely((__pyx_v_op == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = __Pyx_PyInt_AsUnsignedLong(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_op == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_fac_ui", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_fac_ui");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1403
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_fac_ui(&rop._value, op, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1404
 *     """
 *     check_initialized(rop)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_fac_ui(&rop._value, op, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1405
 *     check_initialized(rop)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_fac_ui(&rop._value, op, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_log1p(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_fac_ui((&__pyx_v_rop->_value), __pyx_v_op, __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_fac_ui");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1407
 *     return cmpfr.mpfr_fac_ui(&rop._value, op, rnd)
 * 
 * def mpfr_log1p(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the logarithm of one plus op, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_82mpfr_log1p(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_82mpfr_log1p[] = "mpfr_log1p(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the logarithm of one plus op, rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_82mpfr_log1p = {__Pyx_NAMESTR("mpfr_log1p"), (PyCFunction)__pyx_pf_4mpfr_82mpfr_log1p, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_82mpfr_log1p)};
static PyObject *__pyx_pf_4mpfr_82mpfr_log1p(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_log1p");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_log1p", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1407; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_log1p", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1407; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_log1p") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1407; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1407; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1407; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_log1p", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1407; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_log1p");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1412
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1413
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_log1p(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1414
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_log1p(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1415
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_log1p(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_expm1(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_log1p((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_log1p");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1417
 *     return cmpfr.mpfr_log1p(&rop._value, &op._value, rnd)
 * 
 * def mpfr_expm1(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the exponential of op followed by a subtraction by one, rounded
 */

static PyObject *__pyx_pf_4mpfr_83mpfr_expm1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_83mpfr_expm1[] = "mpfr_expm1(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the exponential of op followed by a subtraction by one, rounded\n    in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_83mpfr_expm1 = {__Pyx_NAMESTR("mpfr_expm1"), (PyCFunction)__pyx_pf_4mpfr_83mpfr_expm1, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_83mpfr_expm1)};
static PyObject *__pyx_pf_4mpfr_83mpfr_expm1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_expm1");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_expm1", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1417; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_expm1", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1417; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_expm1") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1417; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1417; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1417; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_expm1", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1417; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_expm1");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1423
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1424
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_expm1(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1425
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_expm1(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1426
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_expm1(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_eint(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_expm1((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_expm1");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1428
 *     return cmpfr.mpfr_expm1(&rop._value, &op._value, rnd)
 * 
 * def mpfr_eint(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the exponential integral of op, rounded in the direction
 */

static PyObject *__pyx_pf_4mpfr_84mpfr_eint(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_84mpfr_eint[] = "mpfr_eint(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the exponential integral of op, rounded in the direction\n    rnd.\n\n    For positive op, the exponential integral is the sum of Euler's constant,\n    of the logarithm of op, and of the sum for k from 1 to infinity of op to\n    the power k, divided by k and factorial(k). For negative op, rop is set to\n    NaN.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_84mpfr_eint = {__Pyx_NAMESTR("mpfr_eint"), (PyCFunction)__pyx_pf_4mpfr_84mpfr_eint, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_84mpfr_eint)};
static PyObject *__pyx_pf_4mpfr_84mpfr_eint(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_eint");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_eint", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1428; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_eint", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1428; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_eint") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1428; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1428; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1428; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_eint", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1428; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_eint");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1439
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1440
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_eint(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1441
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_eint(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1442
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_eint(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_li2(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_eint((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_eint");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1444
 *     return cmpfr.mpfr_eint(&rop._value, &op._value, rnd)
 * 
 * def mpfr_li2(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to real part of the dilogarithm of op, rounded in the direction
 */

static PyObject *__pyx_pf_4mpfr_85mpfr_li2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_85mpfr_li2[] = "mpfr_li2(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to real part of the dilogarithm of op, rounded in the direction\n    rnd.\n\n    MPFR defines the dilogarithm function as the integral of -log(1-t)/t from 0\n    to op.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_85mpfr_li2 = {__Pyx_NAMESTR("mpfr_li2"), (PyCFunction)__pyx_pf_4mpfr_85mpfr_li2, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_85mpfr_li2)};
static PyObject *__pyx_pf_4mpfr_85mpfr_li2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_li2");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_li2", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_li2", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_li2") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_li2", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_li2");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1453
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1454
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_li2(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1455
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_li2(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1455; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1456
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_li2(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_gamma(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_li2((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_li2");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1458
 *     return cmpfr.mpfr_li2(&rop._value, &op._value, rnd)
 * 
 * def mpfr_gamma(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the Gamma function on op, rounded in the direction
 */

static PyObject *__pyx_pf_4mpfr_86mpfr_gamma(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_86mpfr_gamma[] = "mpfr_gamma(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the value of the Gamma function on op, rounded in the direction\n    rnd.\n\n    When op is a negative integer, rop is set to NaN.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_86mpfr_gamma = {__Pyx_NAMESTR("mpfr_gamma"), (PyCFunction)__pyx_pf_4mpfr_86mpfr_gamma, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_86mpfr_gamma)};
static PyObject *__pyx_pf_4mpfr_86mpfr_gamma(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_gamma");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_gamma", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_gamma", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_gamma") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_gamma", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_gamma");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1466
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1467
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_gamma(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1468
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_gamma(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1469
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_gamma(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_lngamma(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_gamma((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_gamma");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1471
 *     return cmpfr.mpfr_gamma(&rop._value, &op._value, rnd)
 * 
 * def mpfr_lngamma(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the logarithm of the Gamma function on op, rounded
 */

static PyObject *__pyx_pf_4mpfr_87mpfr_lngamma(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_87mpfr_lngamma[] = "mpfr_lngamma(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the value of the logarithm of the Gamma function on op, rounded\n    in the direction rnd.\n\n    When \342\210\2222k\342\210\2221 <= op <= \342\210\2222k, k being a non-negative integer, rop is set to\n    NaN. See also mpfr_lgamma.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_87mpfr_lngamma = {__Pyx_NAMESTR("mpfr_lngamma"), (PyCFunction)__pyx_pf_4mpfr_87mpfr_lngamma, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_87mpfr_lngamma)};
static PyObject *__pyx_pf_4mpfr_87mpfr_lngamma(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_lngamma");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_lngamma", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1471; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_lngamma", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1471; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_lngamma") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1471; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1471; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1471; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_lngamma", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1471; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_lngamma");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1480
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1481
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_lngamma(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1482
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_lngamma(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1483
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_lngamma(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_lgamma(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_lngamma((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_lngamma");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1485
 *     return cmpfr.mpfr_lngamma(&rop._value, &op._value, rnd)
 * 
 * def mpfr_lgamma(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the logarithm of the absolute value of the Gamma
 */

static PyObject *__pyx_pf_4mpfr_88mpfr_lgamma(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_88mpfr_lgamma[] = "mpfr_lgamma(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the value of the logarithm of the absolute value of the Gamma\n    function on op, rounded in the direction rnd.\n\n    Return a pair (ternary, sign) where ternary is the usual ternary value and\n    sign is the sign (1 or -1) of Gamma(rop).\n\n    When op is an infinity or a non-positive integer, set rop to +Inf. When op\n    is NaN, \342\210\222Inf or a negative integer, signp is undefined, and when op is \302\2610,\n    signp is the sign of the zero.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_88mpfr_lgamma = {__Pyx_NAMESTR("mpfr_lgamma"), (PyCFunction)__pyx_pf_4mpfr_88mpfr_lgamma, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_88mpfr_lgamma)};
static PyObject *__pyx_pf_4mpfr_88mpfr_lgamma(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  int __pyx_v_signp;
  int __pyx_v_ternary;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_lgamma");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_lgamma", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1485; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_lgamma", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1485; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_lgamma") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1485; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1485; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1485; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_lgamma", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1485; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_lgamma");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1500
 *     cdef int signp
 * 
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1501
 * 
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     ternary = cmpfr.mpfr_lgamma(
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1502
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     ternary = cmpfr.mpfr_lgamma(
 *         &rop._value, &signp, &op._value, rnd
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1505
 *     ternary = cmpfr.mpfr_lgamma(
 *         &rop._value, &signp, &op._value, rnd
 *     )             # <<<<<<<<<<<<<<
 *     return ternary, signp
 * 
 */
  __pyx_v_ternary = mpfr_lgamma((&__pyx_v_rop->_value), (&__pyx_v_signp), (&__pyx_v_op->_value), __pyx_v_rnd);

  /* "mpfr.pyx":1506
 *         &rop._value, &signp, &op._value, rnd
 *     )
 *     return ternary, signp             # <<<<<<<<<<<<<<
 * 
 * def mpfr_digamma(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_ternary); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong(__pyx_v_signp); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mpfr.mpfr_lgamma");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1508
 *     return ternary, signp
 * 
 * def mpfr_digamma(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the Digamma (sometimes also called Psi) function on
 */

static PyObject *__pyx_pf_4mpfr_89mpfr_digamma(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_89mpfr_digamma[] = "mpfr_digamma(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the value of the Digamma (sometimes also called Psi) function on\n    op, rounded in the direction rnd.\n\n    When op is a negative integer, set rop to NaN.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_89mpfr_digamma = {__Pyx_NAMESTR("mpfr_digamma"), (PyCFunction)__pyx_pf_4mpfr_89mpfr_digamma, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_89mpfr_digamma)};
static PyObject *__pyx_pf_4mpfr_89mpfr_digamma(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_digamma");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_digamma", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1508; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_digamma", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1508; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_digamma") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1508; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1508; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1508; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_digamma", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1508; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_digamma");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1516
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1516; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1517
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_digamma(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1517; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1518
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_digamma(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1519
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_digamma(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_zeta(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_digamma((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_digamma");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1521
 *     return cmpfr.mpfr_digamma(&rop._value, &op._value, rnd)
 * 
 * def mpfr_zeta(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the Riemann Zeta function on op, rounded in the
 */

static PyObject *__pyx_pf_4mpfr_90mpfr_zeta(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_90mpfr_zeta[] = "mpfr_zeta(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the value of the Riemann Zeta function on op, rounded in the\n    direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_90mpfr_zeta = {__Pyx_NAMESTR("mpfr_zeta"), (PyCFunction)__pyx_pf_4mpfr_90mpfr_zeta, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_90mpfr_zeta)};
static PyObject *__pyx_pf_4mpfr_90mpfr_zeta(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_zeta");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_zeta", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_zeta", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_zeta") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_zeta", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_zeta");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1527
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1528
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_zeta(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1528; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1529
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_zeta(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1530
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_zeta(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_zeta_ui(Mpfr_t rop not None, unsigned long int op, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_zeta((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1530; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_zeta");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1532
 *     return cmpfr.mpfr_zeta(&rop._value, &op._value, rnd)
 * 
 * def mpfr_zeta_ui(Mpfr_t rop not None, unsigned long int op, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the Riemann Zeta function on op, rounded in the
 */

static PyObject *__pyx_pf_4mpfr_91mpfr_zeta_ui(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_91mpfr_zeta_ui[] = "mpfr_zeta_ui(Mpfr_t rop, unsigned long op, mpfr_rnd_t rnd)\n\n    Set rop to the value of the Riemann Zeta function on op, rounded in the\n    direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_91mpfr_zeta_ui = {__Pyx_NAMESTR("mpfr_zeta_ui"), (PyCFunction)__pyx_pf_4mpfr_91mpfr_zeta_ui, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_91mpfr_zeta_ui)};
static PyObject *__pyx_pf_4mpfr_91mpfr_zeta_ui(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  unsigned long __pyx_v_op;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_zeta_ui");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_zeta_ui", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1532; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_zeta_ui", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1532; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_zeta_ui") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1532; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = __Pyx_PyInt_AsUnsignedLong(values[1]); if (unlikely((__pyx_v_op == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1532; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1532; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = __Pyx_PyInt_AsUnsignedLong(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_op == (unsigned long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1532; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1532; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_zeta_ui", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1532; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_zeta_ui");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1532; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1538
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_zeta_ui(&rop._value, op, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1539
 *     """
 *     check_initialized(rop)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_zeta_ui(&rop._value, op, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1540
 *     check_initialized(rop)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_zeta_ui(&rop._value, op, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_erf(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_zeta_ui((&__pyx_v_rop->_value), __pyx_v_op, __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_zeta_ui");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1542
 *     return cmpfr.mpfr_zeta_ui(&rop._value, op, rnd)
 * 
 * def mpfr_erf(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the error function on op, rounded in the direction
 */

static PyObject *__pyx_pf_4mpfr_92mpfr_erf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_92mpfr_erf[] = "mpfr_erf(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the value of the error function on op, rounded in the direction\n    rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_92mpfr_erf = {__Pyx_NAMESTR("mpfr_erf"), (PyCFunction)__pyx_pf_4mpfr_92mpfr_erf, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_92mpfr_erf)};
static PyObject *__pyx_pf_4mpfr_92mpfr_erf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_erf");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_erf", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_erf", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_erf") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_erf", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_erf");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1548
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1549
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_erf(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1550
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_erf(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1551
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_erf(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_erfc(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_erf((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_erf");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1553
 *     return cmpfr.mpfr_erf(&rop._value, &op._value, rnd)
 * 
 * def mpfr_erfc(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the the complementary error function on op, rounded
 */

static PyObject *__pyx_pf_4mpfr_93mpfr_erfc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_93mpfr_erfc[] = "mpfr_erfc(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the value of the the complementary error function on op, rounded\n    in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_93mpfr_erfc = {__Pyx_NAMESTR("mpfr_erfc"), (PyCFunction)__pyx_pf_4mpfr_93mpfr_erfc, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_93mpfr_erfc)};
static PyObject *__pyx_pf_4mpfr_93mpfr_erfc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_erfc");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_erfc", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1553; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_erfc", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1553; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_erfc") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1553; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1553; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1553; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_erfc", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1553; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_erfc");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1553; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1553; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1559
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1559; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1560
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_erfc(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1561
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_erfc(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1561; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1562
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_erfc(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_j0(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_erfc((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_erfc");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1564
 *     return cmpfr.mpfr_erfc(&rop._value, &op._value, rnd)
 * 
 * def mpfr_j0(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the first kind Bessel function of order 0 on op,
 */

static PyObject *__pyx_pf_4mpfr_94mpfr_j0(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_94mpfr_j0[] = "mpfr_j0(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the value of the first kind Bessel function of order 0 on op,\n    rounded in the direction rnd. When op is NaN, rop is always set to\n    NaN. When op is plus or minus infinity, rop is set to +0.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_94mpfr_j0 = {__Pyx_NAMESTR("mpfr_j0"), (PyCFunction)__pyx_pf_4mpfr_94mpfr_j0, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_94mpfr_j0)};
static PyObject *__pyx_pf_4mpfr_94mpfr_j0(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_j0");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_j0", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1564; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_j0", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1564; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_j0") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1564; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1564; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1564; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_j0", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1564; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_j0");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1571
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1572
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_j0(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1573
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_j0(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1574
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_j0(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_j1(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_j0((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_j0");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1576
 *     return cmpfr.mpfr_j0(&rop._value, &op._value, rnd)
 * 
 * def mpfr_j1(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the first kind Bessel function of order 1, on op,
 */

static PyObject *__pyx_pf_4mpfr_95mpfr_j1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_95mpfr_j1[] = "mpfr_j1(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the value of the first kind Bessel function of order 1, on op,\n    rounded in the direction rnd. When op is NaN, rop is always set to\n    NaN. When op is plus or minus infinity, rop is set to +0. When op is zero,\n    rop is set to +0 or \342\210\2220 depending on the sign of op.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_95mpfr_j1 = {__Pyx_NAMESTR("mpfr_j1"), (PyCFunction)__pyx_pf_4mpfr_95mpfr_j1, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_95mpfr_j1)};
static PyObject *__pyx_pf_4mpfr_95mpfr_j1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_j1");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_j1", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_j1", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_j1") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_j1", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_j1");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1584
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1584; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1585
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_j1(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1586
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_j1(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1586; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1587
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_j1(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_jn(Mpfr_t rop not None, long int n, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_j1((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_j1");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1589
 *     return cmpfr.mpfr_j1(&rop._value, &op._value, rnd)
 * 
 * def mpfr_jn(Mpfr_t rop not None, long int n, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the first kind Bessel function of order n on op,
 */

static PyObject *__pyx_pf_4mpfr_96mpfr_jn(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_96mpfr_jn[] = "mpfr_jn(Mpfr_t rop, long n, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the value of the first kind Bessel function of order n on op,\n    rounded in the direction rnd. When op is NaN, rop is always set to\n    NaN. When op is plus or minus Infinity, rop is set to +0. When op is zero,\n    and n is not zero, rop is set to +0 or \342\210\2220 depending on the parity and sign\n    of n, and the sign of op.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_96mpfr_jn = {__Pyx_NAMESTR("mpfr_jn"), (PyCFunction)__pyx_pf_4mpfr_96mpfr_jn, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_96mpfr_jn)};
static PyObject *__pyx_pf_4mpfr_96mpfr_jn(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  long __pyx_v_n;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__n,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_jn");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__n);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_jn", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_jn", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_jn", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_jn") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_n = __Pyx_PyInt_AsLong(values[1]); if (unlikely((__pyx_v_n == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[2]);
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_n = __Pyx_PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_n == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 2));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_jn", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_jn");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1598
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1598; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1599
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_jn(&rop._value, n, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1600
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_jn(&rop._value, n, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1601
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_jn(&rop._value, n, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_y0(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_jn((&__pyx_v_rop->_value), __pyx_v_n, (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_jn");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1603
 *     return cmpfr.mpfr_jn(&rop._value, n, &op._value, rnd)
 * 
 * def mpfr_y0(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the second kind Bessel function of order 0 on op,
 */

static PyObject *__pyx_pf_4mpfr_97mpfr_y0(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_97mpfr_y0[] = "mpfr_y0(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the value of the second kind Bessel function of order 0 on op,\n    rounded in the direction rnd.\n\n    When op is NaN or negative, rop is always set to NaN. When op is plus\n    infinity, rop is set to +0.  When op is zero, rop is set to +0 or -0\n    depending on the sign of op.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_97mpfr_y0 = {__Pyx_NAMESTR("mpfr_y0"), (PyCFunction)__pyx_pf_4mpfr_97mpfr_y0, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_97mpfr_y0)};
static PyObject *__pyx_pf_4mpfr_97mpfr_y0(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_y0");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_y0", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1603; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_y0", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1603; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_y0") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1603; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1603; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1603; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_y0", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1603; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_y0");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1613
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1614
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_y0(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1615
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_y0(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1616
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_y0(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_y1(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_y0((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1616; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_y0");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1618
 *     return cmpfr.mpfr_y0(&rop._value, &op._value, rnd)
 * 
 * def mpfr_y1(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the second kind Bessel function of order 1 on op,
 */

static PyObject *__pyx_pf_4mpfr_98mpfr_y1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_98mpfr_y1[] = "mpfr_y1(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the value of the second kind Bessel function of order 1 on op,\n    rounded in the direction rnd.\n\n    When op is NaN or negative, rop is always set to NaN. When op is plus\n    infinity, rop is set to +0.  When op is zero, rop is set to +0 or -0\n    depending on the sign of op.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_98mpfr_y1 = {__Pyx_NAMESTR("mpfr_y1"), (PyCFunction)__pyx_pf_4mpfr_98mpfr_y1, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_98mpfr_y1)};
static PyObject *__pyx_pf_4mpfr_98mpfr_y1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_y1");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_y1", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1618; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_y1", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1618; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_y1") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1618; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1618; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1618; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_y1", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1618; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_y1");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1628
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1628; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1629
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_y1(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1629; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1630
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_y1(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1631
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_y1(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_yn(Mpfr_t rop not None, long int n, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_y1((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_y1");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1633
 *     return cmpfr.mpfr_y1(&rop._value, &op._value, rnd)
 * 
 * def mpfr_yn(Mpfr_t rop not None, long int n, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the second kind Bessel function of order n on op,
 */

static PyObject *__pyx_pf_4mpfr_99mpfr_yn(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_99mpfr_yn[] = "mpfr_yn(Mpfr_t rop, long n, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the value of the second kind Bessel function of order n on op,\n    rounded in the direction rnd. When op is NaN or negative, rop is always set\n    to NaN. When op is +Inf, rop is set to +0. When op is zero, rop is set to\n    +Inf or \342\210\222Inf depending on the parity and sign of n.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_99mpfr_yn = {__Pyx_NAMESTR("mpfr_yn"), (PyCFunction)__pyx_pf_4mpfr_99mpfr_yn, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_99mpfr_yn)};
static PyObject *__pyx_pf_4mpfr_99mpfr_yn(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  long __pyx_v_n;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__n,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_yn");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__n);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_yn", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_yn", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_yn", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_yn") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_n = __Pyx_PyInt_AsLong(values[1]); if (unlikely((__pyx_v_n == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[2]);
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_n = __Pyx_PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_n == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 2));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_yn", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_yn");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1641
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1642
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_yn(&rop._value, n, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1643
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_yn(&rop._value, n, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1644
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_yn(&rop._value, n, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_fma(Mpfr_t rop not None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_yn((&__pyx_v_rop->_value), __pyx_v_n, (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_yn");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1646
 *     return cmpfr.mpfr_yn(&rop._value, n, &op._value, rnd)
 * 
 * def mpfr_fma(Mpfr_t rop not None,             # <<<<<<<<<<<<<<
 *              Mpfr_t op1 not None,
 *              Mpfr_t op2 not None,
 */

static PyObject *__pyx_pf_4mpfr_100mpfr_fma(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_100mpfr_fma[] = "mpfr_fma(Mpfr_t rop, Mpfr_t op1, Mpfr_t op2, Mpfr_t op3, mpfr_rnd_t rnd)\n\n    Set rop to (op1 times op2) + op3 rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_100mpfr_fma = {__Pyx_NAMESTR("mpfr_fma"), (PyCFunction)__pyx_pf_4mpfr_100mpfr_fma, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_100mpfr_fma)};
static PyObject *__pyx_pf_4mpfr_100mpfr_fma(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op1 = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op2 = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op3 = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op1,&__pyx_n_s__op2,&__pyx_n_s__op3,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_fma");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[5] = {0,0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op1);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_fma", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1646; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op2);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_fma", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1646; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op3);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_fma", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1646; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  4:
      values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[4])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_fma", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1646; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_fma") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1646; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[2]);
    __pyx_v_op3 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[3]);
    __pyx_v_rnd = PyInt_AsLong(values[4]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 2));
    __pyx_v_op3 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 3));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 4)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1650; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_fma", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1646; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_fma");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op1), __pyx_ptype_4mpfr_Mpfr_t, 0, "op1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op2), __pyx_ptype_4mpfr_Mpfr_t, 0, "op2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op3), __pyx_ptype_4mpfr_Mpfr_t, 0, "op3", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1655
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op1)
 *     check_initialized(op2)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1656
 *     """
 *     check_initialized(rop)
 *     check_initialized(op1)             # <<<<<<<<<<<<<<
 *     check_initialized(op2)
 *     check_initialized(op3)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1657
 *     check_initialized(rop)
 *     check_initialized(op1)
 *     check_initialized(op2)             # <<<<<<<<<<<<<<
 *     check_initialized(op3)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op2);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1658
 *     check_initialized(op1)
 *     check_initialized(op2)
 *     check_initialized(op3)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_fma(
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op3);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1659
 *     check_initialized(op2)
 *     check_initialized(op3)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_fma(
 *         &rop._value, &op1._value, &op2._value, &op3._value, rnd
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1660
 *     check_initialized(op3)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_fma(             # <<<<<<<<<<<<<<
 *         &rop._value, &op1._value, &op2._value, &op3._value, rnd
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "mpfr.pyx":1662
 *     return cmpfr.mpfr_fma(
 *         &rop._value, &op1._value, &op2._value, &op3._value, rnd
 *     )             # <<<<<<<<<<<<<<
 * 
 * def mpfr_fms(Mpfr_t rop not None,
 */
  __pyx_t_1 = PyInt_FromLong(mpfr_fma((&__pyx_v_rop->_value), (&__pyx_v_op1->_value), (&__pyx_v_op2->_value), (&__pyx_v_op3->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_fma");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1664
 *     )
 * 
 * def mpfr_fms(Mpfr_t rop not None,             # <<<<<<<<<<<<<<
 *              Mpfr_t op1 not None,
 *              Mpfr_t op2 not None,
 */

static PyObject *__pyx_pf_4mpfr_101mpfr_fms(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_101mpfr_fms[] = "mpfr_fms(Mpfr_t rop, Mpfr_t op1, Mpfr_t op2, Mpfr_t op3, mpfr_rnd_t rnd)\n\n    Set rop to (op1 times op2) - op3 rounded in the direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_101mpfr_fms = {__Pyx_NAMESTR("mpfr_fms"), (PyCFunction)__pyx_pf_4mpfr_101mpfr_fms, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_101mpfr_fms)};
static PyObject *__pyx_pf_4mpfr_101mpfr_fms(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op1 = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op2 = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op3 = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op1,&__pyx_n_s__op2,&__pyx_n_s__op3,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_fms");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[5] = {0,0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op1);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_fms", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1664; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op2);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_fms", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1664; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op3);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_fms", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1664; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  4:
      values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[4])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_fms", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1664; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_fms") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1664; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[2]);
    __pyx_v_op3 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[3]);
    __pyx_v_rnd = PyInt_AsLong(values[4]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1668; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 2));
    __pyx_v_op3 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 3));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 4)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1668; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_fms", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1664; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_fms");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op1), __pyx_ptype_4mpfr_Mpfr_t, 0, "op1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1665; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op2), __pyx_ptype_4mpfr_Mpfr_t, 0, "op2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op3), __pyx_ptype_4mpfr_Mpfr_t, 0, "op3", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1673
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op1)
 *     check_initialized(op2)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1674
 *     """
 *     check_initialized(rop)
 *     check_initialized(op1)             # <<<<<<<<<<<<<<
 *     check_initialized(op2)
 *     check_initialized(op3)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1675
 *     check_initialized(rop)
 *     check_initialized(op1)
 *     check_initialized(op2)             # <<<<<<<<<<<<<<
 *     check_initialized(op3)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op2);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1675; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1676
 *     check_initialized(op1)
 *     check_initialized(op2)
 *     check_initialized(op3)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_fms(
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op3);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1677
 *     check_initialized(op2)
 *     check_initialized(op3)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_fms(
 *         &rop._value, &op1._value, &op2._value, &op3._value, rnd
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1677; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1678
 *     check_initialized(op3)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_fms(             # <<<<<<<<<<<<<<
 *         &rop._value, &op1._value, &op2._value, &op3._value, rnd
 *     )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "mpfr.pyx":1680
 *     return cmpfr.mpfr_fms(
 *         &rop._value, &op1._value, &op2._value, &op3._value, rnd
 *     )             # <<<<<<<<<<<<<<
 * 
 * def mpfr_agm(Mpfr_t rop not None,
 */
  __pyx_t_1 = PyInt_FromLong(mpfr_fms((&__pyx_v_rop->_value), (&__pyx_v_op1->_value), (&__pyx_v_op2->_value), (&__pyx_v_op3->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1678; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_fms");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1682
 *     )
 * 
 * def mpfr_agm(Mpfr_t rop not None,             # <<<<<<<<<<<<<<
 *              Mpfr_t op1 not None,
 *              Mpfr_t op2 not None,
 */

static PyObject *__pyx_pf_4mpfr_102mpfr_agm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_102mpfr_agm[] = "mpfr_agm(Mpfr_t rop, Mpfr_t op1, Mpfr_t op2, mpfr_rnd_t rnd)\n\n    Set rop to the arithmetic-geometric mean of op1 and op2, rounded in the\n    direction rnd. The arithmetic-geometric mean is the common limit of the\n    sequences u_n and v_n, where u_0=op1, v_0=op2, u_(n+1) is the arithmetic\n    mean of u_n and v_n, and v_(n+1) is the geometric mean of u_n and v_n. If\n    any operand is negative, set rop to NaN.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_102mpfr_agm = {__Pyx_NAMESTR("mpfr_agm"), (PyCFunction)__pyx_pf_4mpfr_102mpfr_agm, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_102mpfr_agm)};
static PyObject *__pyx_pf_4mpfr_102mpfr_agm(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op1 = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op2 = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op1,&__pyx_n_s__op2,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_agm");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op1);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_agm", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1682; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op2);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_agm", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1682; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_agm", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1682; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_agm") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1682; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[2]);
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1685; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 2));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1685; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_agm", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1682; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_agm");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op1), __pyx_ptype_4mpfr_Mpfr_t, 0, "op1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1683; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op2), __pyx_ptype_4mpfr_Mpfr_t, 0, "op2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1684; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1694
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op1)
 *     check_initialized(op2)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1694; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1695
 *     """
 *     check_initialized(rop)
 *     check_initialized(op1)             # <<<<<<<<<<<<<<
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1696
 *     check_initialized(rop)
 *     check_initialized(op1)
 *     check_initialized(op2)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_agm(&rop._value, &op1._value, &op2._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op2);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1697
 *     check_initialized(op1)
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_agm(&rop._value, &op1._value, &op2._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1698
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_agm(&rop._value, &op1._value, &op2._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_hypot(Mpfr_t rop not None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_agm((&__pyx_v_rop->_value), (&__pyx_v_op1->_value), (&__pyx_v_op2->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_agm");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1700
 *     return cmpfr.mpfr_agm(&rop._value, &op1._value, &op2._value, rnd)
 * 
 * def mpfr_hypot(Mpfr_t rop not None,             # <<<<<<<<<<<<<<
 *              Mpfr_t x not None,
 *              Mpfr_t y not None,
 */

static PyObject *__pyx_pf_4mpfr_103mpfr_hypot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_103mpfr_hypot[] = "mpfr_hypot(Mpfr_t rop, Mpfr_t x, Mpfr_t y, mpfr_rnd_t rnd)\n\n    Set rop to the Euclidean norm of x and y, i.e., the square root of the sum\n    of the squares of x and y, rounded in the direction rnd. Special values are\n    handled as described in Section F.9.4.3 of the ISO C99 and IEEE 754-2008\n    standards: If x or y is an infinity, then +Inf is returned in rop, even if\n    the other number is NaN.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_103mpfr_hypot = {__Pyx_NAMESTR("mpfr_hypot"), (PyCFunction)__pyx_pf_4mpfr_103mpfr_hypot, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_103mpfr_hypot)};
static PyObject *__pyx_pf_4mpfr_103mpfr_hypot(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_x = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_y = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__x,&__pyx_n_s__y,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_hypot");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_hypot", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1700; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_hypot", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1700; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_hypot", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1700; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_hypot") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1700; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_y = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[2]);
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1703; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_y = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 2));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1703; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_hypot", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1700; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_hypot");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_4mpfr_Mpfr_t, 0, "x", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_4mpfr_Mpfr_t, 0, "y", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1712
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(x)
 *     check_initialized(y)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1712; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1713
 *     """
 *     check_initialized(rop)
 *     check_initialized(x)             # <<<<<<<<<<<<<<
 *     check_initialized(y)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_x);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1714
 *     check_initialized(rop)
 *     check_initialized(x)
 *     check_initialized(y)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_hypot(&rop._value, &x._value, &y._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_y);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1715
 *     check_initialized(x)
 *     check_initialized(y)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_hypot(&rop._value, &x._value, &y._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1716
 *     check_initialized(y)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_hypot(&rop._value, &x._value, &y._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_ai(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_hypot((&__pyx_v_rop->_value), (&__pyx_v_x->_value), (&__pyx_v_y->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1716; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_hypot");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1718
 *     return cmpfr.mpfr_hypot(&rop._value, &x._value, &y._value, rnd)
 * 
 * def mpfr_ai(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the Airy function Ai on x, rounded in the direction
 */

static PyObject *__pyx_pf_4mpfr_104mpfr_ai(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_104mpfr_ai[] = "mpfr_ai(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the value of the Airy function Ai on x, rounded in the direction\n    rnd.\n\n    When x is NaN, rop is always set to NaN. When x is +Inf or \342\210\222Inf, rop\n    is +0. The current implementation is not intended to be used with large\n    arguments. It works with abs(x) typically smaller than 500. For larger\n    arguments, other methods should be used and will be implemented in a future\n    version.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_104mpfr_ai = {__Pyx_NAMESTR("mpfr_ai"), (PyCFunction)__pyx_pf_4mpfr_104mpfr_ai, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_104mpfr_ai)};
static PyObject *__pyx_pf_4mpfr_104mpfr_ai(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_ai");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_ai", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1718; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_ai", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1718; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_ai") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1718; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1718; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1718; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_ai", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1718; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_ai");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1730
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1730; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1731
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_ai(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1732
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_ai(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1732; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1733
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_ai(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_const_log2(Mpfr_t rop not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_ai((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_ai");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1735
 *     return cmpfr.mpfr_ai(&rop._value, &op._value, rnd)
 * 
 * def mpfr_const_log2(Mpfr_t rop not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to log(2), rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_105mpfr_const_log2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_105mpfr_const_log2[] = "mpfr_const_log2(Mpfr_t rop, mpfr_rnd_t rnd)\n\n    Set rop to log(2), rounded in the direction rnd.\n\n    Set rop to the natural logarithm of 2, rounded in the direction rnd.  This\n    function caches the computed values to avoid other calculations if a lower\n    or equal precision is requested.  To free this cache, use mpfr_free_cache.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_105mpfr_const_log2 = {__Pyx_NAMESTR("mpfr_const_log2"), (PyCFunction)__pyx_pf_4mpfr_105mpfr_const_log2, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_105mpfr_const_log2)};
static PyObject *__pyx_pf_4mpfr_105mpfr_const_log2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_const_log2");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_const_log2", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1735; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_const_log2") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1735; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_rnd = PyInt_AsLong(values[1]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1735; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1735; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_const_log2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1735; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_const_log2");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1744
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_const_log2(&rop._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1744; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1745
 *     """
 *     check_initialized(rop)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_const_log2(&rop._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1745; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1746
 *     check_initialized(rop)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_const_log2(&rop._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_const_pi(Mpfr_t rop not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_const_log2((&__pyx_v_rop->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1746; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_const_log2");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1748
 *     return cmpfr.mpfr_const_log2(&rop._value, rnd)
 * 
 * def mpfr_const_pi(Mpfr_t rop not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to Pi, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_106mpfr_const_pi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_106mpfr_const_pi[] = "mpfr_const_pi(Mpfr_t rop, mpfr_rnd_t rnd)\n\n    Set rop to Pi, rounded in the direction rnd.\n\n    Set rop to the value of Pi, rounded in the direction rnd.  This function\n    caches the computed value to avoid other calculations if a lower or equal\n    precision is requested.  To free this cache, use mpfr_free_cache.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_106mpfr_const_pi = {__Pyx_NAMESTR("mpfr_const_pi"), (PyCFunction)__pyx_pf_4mpfr_106mpfr_const_pi, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_106mpfr_const_pi)};
static PyObject *__pyx_pf_4mpfr_106mpfr_const_pi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_const_pi");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_const_pi", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_const_pi") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_rnd = PyInt_AsLong(values[1]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_const_pi", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_const_pi");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1757
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_const_pi(&rop._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1757; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1758
 *     """
 *     check_initialized(rop)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_const_pi(&rop._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1758; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1759
 *     check_initialized(rop)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_const_pi(&rop._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_const_euler(Mpfr_t rop not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_const_pi((&__pyx_v_rop->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1759; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_const_pi");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1761
 *     return cmpfr.mpfr_const_pi(&rop._value, rnd)
 * 
 * def mpfr_const_euler(Mpfr_t rop not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to Euler's constant, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_107mpfr_const_euler(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_107mpfr_const_euler[] = "mpfr_const_euler(Mpfr_t rop, mpfr_rnd_t rnd)\n\n    Set rop to Euler's constant, rounded in the direction rnd.\n\n    Set rop to the value of Euler's constant 0.577..., rounded in the direction\n    rnd.  This function caches the computed value to avoid other calculations\n    if a lower or equal precision is requested.  To free this cache, use\n    mpfr_free_cache.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_107mpfr_const_euler = {__Pyx_NAMESTR("mpfr_const_euler"), (PyCFunction)__pyx_pf_4mpfr_107mpfr_const_euler, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_107mpfr_const_euler)};
static PyObject *__pyx_pf_4mpfr_107mpfr_const_euler(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_const_euler");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_const_euler", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1761; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_const_euler") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1761; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_rnd = PyInt_AsLong(values[1]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1761; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1761; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_const_euler", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1761; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_const_euler");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1761; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1771
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_const_euler(&rop._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1772
 *     """
 *     check_initialized(rop)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_const_euler(&rop._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1773
 *     check_initialized(rop)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_const_euler(&rop._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_const_catalan(Mpfr_t rop not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_const_euler((&__pyx_v_rop->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1773; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_const_euler");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1775
 *     return cmpfr.mpfr_const_euler(&rop._value, rnd)
 * 
 * def mpfr_const_catalan(Mpfr_t rop not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to Catalan's constant, rounded in the direction rnd.
 */

static PyObject *__pyx_pf_4mpfr_108mpfr_const_catalan(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_108mpfr_const_catalan[] = "mpfr_const_catalan(Mpfr_t rop, mpfr_rnd_t rnd)\n\n    Set rop to Catalan's constant, rounded in the direction rnd.\n\n    Set rop to the value of Catalan's constant 0.915..., rounded in the\n    direction rnd.  This function caches the computed value to avoid other\n    calculations if a lower or equal precision is requested.  To free this\n    cache, use mpfr_free_cache.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_108mpfr_const_catalan = {__Pyx_NAMESTR("mpfr_const_catalan"), (PyCFunction)__pyx_pf_4mpfr_108mpfr_const_catalan, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_108mpfr_const_catalan)};
static PyObject *__pyx_pf_4mpfr_108mpfr_const_catalan(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_const_catalan");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_const_catalan", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1775; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_const_catalan") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1775; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_rnd = PyInt_AsLong(values[1]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1775; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1775; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_const_catalan", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1775; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_const_catalan");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1785
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_const_catalan(&rop._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1786
 *     """
 *     check_initialized(rop)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_const_catalan(&rop._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1787
 *     check_initialized(rop)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_const_catalan(&rop._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_free_cache():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_const_catalan((&__pyx_v_rop->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_const_catalan");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1789
 *     return cmpfr.mpfr_const_catalan(&rop._value, rnd)
 * 
 * def mpfr_free_cache():             # <<<<<<<<<<<<<<
 *     """
 *     Free internal MPFR caches.
 */

static PyObject *__pyx_pf_4mpfr_109mpfr_free_cache(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_109mpfr_free_cache[] = "mpfr_free_cache()\n\n    Free internal MPFR caches.\n\n    Free various caches used by MPFR internally, in particular the caches\n    used by the functions computing constants (mpfr_const_log2, mpfr_const_pi,\n    mpfr_const_euler and mpfr_const_catalan). You should call this function\n    before terminating a thread, even if you did not call these functions\n    directly (they could have been called internally).\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_109mpfr_free_cache = {__Pyx_NAMESTR("mpfr_free_cache"), (PyCFunction)__pyx_pf_4mpfr_109mpfr_free_cache, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_109mpfr_free_cache)};
static PyObject *__pyx_pf_4mpfr_109mpfr_free_cache(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("mpfr_free_cache");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":1800
 * 
 *     """
 *     cmpfr.mpfr_free_cache()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  mpfr_free_cache();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1807
 * ###############################################################################
 * 
 * def mpfr_rint(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to op rounded to an integer in the direction given by rnd.
 */

static PyObject *__pyx_pf_4mpfr_110mpfr_rint(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_110mpfr_rint[] = "mpfr_rint(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to op rounded to an integer in the direction given by rnd.\n\n    The returned value is zero when the result is exact, positive when it is\n    greater than the original value of op, and negative when it is\n    smaller. More precisely, the returned value is 0 when op is an integer\n    representable in rop, 1 or \342\210\2221 when op is an integer that is not\n    representable in rop, 2 or \342\210\2222 when op is not an integer.\n\n    Note that no double rounding is performed; for instance, 10.5 (1010.1 in\n    binary) is rounded by mpfr_rint with rounding to nearest to 12 (1100 in\n    binary) in 2-bit precision, because the two enclosing numbers representable\n    on two bits are 8 and 12, and the closest is 12. (If one first rounded to\n    an integer, one would round 10.5 to 10 with even rounding, and then 10\n    would be rounded to 8 again with even rounding.)\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_110mpfr_rint = {__Pyx_NAMESTR("mpfr_rint"), (PyCFunction)__pyx_pf_4mpfr_110mpfr_rint, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_110mpfr_rint)};
static PyObject *__pyx_pf_4mpfr_110mpfr_rint(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_rint");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_rint", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_rint", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_rint") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_rint", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_rint");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1825
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1825; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1826
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_rint(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1827
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_rint(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1828
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_rint(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_ceil(Mpfr_t rop not None, Mpfr_t op not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_rint((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_rint");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1830
 *     return cmpfr.mpfr_rint(&rop._value, &op._value, rnd)
 * 
 * def mpfr_ceil(Mpfr_t rop not None, Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to op rounded to the next higher or equal representable integer.
 */

static PyObject *__pyx_pf_4mpfr_111mpfr_ceil(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_111mpfr_ceil[] = "mpfr_ceil(Mpfr_t rop, Mpfr_t op)\n\n    Set rop to op rounded to the next higher or equal representable integer.\n\n    The returned value is zero when the result is exact, positive when it is\n    greater than the original value of op, and negative when it is\n    smaller. More precisely, the returned value is 0 when op is an integer\n    representable in rop, 1 or \342\210\2221 when op is an integer that is not\n    representable in rop, 2 or \342\210\2222 when op is not an integer.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_111mpfr_ceil = {__Pyx_NAMESTR("mpfr_ceil"), (PyCFunction)__pyx_pf_4mpfr_111mpfr_ceil, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_111mpfr_ceil)};
static PyObject *__pyx_pf_4mpfr_111mpfr_ceil(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,0};
  __Pyx_RefNannySetupContext("mpfr_ceil");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_ceil", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1830; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_ceil") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1830; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_ceil", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1830; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_ceil");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1841
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     return cmpfr.mpfr_ceil(&rop._value, &op._value)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1842
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_ceil(&rop._value, &op._value)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1843
 *     check_initialized(rop)
 *     check_initialized(op)
 *     return cmpfr.mpfr_ceil(&rop._value, &op._value)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_floor(Mpfr_t rop not None, Mpfr_t op not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_ceil((&__pyx_v_rop->_value), (&__pyx_v_op->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_ceil");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1845
 *     return cmpfr.mpfr_ceil(&rop._value, &op._value)
 * 
 * def mpfr_floor(Mpfr_t rop not None, Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to op rounded to the next lower or equal representable integer.
 */

static PyObject *__pyx_pf_4mpfr_112mpfr_floor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_112mpfr_floor[] = "mpfr_floor(Mpfr_t rop, Mpfr_t op)\n\n    Set rop to op rounded to the next lower or equal representable integer.\n\n    The returned value is zero when the result is exact, positive when it is\n    greater than the original value of op, and negative when it is\n    smaller. More precisely, the returned value is 0 when op is an integer\n    representable in rop, 1 or \342\210\2221 when op is an integer that is not\n    representable in rop, 2 or \342\210\2222 when op is not an integer.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_112mpfr_floor = {__Pyx_NAMESTR("mpfr_floor"), (PyCFunction)__pyx_pf_4mpfr_112mpfr_floor, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_112mpfr_floor)};
static PyObject *__pyx_pf_4mpfr_112mpfr_floor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,0};
  __Pyx_RefNannySetupContext("mpfr_floor");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_floor", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1845; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_floor") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1845; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_floor", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1845; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_floor");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1856
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     return cmpfr.mpfr_floor(&rop._value, &op._value)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1856; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1857
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_floor(&rop._value, &op._value)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1858
 *     check_initialized(rop)
 *     check_initialized(op)
 *     return cmpfr.mpfr_floor(&rop._value, &op._value)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_round(Mpfr_t rop not None, Mpfr_t op not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_floor((&__pyx_v_rop->_value), (&__pyx_v_op->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1858; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_floor");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1860
 *     return cmpfr.mpfr_floor(&rop._value, &op._value)
 * 
 * def mpfr_round(Mpfr_t rop not None, Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to op rounded to the nearest representable integer, rounding
 */

static PyObject *__pyx_pf_4mpfr_113mpfr_round(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_113mpfr_round[] = "mpfr_round(Mpfr_t rop, Mpfr_t op)\n\n    Set rop to op rounded to the nearest representable integer, rounding\n    halfway cases away from zero (as in the roundTiesToAway mode of IEEE\n    754-2008).\n\n    The returned value is zero when the result is exact, positive when it is\n    greater than the original value of op, and negative when it is\n    smaller. More precisely, the returned value is 0 when op is an integer\n    representable in rop, 1 or \342\210\2221 when op is an integer that is not\n    representable in rop, 2 or \342\210\2222 when op is not an integer.\n\n    Note that mpfr_round is different from mpfr_rint called with the rounding\n    to nearest mode (where halfway cases are rounded to an even integer or\n    significand). Note also that no double rounding is performed; for instance,\n    10.5 (1010.1 in binary) is rounded by mpfr_rint with rounding to nearest to\n    12 (1100 in binary) in 2-bit precision, because the two enclosing numbers\n    representable on two bits are 8 and 12, and the closest is 12. (If one\n    first rounded to an integer, one would round 10.5 to 10 with even rounding,\n    and then 10 would be rounded to 8 again with even rounding.)\n    ";
static PyMethodDef __pyx_mdef_4mpfr_113mpfr_round = {__Pyx_NAMESTR("mpfr_round"), (PyCFunction)__pyx_pf_4mpfr_113mpfr_round, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_113mpfr_round)};
static PyObject *__pyx_pf_4mpfr_113mpfr_round(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,0};
  __Pyx_RefNannySetupContext("mpfr_round");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_round", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1860; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_round") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1860; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_round", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1860; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_round");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1860; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1860; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1881
 *     and then 10 would be rounded to 8 again with even rounding.)
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     return cmpfr.mpfr_round(&rop._value, &op._value)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1881; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1882
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_round(&rop._value, &op._value)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1882; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1883
 *     check_initialized(rop)
 *     check_initialized(op)
 *     return cmpfr.mpfr_round(&rop._value, &op._value)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_trunc(Mpfr_t rop not None, Mpfr_t op not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_round((&__pyx_v_rop->_value), (&__pyx_v_op->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_round");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1885
 *     return cmpfr.mpfr_round(&rop._value, &op._value)
 * 
 * def mpfr_trunc(Mpfr_t rop not None, Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to op rounded to the next representable integer toward zero.
 */

static PyObject *__pyx_pf_4mpfr_114mpfr_trunc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_114mpfr_trunc[] = "mpfr_trunc(Mpfr_t rop, Mpfr_t op)\n\n    Set rop to op rounded to the next representable integer toward zero.\n\n    The returned value is zero when the result is exact, positive when it is\n    greater than the original value of op, and negative when it is\n    smaller. More precisely, the returned value is 0 when op is an integer\n    representable in rop, 1 or \342\210\2221 when op is an integer that is not\n    representable in rop, 2 or \342\210\2222 when op is not an integer.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_114mpfr_trunc = {__Pyx_NAMESTR("mpfr_trunc"), (PyCFunction)__pyx_pf_4mpfr_114mpfr_trunc, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_114mpfr_trunc)};
static PyObject *__pyx_pf_4mpfr_114mpfr_trunc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,0};
  __Pyx_RefNannySetupContext("mpfr_trunc");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_trunc", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1885; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_trunc") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1885; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_trunc", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1885; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_trunc");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1896
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     return cmpfr.mpfr_trunc(&rop._value, &op._value)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1897
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_trunc(&rop._value, &op._value)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1898
 *     check_initialized(rop)
 *     check_initialized(op)
 *     return cmpfr.mpfr_trunc(&rop._value, &op._value)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_rint_ceil(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_trunc((&__pyx_v_rop->_value), (&__pyx_v_op->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1898; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_trunc");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1900
 *     return cmpfr.mpfr_trunc(&rop._value, &op._value)
 * 
 * def mpfr_rint_ceil(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to op rounded to the next higher or equal integer.
 */

static PyObject *__pyx_pf_4mpfr_115mpfr_rint_ceil(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_115mpfr_rint_ceil[] = "mpfr_rint_ceil(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to op rounded to the next higher or equal integer.\n\n    If the result is not representable, it is rounded in the direction rnd. The\n    returned value is the ternary value associated with the considered\n    round-to-integer function (regarded in the same way as any other\n    mathematical function).\n\n    Unlike mpfr_ceil, this function does perform a double rounding: first op is\n    rounded to the next higher or equal integer, then this integer (if not\n    representable) is rounded in the given direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_115mpfr_rint_ceil = {__Pyx_NAMESTR("mpfr_rint_ceil"), (PyCFunction)__pyx_pf_4mpfr_115mpfr_rint_ceil, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_115mpfr_rint_ceil)};
static PyObject *__pyx_pf_4mpfr_115mpfr_rint_ceil(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_rint_ceil");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_rint_ceil", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1900; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_rint_ceil", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1900; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_rint_ceil") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1900; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1900; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1900; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_rint_ceil", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1900; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_rint_ceil");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1914
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1914; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1915
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_rint_ceil(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1915; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1916
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_rint_ceil(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1916; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1917
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_rint_ceil(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_rint_floor(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_rint_ceil((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1917; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_rint_ceil");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1919
 *     return cmpfr.mpfr_rint_ceil(&rop._value, &op._value, rnd)
 * 
 * def mpfr_rint_floor(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to op rounded to the next lower or equal integer.
 */

static PyObject *__pyx_pf_4mpfr_116mpfr_rint_floor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_116mpfr_rint_floor[] = "mpfr_rint_floor(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to op rounded to the next lower or equal integer.\n\n    If the result is not representable, it is rounded in the direction rnd. The\n    returned value is the ternary value associated with the considered\n    round-to-integer function (regarded in the same way as any other\n    mathematical function).\n\n    Unlike mpfr_floor, this function does perform a double rounding: first op\n    is rounded to the next lower or equal integer, then this integer (if not\n    representable) is rounded in the given direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_116mpfr_rint_floor = {__Pyx_NAMESTR("mpfr_rint_floor"), (PyCFunction)__pyx_pf_4mpfr_116mpfr_rint_floor, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_116mpfr_rint_floor)};
static PyObject *__pyx_pf_4mpfr_116mpfr_rint_floor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_rint_floor");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_rint_floor", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1919; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_rint_floor", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1919; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_rint_floor") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1919; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1919; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1919; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_rint_floor", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1919; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_rint_floor");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1933
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1933; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1934
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_rint_floor(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1934; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1935
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_rint_floor(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1936
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_rint_floor(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_rint_round(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_rint_floor((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_rint_floor");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1938
 *     return cmpfr.mpfr_rint_floor(&rop._value, &op._value, rnd)
 * 
 * def mpfr_rint_round(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to op rounded to the nearest integer, rounding halfway cases
 */

static PyObject *__pyx_pf_4mpfr_117mpfr_rint_round(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_117mpfr_rint_round[] = "mpfr_rint_round(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to op rounded to the nearest integer, rounding halfway cases\n    away from zero.\n\n    If the result is not representable, it is rounded in the direction rnd. The\n    returned value is the ternary value associated with the considered\n    round-to-integer function (regarded in the same way as any other\n    mathematical function).\n\n    Unlike mpfr_round, this function does perform a double rounding: first op\n    is rounded to the nearest integer, then this nearest integer (if not\n    representable) is rounded in the given direction rnd.\n\n    For example, mpfr_rint_round with rounding to nearest and a precision of\n    two bits rounds 6.5 to 7 (halfway cases away from zero), then 7 is rounded\n    to 8 by the round-even rule, despite the fact that 6 is also representable\n    on two bits, and is closer to 6.5 than 8.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_117mpfr_rint_round = {__Pyx_NAMESTR("mpfr_rint_round"), (PyCFunction)__pyx_pf_4mpfr_117mpfr_rint_round, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_117mpfr_rint_round)};
static PyObject *__pyx_pf_4mpfr_117mpfr_rint_round(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_rint_round");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_rint_round", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1938; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_rint_round", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1938; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_rint_round") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1938; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1938; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1938; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_rint_round", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1938; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_rint_round");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1938; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1938; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1958
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1958; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1959
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_rint_round(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1959; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1960
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_rint_round(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1960; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1961
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_rint_round(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_rint_trunc(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_rint_round((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1961; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_rint_round");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1963
 *     return cmpfr.mpfr_rint_round(&rop._value, &op._value, rnd)
 * 
 * def mpfr_rint_trunc(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to op rounded to the next integer toward zero.
 */

static PyObject *__pyx_pf_4mpfr_118mpfr_rint_trunc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_118mpfr_rint_trunc[] = "mpfr_rint_trunc(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to op rounded to the next integer toward zero.\n\n    If the result is not representable, it is rounded in the direction rnd. The\n    returned value is the ternary value associated with the considered\n    round-to-integer function (regarded in the same way as any other\n    mathematical function).\n\n    Unlike mpfr_trunc, this function does perform a double rounding: first op\n    is rounded to the next integer toward zero, then this integer (if not\n    representable) is rounded in the given direction rnd.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_118mpfr_rint_trunc = {__Pyx_NAMESTR("mpfr_rint_trunc"), (PyCFunction)__pyx_pf_4mpfr_118mpfr_rint_trunc, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_118mpfr_rint_trunc)};
static PyObject *__pyx_pf_4mpfr_118mpfr_rint_trunc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_rint_trunc");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_rint_trunc", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1963; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_rint_trunc", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1963; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_rint_trunc") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1963; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1963; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1963; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_rint_trunc", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1963; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_rint_trunc");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1963; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1963; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1977
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1978
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_rint_trunc(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1979
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_rint_trunc(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1979; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1980
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_rint_trunc(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_frac(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_rint_trunc((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1980; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_rint_trunc");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1982
 *     return cmpfr.mpfr_rint_trunc(&rop._value, &op._value, rnd)
 * 
 * def mpfr_frac(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the fractional part of op, having the same sign as op, rounded
 */

static PyObject *__pyx_pf_4mpfr_119mpfr_frac(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_119mpfr_frac[] = "mpfr_frac(Mpfr_t rop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set rop to the fractional part of op, having the same sign as op, rounded\n    in the direction rnd (unlike in mpfr_rint, rnd affects only how the exact\n    fractional part is rounded, not how the fractional part is generated).\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_119mpfr_frac = {__Pyx_NAMESTR("mpfr_frac"), (PyCFunction)__pyx_pf_4mpfr_119mpfr_frac, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_119mpfr_frac)};
static PyObject *__pyx_pf_4mpfr_119mpfr_frac(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_frac");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_frac", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1982; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_frac", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1982; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_frac") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1982; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1982; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1982; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_frac", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1982; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_frac");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1989
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1990
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_frac(&rop._value, &op._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1990; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1991
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_frac(&rop._value, &op._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":1992
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_frac(&rop._value, &op._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_modf(Mpfr_t iop not None, Mpfr_t fop not None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_frac((&__pyx_v_rop->_value), (&__pyx_v_op->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1992; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_frac");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":1994
 *     return cmpfr.mpfr_frac(&rop._value, &op._value, rnd)
 * 
 * def mpfr_modf(Mpfr_t iop not None, Mpfr_t fop not None,             # <<<<<<<<<<<<<<
 *               Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 *     """
 */

static PyObject *__pyx_pf_4mpfr_120mpfr_modf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_120mpfr_modf[] = "mpfr_modf(Mpfr_t iop, Mpfr_t fop, Mpfr_t op, mpfr_rnd_t rnd)\n\n    Set simultaneously iop to the integral part of op and fop to the fractional\n    part of op, rounded in the direction rnd with the corresponding precision\n    of iop and fop.\n\n    Equivalent to mpfr_trunc(iop, op, rnd) and mpfr_frac(fop, op, rnd). The\n    variables iop and fop must be different.\n\n    Return a pair (int_ternary, frac_ternary) of the corresponding ternary\n    values.  Note that this differs from the original mpfr_modf function from\n    MPFR, which combines the ternary values into a single int return.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_120mpfr_modf = {__Pyx_NAMESTR("mpfr_modf"), (PyCFunction)__pyx_pf_4mpfr_120mpfr_modf, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_120mpfr_modf)};
static PyObject *__pyx_pf_4mpfr_120mpfr_modf(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_iop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_fop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_rnd_t __pyx_v_rnd;
  int __pyx_v_ternary_pair;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__iop,&__pyx_n_s__fop,&__pyx_n_s__op,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_modf");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__iop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__fop);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_modf", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1994; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_modf", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1994; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_modf", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1994; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_modf") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1994; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_iop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_fop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[2]);
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1995; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_iop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_fop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 2));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1995; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_modf", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1994; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_modf");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_iop), __pyx_ptype_4mpfr_Mpfr_t, 0, "iop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fop), __pyx_ptype_4mpfr_Mpfr_t, 0, "fop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1995; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2011
 *     cdef int ternary_pair
 * 
 *     check_initialized(iop)             # <<<<<<<<<<<<<<
 *     check_initialized(fop)
 *     check_initialized(op)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_iop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2012
 * 
 *     check_initialized(iop)
 *     check_initialized(fop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_fop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2012; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2013
 *     check_initialized(iop)
 *     check_initialized(fop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     ternary_pair = cmpfr.mpfr_modf(
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2013; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2014
 *     check_initialized(fop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     ternary_pair = cmpfr.mpfr_modf(
 *         &iop._value, &fop._value, &op._value, rnd
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2014; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2017
 *     ternary_pair = cmpfr.mpfr_modf(
 *         &iop._value, &fop._value, &op._value, rnd
 *     )             # <<<<<<<<<<<<<<
 *     return decode_ternary_pair(ternary_pair)
 * 
 */
  __pyx_v_ternary_pair = mpfr_modf((&__pyx_v_iop->_value), (&__pyx_v_fop->_value), (&__pyx_v_op->_value), __pyx_v_rnd);

  /* "mpfr.pyx":2018
 *         &iop._value, &fop._value, &op._value, rnd
 *     )
 *     return decode_ternary_pair(ternary_pair)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_fmod(Mpfr_t r not None, Mpfr_t x not None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_4mpfr_decode_ternary_pair(__pyx_v_ternary_pair); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2018; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_modf");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2020
 *     return decode_ternary_pair(ternary_pair)
 * 
 * def mpfr_fmod(Mpfr_t r not None, Mpfr_t x not None,             # <<<<<<<<<<<<<<
 *               Mpfr_t y not None, cmpfr.mpfr_rnd_t rnd):
 *     """
 */

static PyObject *__pyx_pf_4mpfr_121mpfr_fmod(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_121mpfr_fmod[] = "mpfr_fmod(Mpfr_t r, Mpfr_t x, Mpfr_t y, mpfr_rnd_t rnd)\n\n    Set r to x reduced modulo y, rounded in direction rnd.\n\n    Set r to the value of x - n * y, rounded according to the direction\n    rnd, where n is the integer quotient of x divided by y, rounded toward\n    zero.\n\n    Special values are handled as described in Section F.9.7.1 of the ISO C99\n    standard: If x is infinite or y is zero, r is NaN. If y is infinite\n    and x is finite, r is x rounded to the precision of r. If r is\n    zero, it has the sign of x. The return value is the ternary value\n    corresponding to r.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_121mpfr_fmod = {__Pyx_NAMESTR("mpfr_fmod"), (PyCFunction)__pyx_pf_4mpfr_121mpfr_fmod, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_121mpfr_fmod)};
static PyObject *__pyx_pf_4mpfr_121mpfr_fmod(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_r = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_x = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_y = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__r,&__pyx_n_s__x,&__pyx_n_s__y,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_fmod");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__r);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_fmod", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2020; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_fmod", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2020; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_fmod", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2020; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_fmod") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2020; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_r = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_y = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[2]);
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2021; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_r = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_y = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 2));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2021; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_fmod", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2020; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_fmod");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_r), __pyx_ptype_4mpfr_Mpfr_t, 0, "r", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_4mpfr_Mpfr_t, 0, "x", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_4mpfr_Mpfr_t, 0, "y", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2036
 * 
 *     """
 *     check_initialized(r)             # <<<<<<<<<<<<<<
 *     check_initialized(x)
 *     check_initialized(y)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_r);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2036; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2037
 *     """
 *     check_initialized(r)
 *     check_initialized(x)             # <<<<<<<<<<<<<<
 *     check_initialized(y)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_x);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2037; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2038
 *     check_initialized(r)
 *     check_initialized(x)
 *     check_initialized(y)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_fmod(&r._value, &x._value, &y._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_y);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2038; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2039
 *     check_initialized(x)
 *     check_initialized(y)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_fmod(&r._value, &x._value, &y._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2039; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2040
 *     check_initialized(y)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_fmod(&r._value, &x._value, &y._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_remainder(Mpfr_t r not None, Mpfr_t x not None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_fmod((&__pyx_v_r->_value), (&__pyx_v_x->_value), (&__pyx_v_y->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_fmod");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2042
 *     return cmpfr.mpfr_fmod(&r._value, &x._value, &y._value, rnd)
 * 
 * def mpfr_remainder(Mpfr_t r not None, Mpfr_t x not None,             # <<<<<<<<<<<<<<
 *                    Mpfr_t y not None, cmpfr.mpfr_rnd_t rnd):
 *     """
 */

static PyObject *__pyx_pf_4mpfr_122mpfr_remainder(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_122mpfr_remainder[] = "mpfr_remainder(Mpfr_t r, Mpfr_t x, Mpfr_t y, mpfr_rnd_t rnd)\n\n    Set r to x reduced modulo y, rounded in direction rnd.\n\n    Set r to the value of x - n * y, rounded according to the direction rnd,\n    where n is the integer quotient of x divided by y, rounded to the nearest\n    integer (ties rounded to even).\n\n    Special values are handled as described in Section F.9.7.1 of the ISO C99\n    standard: If x is infinite or y is zero, r is NaN. If y is infinite\n    and x is finite, r is x rounded to the precision of r. If r is\n    zero, it has the sign of x. The return value is the ternary value\n    corresponding to r.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_122mpfr_remainder = {__Pyx_NAMESTR("mpfr_remainder"), (PyCFunction)__pyx_pf_4mpfr_122mpfr_remainder, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_122mpfr_remainder)};
static PyObject *__pyx_pf_4mpfr_122mpfr_remainder(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_r = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_x = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_y = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__r,&__pyx_n_s__x,&__pyx_n_s__y,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_remainder");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__r);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_remainder", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2042; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_remainder", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2042; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_remainder", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2042; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_remainder") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2042; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_r = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_y = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[2]);
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2043; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_r = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_y = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 2));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2043; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_remainder", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2042; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_remainder");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_r), __pyx_ptype_4mpfr_Mpfr_t, 0, "r", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2042; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_4mpfr_Mpfr_t, 0, "x", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2042; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_4mpfr_Mpfr_t, 0, "y", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2043; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2058
 * 
 *     """
 *     check_initialized(r)             # <<<<<<<<<<<<<<
 *     check_initialized(x)
 *     check_initialized(y)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_r);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2058; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2059
 *     """
 *     check_initialized(r)
 *     check_initialized(x)             # <<<<<<<<<<<<<<
 *     check_initialized(y)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_x);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2060
 *     check_initialized(r)
 *     check_initialized(x)
 *     check_initialized(y)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_remainder(&r._value, &x._value, &y._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_y);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2060; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2061
 *     check_initialized(x)
 *     check_initialized(y)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_remainder(&r._value, &x._value, &y._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2061; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2062
 *     check_initialized(y)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_remainder(&r._value, &x._value, &y._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_remquo(Mpfr_t r not None, Mpfr_t x not None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_remainder((&__pyx_v_r->_value), (&__pyx_v_x->_value), (&__pyx_v_y->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2062; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_remainder");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2064
 *     return cmpfr.mpfr_remainder(&r._value, &x._value, &y._value, rnd)
 * 
 * def mpfr_remquo(Mpfr_t r not None, Mpfr_t x not None,             # <<<<<<<<<<<<<<
 *                 Mpfr_t y not None, cmpfr.mpfr_rnd_t rnd):
 *     """
 */

static PyObject *__pyx_pf_4mpfr_123mpfr_remquo(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_123mpfr_remquo[] = "mpfr_remquo(Mpfr_t r, Mpfr_t x, Mpfr_t y, mpfr_rnd_t rnd)\n\n    Set r to x reduced modulo y, rounded in the direction rnd.  Also return\n    low bits of quotient.\n\n    Set r to the value of x - n * y, rounded according to the direction rnd,\n    where n is the integer quotient of x divided by y, rounded to the nearest\n    integer (ties rounded to even).\n\n    Special values are handled as described in Section F.9.7.1 of the ISO C99\n    standard: If x is infinite or y is zero, r is NaN. If y is infinite and x\n    is finite, r is x rounded to the precision of r. If r is zero, it has the\n    sign of x. The return value is the ternary value corresponding to r.\n\n    Returns a pair (ternary, quotient) where ternary is the ternary value\n    corresponding to r, and q gives the low significant bits from the quotient\n    n (more precisely the number of bits in a long minus one), with the\n    sign of x divided by y (except if those low bits are all zero, in which\n    case zero is returned). Note that x may be so large in magnitude relative\n    to y that an exact representation of the quotient is not practical.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_123mpfr_remquo = {__Pyx_NAMESTR("mpfr_remquo"), (PyCFunction)__pyx_pf_4mpfr_123mpfr_remquo, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_123mpfr_remquo)};
static PyObject *__pyx_pf_4mpfr_123mpfr_remquo(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_r = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_x = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_y = 0;
  mpfr_rnd_t __pyx_v_rnd;
  long __pyx_v_quotient;
  int __pyx_v_ternary;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__r,&__pyx_n_s__x,&__pyx_n_s__y,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_remquo");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__r);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_remquo", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2064; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_remquo", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2064; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_remquo", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2064; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_remquo") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2064; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_r = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_y = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[2]);
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2065; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_r = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_y = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 2));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2065; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_remquo", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2064; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_remquo");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_r), __pyx_ptype_4mpfr_Mpfr_t, 0, "r", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_4mpfr_Mpfr_t, 0, "x", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_4mpfr_Mpfr_t, 0, "y", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2065; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2089
 *     cdef long int quotient
 * 
 *     check_initialized(r)             # <<<<<<<<<<<<<<
 *     check_initialized(x)
 *     check_initialized(y)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_r);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2089; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2090
 * 
 *     check_initialized(r)
 *     check_initialized(x)             # <<<<<<<<<<<<<<
 *     check_initialized(y)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_x);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2090; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2091
 *     check_initialized(r)
 *     check_initialized(x)
 *     check_initialized(y)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     ternary = cmpfr.mpfr_remquo(
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_y);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2091; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2092
 *     check_initialized(x)
 *     check_initialized(y)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     ternary = cmpfr.mpfr_remquo(
 *         &r._value, &quotient, &x._value, &y._value, rnd
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2092; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2095
 *     ternary = cmpfr.mpfr_remquo(
 *         &r._value, &quotient, &x._value, &y._value, rnd
 *     )             # <<<<<<<<<<<<<<
 *     return ternary, quotient
 * 
 */
  __pyx_v_ternary = mpfr_remquo((&__pyx_v_r->_value), (&__pyx_v_quotient), (&__pyx_v_x->_value), (&__pyx_v_y->_value), __pyx_v_rnd);

  /* "mpfr.pyx":2096
 *         &r._value, &quotient, &x._value, &y._value, rnd
 *     )
 *     return ternary, quotient             # <<<<<<<<<<<<<<
 * 
 * def mpfr_integer_p(Mpfr_t op not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_ternary); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2096; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyInt_FromLong(__pyx_v_quotient); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2096; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2096; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("mpfr.mpfr_remquo");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2098
 *     return ternary, quotient
 * 
 * def mpfr_integer_p(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op is an integer.  Return False otherwise.
 */

static PyObject *__pyx_pf_4mpfr_124mpfr_integer_p(PyObject *__pyx_self, PyObject *__pyx_v_op); /*proto*/
static char __pyx_doc_4mpfr_124mpfr_integer_p[] = "mpfr_integer_p(Mpfr_t op)\n\n    Return True if op is an integer.  Return False otherwise.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_124mpfr_integer_p = {__Pyx_NAMESTR("mpfr_integer_p"), (PyCFunction)__pyx_pf_4mpfr_124mpfr_integer_p, METH_O, __Pyx_DOCSTR(__pyx_doc_4mpfr_124mpfr_integer_p)};
static PyObject *__pyx_pf_4mpfr_124mpfr_integer_p(PyObject *__pyx_self, PyObject *__pyx_v_op) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("mpfr_integer_p");
  __pyx_self = __pyx_self;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2098; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2103
 * 
 *     """
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     return bool(cmpfr.mpfr_integer_p(&op._value))
 * 
 */
  __pyx_t_1 = __pyx_v_op;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2104
 *     """
 *     check_initialized(op)
 *     return bool(cmpfr.mpfr_integer_p(&op._value))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_integer_p((&((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_v_op)->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_3))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_integer_p");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2111
 * ###############################################################################
 * 
 * def mpfr_set_default_rounding_mode(cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set the default rounding mode to rnd.
 */

static PyObject *__pyx_pf_4mpfr_125mpfr_set_default_rounding_mode(PyObject *__pyx_self, PyObject *__pyx_arg_rnd); /*proto*/
static char __pyx_doc_4mpfr_125mpfr_set_default_rounding_mode[] = "mpfr_set_default_rounding_mode(mpfr_rnd_t rnd)\n\n    Set the default rounding mode to rnd.\n\n    The default rounding mode is to nearest initially.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_125mpfr_set_default_rounding_mode = {__Pyx_NAMESTR("mpfr_set_default_rounding_mode"), (PyCFunction)__pyx_pf_4mpfr_125mpfr_set_default_rounding_mode, METH_O, __Pyx_DOCSTR(__pyx_doc_4mpfr_125mpfr_set_default_rounding_mode)};
static PyObject *__pyx_pf_4mpfr_125mpfr_set_default_rounding_mode(PyObject *__pyx_self, PyObject *__pyx_arg_rnd) {
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("mpfr_set_default_rounding_mode");
  __pyx_self = __pyx_self;
  assert(__pyx_arg_rnd); {
    __pyx_v_rnd = ((mpfr_rnd_t)PyInt_AsLong(__pyx_arg_rnd)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2111; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_set_default_rounding_mode");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "mpfr.pyx":2118
 * 
 *     """
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     cmpfr.mpfr_set_default_rounding_mode(rnd)
 * 
 */
  __pyx_t_1 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2119
 *     """
 *     check_rounding_mode(rnd)
 *     cmpfr.mpfr_set_default_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_get_default_rounding_mode():
 */
  mpfr_set_default_rounding_mode(__pyx_v_rnd);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("mpfr.mpfr_set_default_rounding_mode");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2121
 *     cmpfr.mpfr_set_default_rounding_mode(rnd)
 * 
 * def mpfr_get_default_rounding_mode():             # <<<<<<<<<<<<<<
 *     """
 *     Get the default rounding mode.
 */

static PyObject *__pyx_pf_4mpfr_126mpfr_get_default_rounding_mode(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_126mpfr_get_default_rounding_mode[] = "mpfr_get_default_rounding_mode()\n\n    Get the default rounding mode.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_126mpfr_get_default_rounding_mode = {__Pyx_NAMESTR("mpfr_get_default_rounding_mode"), (PyCFunction)__pyx_pf_4mpfr_126mpfr_get_default_rounding_mode, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_126mpfr_get_default_rounding_mode)};
static PyObject *__pyx_pf_4mpfr_126mpfr_get_default_rounding_mode(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("mpfr_get_default_rounding_mode");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2126
 * 
 *     """
 *     return cmpfr.mpfr_get_default_rounding_mode()             # <<<<<<<<<<<<<<
 * 
 * def mpfr_prec_round(
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_get_default_rounding_mode()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_get_default_rounding_mode");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2128
 *     return cmpfr.mpfr_get_default_rounding_mode()
 * 
 * def mpfr_prec_round(             # <<<<<<<<<<<<<<
 *     Mpfr_t x not None, cmpfr.mpfr_prec_t prec, cmpfr.mpfr_rnd_t rnd
 *     ):
 */

static PyObject *__pyx_pf_4mpfr_127mpfr_prec_round(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_127mpfr_prec_round[] = "mpfr_prec_round(Mpfr_t x, mpfr_prec_t prec, mpfr_rnd_t rnd)\n\n    Round x according to the given rounding mode and precision.\n\n    Round x according to rnd with precision prec, which must be an integer\n    between MPFR_PREC_MIN and MPFR_PREC_MAX (otherwise the behavior is\n    undefined). If prec is greater or equal to the precision of x, then new\n    space is allocated for the significand, and it is filled with\n    zeros. Otherwise, the significand is rounded to precision prec with the\n    given direction. In both cases, the precision of x is changed to prec.\n\n    Here is an example of how to use mpfr_prec_round to implement Newton's\n    algorithm to compute the inverse of a, assuming x is already an\n    approximation to n bits:\n\n            mpfr_set_prec (t, 2 * n);\n            mpfr_set (t, a, MPFR_RNDN);         /* round a to 2n bits */\n            mpfr_mul (t, t, x, MPFR_RNDN);      /* t is correct to 2n bits */\n            mpfr_ui_sub (t, 1, t, MPFR_RNDN);   /* high n bits cancel with 1 */\n            mpfr_prec_round (t, n, MPFR_RNDN);  /* t is correct to n bits */\n            mpfr_mul (t, t, x, MPFR_RNDN);      /* t is correct to n bits */\n            mpfr_prec_round (x, 2 * n, MPFR_RNDN); /* exact */\n            mpfr_add (x, x, t, MPFR_RNDN);      /* x is correct to 2n bits */\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_127mpfr_prec_round = {__Pyx_NAMESTR("mpfr_prec_round"), (PyCFunction)__pyx_pf_4mpfr_127mpfr_prec_round, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_127mpfr_prec_round)};
static PyObject *__pyx_pf_4mpfr_127mpfr_prec_round(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_x = 0;
  mpfr_prec_t __pyx_v_prec;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__prec,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_prec_round");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__prec);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_prec_round", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2128; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_prec_round", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2128; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_prec_round") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2128; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_prec = __Pyx_PyInt_from_py_mpfr_prec_t(values[1]); if (unlikely((__pyx_v_prec == (mpfr_prec_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2129; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2129; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_prec = __Pyx_PyInt_from_py_mpfr_prec_t(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_prec == (mpfr_prec_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2129; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2129; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_prec_round", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2128; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_prec_round");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_4mpfr_Mpfr_t, 0, "x", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2155
 * 
 *     """
 *     check_initialized(x)             # <<<<<<<<<<<<<<
 *     check_precision(prec)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_x);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2156
 *     """
 *     check_initialized(x)
 *     check_precision(prec)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_prec_round(&x._value, prec, rnd)
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_precision(__pyx_v_prec); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2157
 *     check_initialized(x)
 *     check_precision(prec)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_prec_round(&x._value, prec, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2158
 *     check_precision(prec)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_prec_round(&x._value, prec, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_can_round(Mpfr_t b not None, cmpfr.mpfr_exp_t err,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_prec_round((&__pyx_v_x->_value), __pyx_v_prec, __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_prec_round");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2160
 *     return cmpfr.mpfr_prec_round(&x._value, prec, rnd)
 * 
 * def mpfr_can_round(Mpfr_t b not None, cmpfr.mpfr_exp_t err,             # <<<<<<<<<<<<<<
 *                    cmpfr.mpfr_rnd_t rnd1, cmpfr.mpfr_rnd_t rnd2,
 *                    cmpfr.mpfr_prec_t prec):
 */

static PyObject *__pyx_pf_4mpfr_128mpfr_can_round(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_128mpfr_can_round[] = "mpfr_can_round(Mpfr_t b, mpfr_exp_t err, mpfr_rnd_t rnd1, mpfr_rnd_t rnd2, mpfr_prec_t prec)\n\n    Assuming b is an approximation of an unknown number x in the direction rnd1\n    with error at most two to the power E(b)-err where E(b) is the exponent of\n    b, return a non-zero value if one is able to round correctly x to precision\n    prec with the direction rnd2, and 0 otherwise (including for NaN and\n    Inf). This function does not modify its arguments.\n\n    If rnd1 is MPFR_RNDN, then the sign of the error is unknown, but its\n    absolute value is the same, so that the possible range is twice as large as\n    with a directed rounding for rnd1.\n\n    Note: if one wants to also determine the correct ternary value when\n    rounding b to precision prec with rounding mode rnd, a useful trick is the\n    following:\n\n     if mpfr_can_round(b, err, MPFR_RNDN, MPFR_RNDZ, prec + (rnd == MPFR_RNDN)):\n         ...\n\n    Indeed, if rnd is MPFR_RNDN, this will check if one can round to prec+1\n    bits with a directed rounding: if so, one can surely round to nearest to\n    prec bits, and in addition one can determine the correct ternary value,\n    which would not be the case when b is near from a value exactly\n    representable on prec bits.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_128mpfr_can_round = {__Pyx_NAMESTR("mpfr_can_round"), (PyCFunction)__pyx_pf_4mpfr_128mpfr_can_round, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_128mpfr_can_round)};
static PyObject *__pyx_pf_4mpfr_128mpfr_can_round(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_b = 0;
  mpfr_exp_t __pyx_v_err;
  mpfr_rnd_t __pyx_v_rnd1;
  mpfr_rnd_t __pyx_v_rnd2;
  mpfr_prec_t __pyx_v_prec;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__b,&__pyx_n_s__err,&__pyx_n_s__rnd1,&__pyx_n_s__rnd2,&__pyx_n_s__prec,0};
  __Pyx_RefNannySetupContext("mpfr_can_round");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[5] = {0,0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__b);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__err);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_can_round", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2160; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd1);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_can_round", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2160; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd2);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_can_round", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2160; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  4:
      values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__prec);
      if (likely(values[4])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_can_round", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2160; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_can_round") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2160; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_b = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_err = __Pyx_PyInt_from_py_mp_exp_t(values[1]); if (unlikely((__pyx_v_err == (mpfr_exp_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2160; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd1 = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2161; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd2 = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2161; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_prec = __Pyx_PyInt_from_py_mpfr_prec_t(values[4]); if (unlikely((__pyx_v_prec == (mpfr_prec_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2162; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_b = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_err = __Pyx_PyInt_from_py_mp_exp_t(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_err == (mpfr_exp_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2160; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd1 = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2161; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd2 = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2161; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_prec = __Pyx_PyInt_from_py_mpfr_prec_t(PyTuple_GET_ITEM(__pyx_args, 4)); if (unlikely((__pyx_v_prec == (mpfr_prec_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2162; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_can_round", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2160; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_can_round");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), __pyx_ptype_4mpfr_Mpfr_t, 0, "b", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2188
 * 
 *     """
 *     check_initialized(b)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd1)
 *     check_rounding_mode(rnd2)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_b);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2189
 *     """
 *     check_initialized(b)
 *     check_rounding_mode(rnd1)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd2)
 *     check_precision(prec)
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd1); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2190
 *     check_initialized(b)
 *     check_rounding_mode(rnd1)
 *     check_rounding_mode(rnd2)             # <<<<<<<<<<<<<<
 *     check_precision(prec)
 *     return bool(cmpfr.mpfr_can_round(&b._value, err, rnd1, rnd2, prec))
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd2); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2191
 *     check_rounding_mode(rnd1)
 *     check_rounding_mode(rnd2)
 *     check_precision(prec)             # <<<<<<<<<<<<<<
 *     return bool(cmpfr.mpfr_can_round(&b._value, err, rnd1, rnd2, prec))
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_precision(__pyx_v_prec); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2192
 *     check_rounding_mode(rnd2)
 *     check_precision(prec)
 *     return bool(cmpfr.mpfr_can_round(&b._value, err, rnd1, rnd2, prec))             # <<<<<<<<<<<<<<
 * 
 * def mpfr_min_prec(Mpfr_t x not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_can_round((&__pyx_v_b->_value), __pyx_v_err, __pyx_v_rnd1, __pyx_v_rnd2, __pyx_v_prec)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_3))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_can_round");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2194
 *     return bool(cmpfr.mpfr_can_round(&b._value, err, rnd1, rnd2, prec))
 * 
 * def mpfr_min_prec(Mpfr_t x not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return the minimal number of bits required to store the significand of x,
 */

static PyObject *__pyx_pf_4mpfr_129mpfr_min_prec(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static char __pyx_doc_4mpfr_129mpfr_min_prec[] = "mpfr_min_prec(Mpfr_t x)\n\n    Return the minimal number of bits required to store the significand of x,\n    and 0 for special values, including 0. (Warning: the returned value can be\n    less than MPFR_PREC_MIN.)\n\n    The function name is subject to change.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_129mpfr_min_prec = {__Pyx_NAMESTR("mpfr_min_prec"), (PyCFunction)__pyx_pf_4mpfr_129mpfr_min_prec, METH_O, __Pyx_DOCSTR(__pyx_doc_4mpfr_129mpfr_min_prec)};
static PyObject *__pyx_pf_4mpfr_129mpfr_min_prec(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("mpfr_min_prec");
  __pyx_self = __pyx_self;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_4mpfr_Mpfr_t, 0, "x", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2203
 * 
 *     """
 *     check_initialized(x)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_min_prec(&x._value)
 * 
 */
  __pyx_t_1 = __pyx_v_x;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2204
 *     """
 *     check_initialized(x)
 *     return cmpfr.mpfr_min_prec(&x._value)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_print_rnd_mode(cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_mpfr_prec_t(mpfr_min_prec((&((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_v_x)->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_min_prec");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2206
 *     return cmpfr.mpfr_min_prec(&x._value)
 * 
 * def mpfr_print_rnd_mode(cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Return a string ("MPFR_RNDD", "MPFR_RNDU", "MPFR_RNDN", "MPFR_RNDZ",
 */

static PyObject *__pyx_pf_4mpfr_130mpfr_print_rnd_mode(PyObject *__pyx_self, PyObject *__pyx_arg_rnd); /*proto*/
static char __pyx_doc_4mpfr_130mpfr_print_rnd_mode[] = "mpfr_print_rnd_mode(mpfr_rnd_t rnd)\n\n    Return a string (\"MPFR_RNDD\", \"MPFR_RNDU\", \"MPFR_RNDN\", \"MPFR_RNDZ\",\n    \"MPFR_RNDA\") corresponding to the rounding mode rnd.\n\n    Raise a ValueError if rnd is an invalid rounding mode.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_130mpfr_print_rnd_mode = {__Pyx_NAMESTR("mpfr_print_rnd_mode"), (PyCFunction)__pyx_pf_4mpfr_130mpfr_print_rnd_mode, METH_O, __Pyx_DOCSTR(__pyx_doc_4mpfr_130mpfr_print_rnd_mode)};
static PyObject *__pyx_pf_4mpfr_130mpfr_print_rnd_mode(PyObject *__pyx_self, PyObject *__pyx_arg_rnd) {
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("mpfr_print_rnd_mode");
  __pyx_self = __pyx_self;
  assert(__pyx_arg_rnd); {
    __pyx_v_rnd = ((mpfr_rnd_t)PyInt_AsLong(__pyx_arg_rnd)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2206; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_print_rnd_mode");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "mpfr.pyx":2214
 * 
 *     """
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_print_rnd_mode(rnd)
 * 
 */
  __pyx_t_1 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2215
 *     """
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_print_rnd_mode(rnd)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyBytes_FromString(mpfr_print_rnd_mode(__pyx_v_rnd)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_r = ((PyObject *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mpfr.mpfr_print_rnd_mode");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2222
 * ###############################################################################
 * 
 * def mpfr_nexttoward(Mpfr_t x not None, Mpfr_t y not None):             # <<<<<<<<<<<<<<
 *     """
 *     Replace x by the next floating-point number in the direction of y.
 */

static PyObject *__pyx_pf_4mpfr_131mpfr_nexttoward(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_131mpfr_nexttoward[] = "mpfr_nexttoward(Mpfr_t x, Mpfr_t y)\n\n    Replace x by the next floating-point number in the direction of y.\n\n    If x or y is NaN, set x to NaN. If x and y are equal, x is\n    unchanged. Otherwise, if x is different from y, replace x by the next\n    floating-point number (with the precision of x and the current exponent\n    range) in the direction of y (the infinite values are seen as the smallest\n    and largest floating-point numbers). If the result is zero, it keeps the\n    same sign. No underflow or overflow is generated.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_131mpfr_nexttoward = {__Pyx_NAMESTR("mpfr_nexttoward"), (PyCFunction)__pyx_pf_4mpfr_131mpfr_nexttoward, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_131mpfr_nexttoward)};
static PyObject *__pyx_pf_4mpfr_131mpfr_nexttoward(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_x = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_y = 0;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__y,0};
  __Pyx_RefNannySetupContext("mpfr_nexttoward");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__y);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_nexttoward", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_nexttoward") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_y = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_y = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_nexttoward", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_nexttoward");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_4mpfr_Mpfr_t, 0, "x", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_4mpfr_Mpfr_t, 0, "y", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2234
 * 
 *     """
 *     check_initialized(x)             # <<<<<<<<<<<<<<
 *     check_initialized(y)
 *     cmpfr.mpfr_nexttoward(&x._value, &y._value)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_x);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2235
 *     """
 *     check_initialized(x)
 *     check_initialized(y)             # <<<<<<<<<<<<<<
 *     cmpfr.mpfr_nexttoward(&x._value, &y._value)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_y);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2236
 *     check_initialized(x)
 *     check_initialized(y)
 *     cmpfr.mpfr_nexttoward(&x._value, &y._value)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_nextabove(Mpfr_t op not None):
 */
  mpfr_nexttoward((&__pyx_v_x->_value), (&__pyx_v_y->_value));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_nexttoward");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2238
 *     cmpfr.mpfr_nexttoward(&x._value, &y._value)
 * 
 * def mpfr_nextabove(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Equivalent to mpfr_nexttoward(op, y) where y is plus infinity.
 */

static PyObject *__pyx_pf_4mpfr_132mpfr_nextabove(PyObject *__pyx_self, PyObject *__pyx_v_op); /*proto*/
static char __pyx_doc_4mpfr_132mpfr_nextabove[] = "mpfr_nextabove(Mpfr_t op)\n\n    Equivalent to mpfr_nexttoward(op, y) where y is plus infinity.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_132mpfr_nextabove = {__Pyx_NAMESTR("mpfr_nextabove"), (PyCFunction)__pyx_pf_4mpfr_132mpfr_nextabove, METH_O, __Pyx_DOCSTR(__pyx_doc_4mpfr_132mpfr_nextabove)};
static PyObject *__pyx_pf_4mpfr_132mpfr_nextabove(PyObject *__pyx_self, PyObject *__pyx_v_op) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("mpfr_nextabove");
  __pyx_self = __pyx_self;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2243
 * 
 *     """
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     cmpfr.mpfr_nextabove(&op._value)
 * 
 */
  __pyx_t_1 = __pyx_v_op;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2244
 *     """
 *     check_initialized(op)
 *     cmpfr.mpfr_nextabove(&op._value)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_nextbelow(Mpfr_t op not None):
 */
  mpfr_nextabove((&((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_v_op)->_value));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_nextabove");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2246
 *     cmpfr.mpfr_nextabove(&op._value)
 * 
 * def mpfr_nextbelow(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Equivalent to mpfr_nexttoward(op, y) where y is minus infinity.
 */

static PyObject *__pyx_pf_4mpfr_133mpfr_nextbelow(PyObject *__pyx_self, PyObject *__pyx_v_op); /*proto*/
static char __pyx_doc_4mpfr_133mpfr_nextbelow[] = "mpfr_nextbelow(Mpfr_t op)\n\n    Equivalent to mpfr_nexttoward(op, y) where y is minus infinity.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_133mpfr_nextbelow = {__Pyx_NAMESTR("mpfr_nextbelow"), (PyCFunction)__pyx_pf_4mpfr_133mpfr_nextbelow, METH_O, __Pyx_DOCSTR(__pyx_doc_4mpfr_133mpfr_nextbelow)};
static PyObject *__pyx_pf_4mpfr_133mpfr_nextbelow(PyObject *__pyx_self, PyObject *__pyx_v_op) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("mpfr_nextbelow");
  __pyx_self = __pyx_self;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2251
 * 
 *     """
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     cmpfr.mpfr_nextbelow(&op._value)
 * 
 */
  __pyx_t_1 = __pyx_v_op;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2252
 *     """
 *     check_initialized(op)
 *     cmpfr.mpfr_nextbelow(&op._value)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_min(Mpfr_t rop not None, Mpfr_t op1 not None, Mpfr_t op2 not None,
 */
  mpfr_nextbelow((&((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_v_op)->_value));

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_nextbelow");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2254
 *     cmpfr.mpfr_nextbelow(&op._value)
 * 
 * def mpfr_min(Mpfr_t rop not None, Mpfr_t op1 not None, Mpfr_t op2 not None,             # <<<<<<<<<<<<<<
 *              cmpfr.mpfr_rnd_t rnd):
 *     """
 */

static PyObject *__pyx_pf_4mpfr_134mpfr_min(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_134mpfr_min[] = "mpfr_min(Mpfr_t rop, Mpfr_t op1, Mpfr_t op2, mpfr_rnd_t rnd)\n\n    Set rop to the minimum of op1 and op2.\n\n    If op1 and op2 are both NaN, then rop is set to NaN. If op1 or op2 is NaN,\n    then rop is set to the numeric value. If op1 and op2 are zeros of different\n    signs, then rop is set to \342\210\2220.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_134mpfr_min = {__Pyx_NAMESTR("mpfr_min"), (PyCFunction)__pyx_pf_4mpfr_134mpfr_min, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_134mpfr_min)};
static PyObject *__pyx_pf_4mpfr_134mpfr_min(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op1 = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op2 = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op1,&__pyx_n_s__op2,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_min");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op1);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_min", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2254; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op2);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_min", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2254; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_min", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2254; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_min") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2254; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[2]);
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2255; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 2));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2255; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_min", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2254; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_min");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op1), __pyx_ptype_4mpfr_Mpfr_t, 0, "op1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op2), __pyx_ptype_4mpfr_Mpfr_t, 0, "op2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2264
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op1)
 *     check_initialized(op2)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2265
 *     """
 *     check_initialized(rop)
 *     check_initialized(op1)             # <<<<<<<<<<<<<<
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2266
 *     check_initialized(rop)
 *     check_initialized(op1)
 *     check_initialized(op2)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_min(&rop._value, &op1._value, &op2._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op2);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2267
 *     check_initialized(op1)
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_min(&rop._value, &op1._value, &op2._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2268
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_min(&rop._value, &op1._value, &op2._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_max(Mpfr_t rop not None, Mpfr_t op1 not None, Mpfr_t op2 not None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_min((&__pyx_v_rop->_value), (&__pyx_v_op1->_value), (&__pyx_v_op2->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_min");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2270
 *     return cmpfr.mpfr_min(&rop._value, &op1._value, &op2._value, rnd)
 * 
 * def mpfr_max(Mpfr_t rop not None, Mpfr_t op1 not None, Mpfr_t op2 not None,             # <<<<<<<<<<<<<<
 *              cmpfr.mpfr_rnd_t rnd):
 *     """
 */

static PyObject *__pyx_pf_4mpfr_135mpfr_max(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_135mpfr_max[] = "mpfr_max(Mpfr_t rop, Mpfr_t op1, Mpfr_t op2, mpfr_rnd_t rnd)\n\n    Set rop to the maximum of op1 and op2.\n\n    If op1 and op2 are both NaN, then rop is set to NaN. If op1 or op2 is NaN,\n    then rop is set to the numeric value. If op1 and op2 are zeros of different\n    signs, then rop is set to +0.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_135mpfr_max = {__Pyx_NAMESTR("mpfr_max"), (PyCFunction)__pyx_pf_4mpfr_135mpfr_max, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_135mpfr_max)};
static PyObject *__pyx_pf_4mpfr_135mpfr_max(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op1 = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op2 = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op1,&__pyx_n_s__op2,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_max");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op1);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_max", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2270; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op2);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_max", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2270; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_max", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2270; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_max") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2270; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[2]);
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2271; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 2));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2271; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_max", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2270; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_max");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op1), __pyx_ptype_4mpfr_Mpfr_t, 0, "op1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op2), __pyx_ptype_4mpfr_Mpfr_t, 0, "op2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2280
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op1)
 *     check_initialized(op2)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2281
 *     """
 *     check_initialized(rop)
 *     check_initialized(op1)             # <<<<<<<<<<<<<<
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2282
 *     check_initialized(rop)
 *     check_initialized(op1)
 *     check_initialized(op2)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_max(&rop._value, &op1._value, &op2._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op2);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2283
 *     check_initialized(op1)
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_max(&rop._value, &op1._value, &op2._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2284
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_max(&rop._value, &op1._value, &op2._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_get_exp(Mpfr_t op not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_max((&__pyx_v_rop->_value), (&__pyx_v_op1->_value), (&__pyx_v_op2->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_max");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2286
 *     return cmpfr.mpfr_max(&rop._value, &op1._value, &op2._value, rnd)
 * 
 * def mpfr_get_exp(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return the exponent of op.
 */

static PyObject *__pyx_pf_4mpfr_136mpfr_get_exp(PyObject *__pyx_self, PyObject *__pyx_v_op); /*proto*/
static char __pyx_doc_4mpfr_136mpfr_get_exp[] = "mpfr_get_exp(Mpfr_t op)\n\n    Return the exponent of op.\n\n    Return the exponent of op, assuming that op is a non-zero ordinary number\n    and the significand is considered in [1/2, 1). The behavior for NaN,\n    infinity or zero is undefined.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_136mpfr_get_exp = {__Pyx_NAMESTR("mpfr_get_exp"), (PyCFunction)__pyx_pf_4mpfr_136mpfr_get_exp, METH_O, __Pyx_DOCSTR(__pyx_doc_4mpfr_136mpfr_get_exp)};
static PyObject *__pyx_pf_4mpfr_136mpfr_get_exp(PyObject *__pyx_self, PyObject *__pyx_v_op) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("mpfr_get_exp");
  __pyx_self = __pyx_self;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2295
 * 
 *     """
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_get_exp(&op._value)
 * 
 */
  __pyx_t_1 = __pyx_v_op;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2296
 *     """
 *     check_initialized(op)
 *     return cmpfr.mpfr_get_exp(&op._value)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_set_exp(Mpfr_t op not None, cmpfr.mpfr_exp_t exp):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_mp_exp_t(mpfr_get_exp((&((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_v_op)->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_get_exp");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2298
 *     return cmpfr.mpfr_get_exp(&op._value)
 * 
 * def mpfr_set_exp(Mpfr_t op not None, cmpfr.mpfr_exp_t exp):             # <<<<<<<<<<<<<<
 *     """
 *     Set the exponent of op.
 */

static PyObject *__pyx_pf_4mpfr_137mpfr_set_exp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_137mpfr_set_exp[] = "mpfr_set_exp(Mpfr_t op, mpfr_exp_t exp)\n\n    Set the exponent of op.\n\n    Set the exponent of op to exp if exp is in the current exponent range (even\n    if x is not a non-zero ordinary number).  If exp is not in the current\n    exponent range, raise ValueError.  The significand is assumed to be in\n    [1/2, 1).\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_137mpfr_set_exp = {__Pyx_NAMESTR("mpfr_set_exp"), (PyCFunction)__pyx_pf_4mpfr_137mpfr_set_exp, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_137mpfr_set_exp)};
static PyObject *__pyx_pf_4mpfr_137mpfr_set_exp(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  mpfr_exp_t __pyx_v_exp;
  int __pyx_v_error_code;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__op,&__pyx_n_s__exp,0};
  __Pyx_RefNannySetupContext("mpfr_set_exp");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__exp);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_set_exp", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_set_exp") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_exp = __Pyx_PyInt_from_py_mp_exp_t(values[1]); if (unlikely((__pyx_v_exp == (mpfr_exp_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_exp = __Pyx_PyInt_from_py_mp_exp_t(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_exp == (mpfr_exp_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_set_exp", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2298; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_set_exp");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2308
 * 
 *     """
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     error_code = cmpfr.mpfr_set_exp(&op._value, exp)
 *     if error_code:
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2309
 *     """
 *     check_initialized(op)
 *     error_code = cmpfr.mpfr_set_exp(&op._value, exp)             # <<<<<<<<<<<<<<
 *     if error_code:
 *         raise ValueError("exponent not in current exponent range")
 */
  __pyx_v_error_code = mpfr_set_exp((&__pyx_v_op->_value), __pyx_v_exp);

  /* "mpfr.pyx":2310
 *     check_initialized(op)
 *     error_code = cmpfr.mpfr_set_exp(&op._value, exp)
 *     if error_code:             # <<<<<<<<<<<<<<
 *         raise ValueError("exponent not in current exponent range")
 * 
 */
  if (__pyx_v_error_code) {

    /* "mpfr.pyx":2311
 *     error_code = cmpfr.mpfr_set_exp(&op._value, exp)
 *     if error_code:
 *         raise ValueError("exponent not in current exponent range")             # <<<<<<<<<<<<<<
 * 
 * def mpfr_signbit(Mpfr_t op not None):
 */
    __pyx_t_1 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_14), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_set_exp");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2313
 *         raise ValueError("exponent not in current exponent range")
 * 
 * def mpfr_signbit(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op has its sign bit set.  Return False otherwise.
 */

static PyObject *__pyx_pf_4mpfr_138mpfr_signbit(PyObject *__pyx_self, PyObject *__pyx_v_op); /*proto*/
static char __pyx_doc_4mpfr_138mpfr_signbit[] = "mpfr_signbit(Mpfr_t op)\n\n    Return True if op has its sign bit set.  Return False otherwise.\n\n    This function returns True for negative numbers, negative infinity, -0,\n    or a NaN whose representation has its sign bit set.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_138mpfr_signbit = {__Pyx_NAMESTR("mpfr_signbit"), (PyCFunction)__pyx_pf_4mpfr_138mpfr_signbit, METH_O, __Pyx_DOCSTR(__pyx_doc_4mpfr_138mpfr_signbit)};
static PyObject *__pyx_pf_4mpfr_138mpfr_signbit(PyObject *__pyx_self, PyObject *__pyx_v_op) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("mpfr_signbit");
  __pyx_self = __pyx_self;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2321
 * 
 *     """
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     return bool(cmpfr.mpfr_signbit(&op._value))
 * 
 */
  __pyx_t_1 = __pyx_v_op;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2322
 *     """
 *     check_initialized(op)
 *     return bool(cmpfr.mpfr_signbit(&op._value))             # <<<<<<<<<<<<<<
 * 
 * def mpfr_setsign(Mpfr_t rop not None, Mpfr_t op not None, s, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_signbit((&((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_v_op)->_value))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_3))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_signbit");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2324
 *     return bool(cmpfr.mpfr_signbit(&op._value))
 * 
 * def mpfr_setsign(Mpfr_t rop not None, Mpfr_t op not None, s, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set the value of rop from op and the sign of rop from s.
 */

static PyObject *__pyx_pf_4mpfr_139mpfr_setsign(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_139mpfr_setsign[] = "mpfr_setsign(Mpfr_t rop, Mpfr_t op, s, mpfr_rnd_t rnd)\n\n    Set the value of rop from op and the sign of rop from s.\n\n    Set the value of rop from op, rounded toward the given direction rnd, then\n    set (resp. clear) its sign bit if s is non-zero (resp. zero), even when op\n    is a NaN.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_139mpfr_setsign = {__Pyx_NAMESTR("mpfr_setsign"), (PyCFunction)__pyx_pf_4mpfr_139mpfr_setsign, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_139mpfr_setsign)};
static PyObject *__pyx_pf_4mpfr_139mpfr_setsign(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op = 0;
  PyObject *__pyx_v_s = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __mpfr_struct *__pyx_t_3;
  __mpfr_struct *__pyx_t_4;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op,&__pyx_n_s__s,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_setsign");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_setsign", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2324; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__s);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_setsign", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2324; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_setsign", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2324; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_setsign") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2324; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_s = values[2];
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2324; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_s = PyTuple_GET_ITEM(__pyx_args, 2);
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2324; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_setsign", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2324; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_setsign");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_ptype_4mpfr_Mpfr_t, 0, "op", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2333
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2334
 *     """
 *     check_initialized(rop)
 *     check_initialized(op)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_setsign(&rop._value, &op._value, s, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2335
 *     check_initialized(rop)
 *     check_initialized(op)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_setsign(&rop._value, &op._value, s, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2336
 *     check_initialized(op)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_setsign(&rop._value, &op._value, s, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_copysign(Mpfr_t rop not None, Mpfr_t op1 not None,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = (&__pyx_v_rop->_value);
  __pyx_t_4 = (&__pyx_v_op->_value);
  __pyx_t_2 = __Pyx_PyInt_AsInt(__pyx_v_s); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = PyInt_FromLong(mpfr_setsign(__pyx_t_3, __pyx_t_4, __pyx_t_2, __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_setsign");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2338
 *     return cmpfr.mpfr_setsign(&rop._value, &op._value, s, rnd)
 * 
 * def mpfr_copysign(Mpfr_t rop not None, Mpfr_t op1 not None,             # <<<<<<<<<<<<<<
 *                   Mpfr_t op2 not None, cmpfr.mpfr_rnd_t rnd):
 *     """
 */

static PyObject *__pyx_pf_4mpfr_140mpfr_copysign(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_140mpfr_copysign[] = "mpfr_copysign(Mpfr_t rop, Mpfr_t op1, Mpfr_t op2, mpfr_rnd_t rnd)\n\n    Set rop to op1 with the sign of op2.\n\n    Set the value of rop from op1, rounded toward the given direction rnd, then\n    set its sign bit to that of op2 (even when op1 or op2 is a NaN). This\n    function is equivalent to mpfr_setsign (rop, op1, mpfr_signbit (op2), rnd).\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_140mpfr_copysign = {__Pyx_NAMESTR("mpfr_copysign"), (PyCFunction)__pyx_pf_4mpfr_140mpfr_copysign, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_140mpfr_copysign)};
static PyObject *__pyx_pf_4mpfr_140mpfr_copysign(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_rop = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op1 = 0;
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_op2 = 0;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__rop,&__pyx_n_s__op1,&__pyx_n_s__op2,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_copysign");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[4] = {0,0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rop);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op1);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_copysign", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2338; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__op2);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_copysign", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2338; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  3:
      values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[3])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_copysign", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2338; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_copysign") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2338; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[1]);
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[2]);
    __pyx_v_rnd = PyInt_AsLong(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2339; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_rop = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_op1 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 1));
    __pyx_v_op2 = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 2));
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 3)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2339; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_copysign", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2338; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_copysign");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_rop), __pyx_ptype_4mpfr_Mpfr_t, 0, "rop", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op1), __pyx_ptype_4mpfr_Mpfr_t, 0, "op1", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op2), __pyx_ptype_4mpfr_Mpfr_t, 0, "op2", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2348
 * 
 *     """
 *     check_initialized(rop)             # <<<<<<<<<<<<<<
 *     check_initialized(op1)
 *     check_initialized(op2)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_rop);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2349
 *     """
 *     check_initialized(rop)
 *     check_initialized(op1)             # <<<<<<<<<<<<<<
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2350
 *     check_initialized(rop)
 *     check_initialized(op1)
 *     check_initialized(op2)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_copysign(&rop._value, &op1._value, &op2._value, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_op2);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2351
 *     check_initialized(op1)
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_copysign(&rop._value, &op1._value, &op2._value, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2352
 *     check_initialized(op2)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_copysign(&rop._value, &op1._value, &op2._value, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_get_version():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_copysign((&__pyx_v_rop->_value), (&__pyx_v_op1->_value), (&__pyx_v_op2->_value), __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_copysign");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2354
 *     return cmpfr.mpfr_copysign(&rop._value, &op1._value, &op2._value, rnd)
 * 
 * def mpfr_get_version():             # <<<<<<<<<<<<<<
 *     """
 *     Return the MPFR version, as a string.
 */

static PyObject *__pyx_pf_4mpfr_141mpfr_get_version(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_141mpfr_get_version[] = "mpfr_get_version()\n\n    Return the MPFR version, as a string.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_141mpfr_get_version = {__Pyx_NAMESTR("mpfr_get_version"), (PyCFunction)__pyx_pf_4mpfr_141mpfr_get_version, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_141mpfr_get_version)};
static PyObject *__pyx_pf_4mpfr_141mpfr_get_version(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("mpfr_get_version");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2359
 * 
 *     """
 *     return cmpfr.mpfr_get_version()             # <<<<<<<<<<<<<<
 * 
 * MPFR_VERSION = cmpfr.MPFR_VERSION
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(mpfr_get_version()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_get_version");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2367
 * MPFR_VERSION_STRING = cmpfr.MPFR_VERSION_STRING
 * 
 * def MPFR_VERSION_NUM(int major, int minor, int patchlevel):             # <<<<<<<<<<<<<<
 *     """
 *     Create an integer in the same format as used by MPFR_VERSION from the given
 */

static PyObject *__pyx_pf_4mpfr_142MPFR_VERSION_NUM(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_142MPFR_VERSION_NUM[] = "MPFR_VERSION_NUM(int major, int minor, int patchlevel)\n\n    Create an integer in the same format as used by MPFR_VERSION from the given\n    major, minor and patchlevel.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_142MPFR_VERSION_NUM = {__Pyx_NAMESTR("MPFR_VERSION_NUM"), (PyCFunction)__pyx_pf_4mpfr_142MPFR_VERSION_NUM, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_142MPFR_VERSION_NUM)};
static PyObject *__pyx_pf_4mpfr_142MPFR_VERSION_NUM(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_major;
  int __pyx_v_minor;
  int __pyx_v_patchlevel;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__major,&__pyx_n_s__minor,&__pyx_n_s__patchlevel,0};
  __Pyx_RefNannySetupContext("MPFR_VERSION_NUM");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__major);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__minor);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("MPFR_VERSION_NUM", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2367; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__patchlevel);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("MPFR_VERSION_NUM", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2367; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "MPFR_VERSION_NUM") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2367; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_major = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_major == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2367; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_minor = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_minor == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2367; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_patchlevel = __Pyx_PyInt_AsInt(values[2]); if (unlikely((__pyx_v_patchlevel == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2367; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_major = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_major == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2367; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_minor = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_minor == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2367; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_patchlevel = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_patchlevel == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2367; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("MPFR_VERSION_NUM", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2367; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.MPFR_VERSION_NUM");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "mpfr.pyx":2373
 * 
 *     """
 *     return cmpfr.MPFR_VERSION_NUM(major, minor, patchlevel)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_get_patches():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(MPFR_VERSION_NUM(__pyx_v_major, __pyx_v_minor, __pyx_v_patchlevel)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.MPFR_VERSION_NUM");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2375
 *     return cmpfr.MPFR_VERSION_NUM(major, minor, patchlevel)
 * 
 * def mpfr_get_patches():             # <<<<<<<<<<<<<<
 *     """
 *     Return information about patches applied to the MPFR library.
 */

static PyObject *__pyx_pf_4mpfr_143mpfr_get_patches(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_143mpfr_get_patches[] = "mpfr_get_patches()\n\n    Return information about patches applied to the MPFR library.\n\n    Return a list containing the ids of patches applied to the MPFR\n    library (contents of the PATCHES file), separated by spaces.\n\n    Note: If the program has been compiled with an older MPFR version and is\n    dynamically linked with a new MPFR library version, the identifiers of the\n    patches applied to the old (compile-time) MPFR version are not available\n    (however this information should not have much interest in general).\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_143mpfr_get_patches = {__Pyx_NAMESTR("mpfr_get_patches"), (PyCFunction)__pyx_pf_4mpfr_143mpfr_get_patches, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_143mpfr_get_patches)};
static PyObject *__pyx_pf_4mpfr_143mpfr_get_patches(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("mpfr_get_patches");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2388
 * 
 *     """
 *     return cmpfr.mpfr_get_patches().split()             # <<<<<<<<<<<<<<
 * 
 * def mpfr_buildopt_tls_p():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyBytes_FromString(mpfr_get_patches()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = PyObject_GetAttr(((PyObject *)__pyx_t_1), __pyx_n_s__split); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("mpfr.mpfr_get_patches");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2390
 *     return cmpfr.mpfr_get_patches().split()
 * 
 * def mpfr_buildopt_tls_p():             # <<<<<<<<<<<<<<
 *     """
 *     Return True if MPFR was compiled as thread safe using compiler-level Thread
 */

static PyObject *__pyx_pf_4mpfr_144mpfr_buildopt_tls_p(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_144mpfr_buildopt_tls_p[] = "mpfr_buildopt_tls_p()\n\n    Return True if MPFR was compiled as thread safe using compiler-level Thread\n    Local Storage (that is, MPFR was built with the --enable-thread-safe\n    configure option, see INSTALL file), return False otherwise.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_144mpfr_buildopt_tls_p = {__Pyx_NAMESTR("mpfr_buildopt_tls_p"), (PyCFunction)__pyx_pf_4mpfr_144mpfr_buildopt_tls_p, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_144mpfr_buildopt_tls_p)};
static PyObject *__pyx_pf_4mpfr_144mpfr_buildopt_tls_p(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("mpfr_buildopt_tls_p");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2397
 * 
 *     """
 *     return bool(cmpfr.mpfr_buildopt_tls_p())             # <<<<<<<<<<<<<<
 * 
 * def mpfr_buildopt_decimal_p():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_buildopt_tls_p()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_2))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_buildopt_tls_p");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2399
 *     return bool(cmpfr.mpfr_buildopt_tls_p())
 * 
 * def mpfr_buildopt_decimal_p():             # <<<<<<<<<<<<<<
 *     """
 *     Return True if MPFR was compiled with decimal float support (that is, MPFR
 */

static PyObject *__pyx_pf_4mpfr_145mpfr_buildopt_decimal_p(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_145mpfr_buildopt_decimal_p[] = "mpfr_buildopt_decimal_p()\n\n    Return True if MPFR was compiled with decimal float support (that is, MPFR\n    was built with the --enable-decimal-float configure option), return False\n    otherwise.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_145mpfr_buildopt_decimal_p = {__Pyx_NAMESTR("mpfr_buildopt_decimal_p"), (PyCFunction)__pyx_pf_4mpfr_145mpfr_buildopt_decimal_p, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_145mpfr_buildopt_decimal_p)};
static PyObject *__pyx_pf_4mpfr_145mpfr_buildopt_decimal_p(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("mpfr_buildopt_decimal_p");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2406
 * 
 *     """
 *     return bool(cmpfr.mpfr_buildopt_decimal_p())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_buildopt_decimal_p()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_2))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_buildopt_decimal_p");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2414
 * 
 * 
 * def mpfr_get_emin():             # <<<<<<<<<<<<<<
 *     """
 *     Return smallest exponent allowed.
 */

static PyObject *__pyx_pf_4mpfr_146mpfr_get_emin(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_146mpfr_get_emin[] = "mpfr_get_emin()\n\n    Return smallest exponent allowed.\n\n    Return the (current) smallest and exponent allowed for a floating-point\n    variable. The smallest positive value of a floating-point variable is one\n    half times 2 raised to the smallest exponent.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_146mpfr_get_emin = {__Pyx_NAMESTR("mpfr_get_emin"), (PyCFunction)__pyx_pf_4mpfr_146mpfr_get_emin, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_146mpfr_get_emin)};
static PyObject *__pyx_pf_4mpfr_146mpfr_get_emin(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("mpfr_get_emin");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2423
 * 
 *     """
 *     return cmpfr.mpfr_get_emin()             # <<<<<<<<<<<<<<
 * 
 * def mpfr_get_emax():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_mp_exp_t(mpfr_get_emin()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_get_emin");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2425
 *     return cmpfr.mpfr_get_emin()
 * 
 * def mpfr_get_emax():             # <<<<<<<<<<<<<<
 *     """
 *     Return largest exponent allowed.
 */

static PyObject *__pyx_pf_4mpfr_147mpfr_get_emax(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_147mpfr_get_emax[] = "mpfr_get_emax()\n\n    Return largest exponent allowed.\n\n    Return the (current) largest exponent allowed for a floating-point\n    variable. The largest positive value of a floating-point variable has the\n    form (1 - epsilon) times 2 raised to the largest exponent, where epsilon\n    depends on the precision of the considered variable.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_147mpfr_get_emax = {__Pyx_NAMESTR("mpfr_get_emax"), (PyCFunction)__pyx_pf_4mpfr_147mpfr_get_emax, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_147mpfr_get_emax)};
static PyObject *__pyx_pf_4mpfr_147mpfr_get_emax(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("mpfr_get_emax");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2435
 * 
 *     """
 *     return cmpfr.mpfr_get_emax()             # <<<<<<<<<<<<<<
 * 
 * def mpfr_set_emin(cmpfr.mpfr_exp_t exp):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_mp_exp_t(mpfr_get_emax()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_get_emax");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2437
 *     return cmpfr.mpfr_get_emax()
 * 
 * def mpfr_set_emin(cmpfr.mpfr_exp_t exp):             # <<<<<<<<<<<<<<
 *     """
 *     Set the smallest exponent allowed for a floating-point variable.
 */

static PyObject *__pyx_pf_4mpfr_148mpfr_set_emin(PyObject *__pyx_self, PyObject *__pyx_arg_exp); /*proto*/
static char __pyx_doc_4mpfr_148mpfr_set_emin[] = "mpfr_set_emin(mpfr_exp_t exp)\n\n    Set the smallest exponent allowed for a floating-point variable.\n\n    Raises ValueError when exp is not in the range accepted by the\n    implementation (in that case the smallest exponent is not changed).\n\n    If the user changes the exponent range, it is her/his responsibility to\n    check that all current floating-point variables are in the new allowed\n    range (for example using mpfr_check_range), otherwise the subsequent\n    behavior will be undefined, in the sense of the ISO C standard.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_148mpfr_set_emin = {__Pyx_NAMESTR("mpfr_set_emin"), (PyCFunction)__pyx_pf_4mpfr_148mpfr_set_emin, METH_O, __Pyx_DOCSTR(__pyx_doc_4mpfr_148mpfr_set_emin)};
static PyObject *__pyx_pf_4mpfr_148mpfr_set_emin(PyObject *__pyx_self, PyObject *__pyx_arg_exp) {
  mpfr_exp_t __pyx_v_exp;
  int __pyx_v_error_code;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("mpfr_set_emin");
  __pyx_self = __pyx_self;
  assert(__pyx_arg_exp); {
    __pyx_v_exp = __Pyx_PyInt_from_py_mp_exp_t(__pyx_arg_exp); if (unlikely((__pyx_v_exp == (mpfr_exp_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2437; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_set_emin");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "mpfr.pyx":2450
 * 
 *     """
 *     error_code = cmpfr.mpfr_set_emin(exp)             # <<<<<<<<<<<<<<
 *     if error_code:
 *         raise ValueError("new exponent for emin is outside allowable range")
 */
  __pyx_v_error_code = mpfr_set_emin(__pyx_v_exp);

  /* "mpfr.pyx":2451
 *     """
 *     error_code = cmpfr.mpfr_set_emin(exp)
 *     if error_code:             # <<<<<<<<<<<<<<
 *         raise ValueError("new exponent for emin is outside allowable range")
 * 
 */
  if (__pyx_v_error_code) {

    /* "mpfr.pyx":2452
 *     error_code = cmpfr.mpfr_set_emin(exp)
 *     if error_code:
 *         raise ValueError("new exponent for emin is outside allowable range")             # <<<<<<<<<<<<<<
 * 
 * def mpfr_set_emax(cmpfr.mpfr_exp_t exp):
 */
    __pyx_t_1 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_16), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_set_emin");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2454
 *         raise ValueError("new exponent for emin is outside allowable range")
 * 
 * def mpfr_set_emax(cmpfr.mpfr_exp_t exp):             # <<<<<<<<<<<<<<
 *     """
 *     Set the largest exponent allowed for a floating-point variable.
 */

static PyObject *__pyx_pf_4mpfr_149mpfr_set_emax(PyObject *__pyx_self, PyObject *__pyx_arg_exp); /*proto*/
static char __pyx_doc_4mpfr_149mpfr_set_emax[] = "mpfr_set_emax(mpfr_exp_t exp)\n\n    Set the largest exponent allowed for a floating-point variable.\n\n    Raises ValueError when exp is not in the range accepted by the\n    implementation (in that case the largest exponent is not changed).\n\n    If the user changes the exponent range, it is her/his responsibility to\n    check that all current floating-point variables are in the new allowed\n    range (for example using mpfr_check_range), otherwise the subsequent\n    behavior will be undefined, in the sense of the ISO C standard.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_149mpfr_set_emax = {__Pyx_NAMESTR("mpfr_set_emax"), (PyCFunction)__pyx_pf_4mpfr_149mpfr_set_emax, METH_O, __Pyx_DOCSTR(__pyx_doc_4mpfr_149mpfr_set_emax)};
static PyObject *__pyx_pf_4mpfr_149mpfr_set_emax(PyObject *__pyx_self, PyObject *__pyx_arg_exp) {
  mpfr_exp_t __pyx_v_exp;
  int __pyx_v_error_code;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("mpfr_set_emax");
  __pyx_self = __pyx_self;
  assert(__pyx_arg_exp); {
    __pyx_v_exp = __Pyx_PyInt_from_py_mp_exp_t(__pyx_arg_exp); if (unlikely((__pyx_v_exp == (mpfr_exp_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2454; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_set_emax");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "mpfr.pyx":2467
 * 
 *     """
 *     error_code = cmpfr.mpfr_set_emax(exp)             # <<<<<<<<<<<<<<
 *     if error_code:
 *         raise ValueError("new exponent for emin is outside allowable range")
 */
  __pyx_v_error_code = mpfr_set_emax(__pyx_v_exp);

  /* "mpfr.pyx":2468
 *     """
 *     error_code = cmpfr.mpfr_set_emax(exp)
 *     if error_code:             # <<<<<<<<<<<<<<
 *         raise ValueError("new exponent for emin is outside allowable range")
 * 
 */
  if (__pyx_v_error_code) {

    /* "mpfr.pyx":2469
 *     error_code = cmpfr.mpfr_set_emax(exp)
 *     if error_code:
 *         raise ValueError("new exponent for emin is outside allowable range")             # <<<<<<<<<<<<<<
 * 
 * def mpfr_get_emin_min():
 */
    __pyx_t_1 = PyObject_Call(__pyx_builtin_ValueError, ((PyObject *)__pyx_k_tuple_17), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_set_emax");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2471
 *         raise ValueError("new exponent for emin is outside allowable range")
 * 
 * def mpfr_get_emin_min():             # <<<<<<<<<<<<<<
 *     """
 *     Return the minimum exponent allowed for mpfr_set_emin.
 */

static PyObject *__pyx_pf_4mpfr_150mpfr_get_emin_min(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_150mpfr_get_emin_min[] = "mpfr_get_emin_min()\n\n    Return the minimum exponent allowed for mpfr_set_emin.\n\n    This value is implementation dependent, thus a program using\n    mpfr_set_emin(mpfr_get_emin_min()) may not be portable.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_150mpfr_get_emin_min = {__Pyx_NAMESTR("mpfr_get_emin_min"), (PyCFunction)__pyx_pf_4mpfr_150mpfr_get_emin_min, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_150mpfr_get_emin_min)};
static PyObject *__pyx_pf_4mpfr_150mpfr_get_emin_min(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("mpfr_get_emin_min");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2479
 * 
 *     """
 *     return cmpfr.mpfr_get_emin_min()             # <<<<<<<<<<<<<<
 * 
 * def mpfr_get_emin_max():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_mp_exp_t(mpfr_get_emin_min()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_get_emin_min");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2481
 *     return cmpfr.mpfr_get_emin_min()
 * 
 * def mpfr_get_emin_max():             # <<<<<<<<<<<<<<
 *     """
 *     Return the maximum exponent allowed for mpfr_set_emin.
 */

static PyObject *__pyx_pf_4mpfr_151mpfr_get_emin_max(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_151mpfr_get_emin_max[] = "mpfr_get_emin_max()\n\n    Return the maximum exponent allowed for mpfr_set_emin.\n\n    This value is implementation dependent, thus a program using\n    mpfr_set_emin(mpfr_get_emin_max()) may not be portable.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_151mpfr_get_emin_max = {__Pyx_NAMESTR("mpfr_get_emin_max"), (PyCFunction)__pyx_pf_4mpfr_151mpfr_get_emin_max, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_151mpfr_get_emin_max)};
static PyObject *__pyx_pf_4mpfr_151mpfr_get_emin_max(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("mpfr_get_emin_max");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2489
 * 
 *     """
 *     return cmpfr.mpfr_get_emin_max()             # <<<<<<<<<<<<<<
 * 
 * def mpfr_get_emax_min():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_mp_exp_t(mpfr_get_emin_max()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2489; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_get_emin_max");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2491
 *     return cmpfr.mpfr_get_emin_max()
 * 
 * def mpfr_get_emax_min():             # <<<<<<<<<<<<<<
 *     """
 *     Return the minimum exponent allowed for mpfr_set_emax.
 */

static PyObject *__pyx_pf_4mpfr_152mpfr_get_emax_min(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_152mpfr_get_emax_min[] = "mpfr_get_emax_min()\n\n    Return the minimum exponent allowed for mpfr_set_emax.\n\n    This value is implementation dependent, thus a program using\n    mpfr_set_emax(mpfr_get_emax_min()) may not be portable.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_152mpfr_get_emax_min = {__Pyx_NAMESTR("mpfr_get_emax_min"), (PyCFunction)__pyx_pf_4mpfr_152mpfr_get_emax_min, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_152mpfr_get_emax_min)};
static PyObject *__pyx_pf_4mpfr_152mpfr_get_emax_min(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("mpfr_get_emax_min");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2499
 * 
 *     """
 *     return cmpfr.mpfr_get_emax_min()             # <<<<<<<<<<<<<<
 * 
 * def mpfr_get_emax_max():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_mp_exp_t(mpfr_get_emax_min()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_get_emax_min");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2501
 *     return cmpfr.mpfr_get_emax_min()
 * 
 * def mpfr_get_emax_max():             # <<<<<<<<<<<<<<
 *     """
 *     Return the maximum exponent allowed for mpfr_set_emax.
 */

static PyObject *__pyx_pf_4mpfr_153mpfr_get_emax_max(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_153mpfr_get_emax_max[] = "mpfr_get_emax_max()\n\n    Return the maximum exponent allowed for mpfr_set_emax.\n\n    This value is implementation dependent, thus a program using\n    mpfr_set_emax(mpfr_get_emax_max()) may not be portable.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_153mpfr_get_emax_max = {__Pyx_NAMESTR("mpfr_get_emax_max"), (PyCFunction)__pyx_pf_4mpfr_153mpfr_get_emax_max, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_153mpfr_get_emax_max)};
static PyObject *__pyx_pf_4mpfr_153mpfr_get_emax_max(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("mpfr_get_emax_max");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2509
 * 
 *     """
 *     return cmpfr.mpfr_get_emax_max()             # <<<<<<<<<<<<<<
 * 
 * def mpfr_check_range(Mpfr_t x not None, int t, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_to_py_mp_exp_t(mpfr_get_emax_max()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2509; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_get_emax_max");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2511
 *     return cmpfr.mpfr_get_emax_max()
 * 
 * def mpfr_check_range(Mpfr_t x not None, int t, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Modify x if necessary to fit into the current exponent range.
 */

static PyObject *__pyx_pf_4mpfr_154mpfr_check_range(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_154mpfr_check_range[] = "mpfr_check_range(Mpfr_t x, int t, mpfr_rnd_t rnd)\n\n    Modify x if necessary to fit into the current exponent range.\n\n    This function assumes that x is the correctly-rounded value of some real\n    value y in the direction rnd and some extended exponent range, and that t\n    is the corresponding ternary value. For example, one performed t = mpfr_log\n    (x, u, rnd), and y is the exact logarithm of u. Thus t is negative if x is\n    smaller than y, positive if x is larger than y, and zero if x equals\n    y. This function modifies x if needed to be in the current range of\n    acceptable values: It generates an underflow or an overflow if the exponent\n    of x is outside the current allowed range; the value of t may be used to\n    avoid a double rounding. This function returns zero if the new value of x\n    equals the exact one y, a positive value if that new value is larger than\n    y, and a negative value if it is smaller than y. Note that unlike most\n    functions, the new result x is compared to the (unknown) exact one y, not\n    the input value x, i.e., the ternary value is propagated.\n\n    Note: If x is an infinity and t is different from zero (i.e., if the\n    rounded result is an inexact infinity), then the overflow flag is set. This\n    is useful because mpfr_check_range is typically called (at least in MPFR\n    functions) after restoring the flags that could have been set due to\n    internal computations.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_154mpfr_check_range = {__Pyx_NAMESTR("mpfr_check_range"), (PyCFunction)__pyx_pf_4mpfr_154mpfr_check_range, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_154mpfr_check_range)};
static PyObject *__pyx_pf_4mpfr_154mpfr_check_range(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_x = 0;
  int __pyx_v_t;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__t,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_check_range");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__t);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_check_range", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2511; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_check_range", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2511; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_check_range") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2511; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_t = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_t == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2511; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2511; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_t = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_t == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2511; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2511; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_check_range", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2511; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_check_range");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_4mpfr_Mpfr_t, 0, "x", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2536
 * 
 *     """
 *     check_initialized(x)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_check_range(&x._value, t, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_x);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2537
 *     """
 *     check_initialized(x)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_check_range(&x._value, t, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2537; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2538
 *     check_initialized(x)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_check_range(&x._value, t, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_subnormalize(Mpfr_t x not None, int t, cmpfr.mpfr_rnd_t rnd):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_check_range((&__pyx_v_x->_value), __pyx_v_t, __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2538; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_check_range");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2540
 *     return cmpfr.mpfr_check_range(&x._value, t, rnd)
 * 
 * def mpfr_subnormalize(Mpfr_t x not None, int t, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Modify x if necessary to account for subnormalization.
 */

static PyObject *__pyx_pf_4mpfr_155mpfr_subnormalize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4mpfr_155mpfr_subnormalize[] = "mpfr_subnormalize(Mpfr_t x, int t, mpfr_rnd_t rnd)\n\n    Modify x if necessary to account for subnormalization.\n\n    This function rounds x emulating subnormal number arithmetic: if x is\n    outside the subnormal exponent range, it just propagates the ternary value\n    t; otherwise, it rounds x to precision EXP(x)-emin+1 according to rounding\n    mode rnd and previous ternary value t, avoiding double rounding\n    problems. More precisely in the subnormal domain, denoting by e the value\n    of emin, x is rounded in fixed-point arithmetic to an integer multiple of\n    two to the power e\342\210\2221; as a consequence, 1.5 multiplied by two to the power\n    e\342\210\2221 when t is zero is rounded to two to the power e with rounding to\n    nearest.\n\n    PREC(x) is not modified by this function. rnd and t must be the rounding\n    mode and the returned ternary value used when computing x (as in\n    mpfr_check_range). The subnormal exponent range is from emin to\n    emin+PREC(x)-1. If the result cannot be represented in the current exponent\n    range (due to a too small emax), the behavior is undefined. Note that\n    unlike most functions, the result is compared to the exact one, not the\n    input value x, i.e., the ternary value is propagated.\n\n    As usual, if the returned ternary value is non zero, the inexact flag is\n    set. Moreover, if a second rounding occurred (because the input x was in\n    the subnormal range), the underflow flag is set.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_155mpfr_subnormalize = {__Pyx_NAMESTR("mpfr_subnormalize"), (PyCFunction)__pyx_pf_4mpfr_155mpfr_subnormalize, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_4mpfr_155mpfr_subnormalize)};
static PyObject *__pyx_pf_4mpfr_155mpfr_subnormalize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_4mpfr_Mpfr_t *__pyx_v_x = 0;
  int __pyx_v_t;
  mpfr_rnd_t __pyx_v_rnd;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__x,&__pyx_n_s__t,&__pyx_n_s__rnd,0};
  __Pyx_RefNannySetupContext("mpfr_subnormalize");
  __pyx_self = __pyx_self;
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__x);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__t);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_subnormalize", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2540; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__rnd);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("mpfr_subnormalize", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2540; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "mpfr_subnormalize") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2540; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)values[0]);
    __pyx_v_t = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_t == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2540; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd = PyInt_AsLong(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2540; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_x = ((struct __pyx_obj_4mpfr_Mpfr_t *)PyTuple_GET_ITEM(__pyx_args, 0));
    __pyx_v_t = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_t == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2540; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_rnd = PyInt_AsLong(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2540; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mpfr_subnormalize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2540; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("mpfr.mpfr_subnormalize");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_x), __pyx_ptype_4mpfr_Mpfr_t, 0, "x", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2567
 * 
 *     """
 *     check_initialized(x)             # <<<<<<<<<<<<<<
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_subnormalize(&x._value, t, rnd)
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_x);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_f_4mpfr_check_initialized(((struct __pyx_obj_4mpfr_Mpfr_t *)__pyx_t_1)); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2567; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2568
 *     """
 *     check_initialized(x)
 *     check_rounding_mode(rnd)             # <<<<<<<<<<<<<<
 *     return cmpfr.mpfr_subnormalize(&x._value, t, rnd)
 * 
 */
  __pyx_t_2 = __pyx_f_4mpfr_check_rounding_mode(__pyx_v_rnd); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2568; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "mpfr.pyx":2569
 *     check_initialized(x)
 *     check_rounding_mode(rnd)
 *     return cmpfr.mpfr_subnormalize(&x._value, t, rnd)             # <<<<<<<<<<<<<<
 * 
 * def mpfr_clear_underflow():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_subnormalize((&__pyx_v_x->_value), __pyx_v_t, __pyx_v_rnd)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2569; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_subnormalize");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2571
 *     return cmpfr.mpfr_subnormalize(&x._value, t, rnd)
 * 
 * def mpfr_clear_underflow():             # <<<<<<<<<<<<<<
 *     """
 *     Clear the underflow flag.
 */

static PyObject *__pyx_pf_4mpfr_156mpfr_clear_underflow(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_156mpfr_clear_underflow[] = "mpfr_clear_underflow()\n\n    Clear the underflow flag.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_156mpfr_clear_underflow = {__Pyx_NAMESTR("mpfr_clear_underflow"), (PyCFunction)__pyx_pf_4mpfr_156mpfr_clear_underflow, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_156mpfr_clear_underflow)};
static PyObject *__pyx_pf_4mpfr_156mpfr_clear_underflow(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("mpfr_clear_underflow");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2576
 * 
 *     """
 *     cmpfr.mpfr_clear_underflow()             # <<<<<<<<<<<<<<
 * 
 * def mpfr_clear_overflow():
 */
  mpfr_clear_underflow();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2578
 *     cmpfr.mpfr_clear_underflow()
 * 
 * def mpfr_clear_overflow():             # <<<<<<<<<<<<<<
 *     """
 *     Clear the overflow flag.
 */

static PyObject *__pyx_pf_4mpfr_157mpfr_clear_overflow(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_157mpfr_clear_overflow[] = "mpfr_clear_overflow()\n\n    Clear the overflow flag.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_157mpfr_clear_overflow = {__Pyx_NAMESTR("mpfr_clear_overflow"), (PyCFunction)__pyx_pf_4mpfr_157mpfr_clear_overflow, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_157mpfr_clear_overflow)};
static PyObject *__pyx_pf_4mpfr_157mpfr_clear_overflow(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("mpfr_clear_overflow");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2583
 * 
 *     """
 *     cmpfr.mpfr_clear_overflow()             # <<<<<<<<<<<<<<
 * 
 * def mpfr_clear_nanflag():
 */
  mpfr_clear_overflow();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2585
 *     cmpfr.mpfr_clear_overflow()
 * 
 * def mpfr_clear_nanflag():             # <<<<<<<<<<<<<<
 *     """
 *     Clear the invalid flag.
 */

static PyObject *__pyx_pf_4mpfr_158mpfr_clear_nanflag(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_158mpfr_clear_nanflag[] = "mpfr_clear_nanflag()\n\n    Clear the invalid flag.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_158mpfr_clear_nanflag = {__Pyx_NAMESTR("mpfr_clear_nanflag"), (PyCFunction)__pyx_pf_4mpfr_158mpfr_clear_nanflag, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_158mpfr_clear_nanflag)};
static PyObject *__pyx_pf_4mpfr_158mpfr_clear_nanflag(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("mpfr_clear_nanflag");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2590
 * 
 *     """
 *     cmpfr.mpfr_clear_nanflag()             # <<<<<<<<<<<<<<
 * 
 * def mpfr_clear_inexflag():
 */
  mpfr_clear_nanflag();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2592
 *     cmpfr.mpfr_clear_nanflag()
 * 
 * def mpfr_clear_inexflag():             # <<<<<<<<<<<<<<
 *     """
 *     Clear the inexact flag.
 */

static PyObject *__pyx_pf_4mpfr_159mpfr_clear_inexflag(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_159mpfr_clear_inexflag[] = "mpfr_clear_inexflag()\n\n    Clear the inexact flag.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_159mpfr_clear_inexflag = {__Pyx_NAMESTR("mpfr_clear_inexflag"), (PyCFunction)__pyx_pf_4mpfr_159mpfr_clear_inexflag, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_159mpfr_clear_inexflag)};
static PyObject *__pyx_pf_4mpfr_159mpfr_clear_inexflag(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("mpfr_clear_inexflag");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2597
 * 
 *     """
 *     cmpfr.mpfr_clear_inexflag()             # <<<<<<<<<<<<<<
 * 
 * def mpfr_clear_erangeflag():
 */
  mpfr_clear_inexflag();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2599
 *     cmpfr.mpfr_clear_inexflag()
 * 
 * def mpfr_clear_erangeflag():             # <<<<<<<<<<<<<<
 *     """
 *     Clear the erange flag.
 */

static PyObject *__pyx_pf_4mpfr_160mpfr_clear_erangeflag(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_160mpfr_clear_erangeflag[] = "mpfr_clear_erangeflag()\n\n    Clear the erange flag.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_160mpfr_clear_erangeflag = {__Pyx_NAMESTR("mpfr_clear_erangeflag"), (PyCFunction)__pyx_pf_4mpfr_160mpfr_clear_erangeflag, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_160mpfr_clear_erangeflag)};
static PyObject *__pyx_pf_4mpfr_160mpfr_clear_erangeflag(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("mpfr_clear_erangeflag");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2604
 * 
 *     """
 *     cmpfr.mpfr_clear_erangeflag()             # <<<<<<<<<<<<<<
 * 
 * def mpfr_set_underflow():
 */
  mpfr_clear_erangeflag();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2606
 *     cmpfr.mpfr_clear_erangeflag()
 * 
 * def mpfr_set_underflow():             # <<<<<<<<<<<<<<
 *     """
 *     Set the underflow flag.
 */

static PyObject *__pyx_pf_4mpfr_161mpfr_set_underflow(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_161mpfr_set_underflow[] = "mpfr_set_underflow()\n\n    Set the underflow flag.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_161mpfr_set_underflow = {__Pyx_NAMESTR("mpfr_set_underflow"), (PyCFunction)__pyx_pf_4mpfr_161mpfr_set_underflow, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_161mpfr_set_underflow)};
static PyObject *__pyx_pf_4mpfr_161mpfr_set_underflow(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("mpfr_set_underflow");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2611
 * 
 *     """
 *     cmpfr.mpfr_set_underflow()             # <<<<<<<<<<<<<<
 * 
 * def mpfr_set_overflow():
 */
  mpfr_set_underflow();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2613
 *     cmpfr.mpfr_set_underflow()
 * 
 * def mpfr_set_overflow():             # <<<<<<<<<<<<<<
 *     """
 *     Set the overflow flag.
 */

static PyObject *__pyx_pf_4mpfr_162mpfr_set_overflow(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_162mpfr_set_overflow[] = "mpfr_set_overflow()\n\n    Set the overflow flag.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_162mpfr_set_overflow = {__Pyx_NAMESTR("mpfr_set_overflow"), (PyCFunction)__pyx_pf_4mpfr_162mpfr_set_overflow, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_162mpfr_set_overflow)};
static PyObject *__pyx_pf_4mpfr_162mpfr_set_overflow(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("mpfr_set_overflow");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2618
 * 
 *     """
 *     cmpfr.mpfr_set_overflow()             # <<<<<<<<<<<<<<
 * 
 * def mpfr_set_nanflag():
 */
  mpfr_set_overflow();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2620
 *     cmpfr.mpfr_set_overflow()
 * 
 * def mpfr_set_nanflag():             # <<<<<<<<<<<<<<
 *     """
 *     Set the invalid flag.
 */

static PyObject *__pyx_pf_4mpfr_163mpfr_set_nanflag(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_163mpfr_set_nanflag[] = "mpfr_set_nanflag()\n\n    Set the invalid flag.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_163mpfr_set_nanflag = {__Pyx_NAMESTR("mpfr_set_nanflag"), (PyCFunction)__pyx_pf_4mpfr_163mpfr_set_nanflag, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_163mpfr_set_nanflag)};
static PyObject *__pyx_pf_4mpfr_163mpfr_set_nanflag(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("mpfr_set_nanflag");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2625
 * 
 *     """
 *     cmpfr.mpfr_set_nanflag()             # <<<<<<<<<<<<<<
 * 
 * def mpfr_set_inexflag():
 */
  mpfr_set_nanflag();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2627
 *     cmpfr.mpfr_set_nanflag()
 * 
 * def mpfr_set_inexflag():             # <<<<<<<<<<<<<<
 *     """
 *     Set the inexact flag.
 */

static PyObject *__pyx_pf_4mpfr_164mpfr_set_inexflag(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_164mpfr_set_inexflag[] = "mpfr_set_inexflag()\n\n    Set the inexact flag.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_164mpfr_set_inexflag = {__Pyx_NAMESTR("mpfr_set_inexflag"), (PyCFunction)__pyx_pf_4mpfr_164mpfr_set_inexflag, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_164mpfr_set_inexflag)};
static PyObject *__pyx_pf_4mpfr_164mpfr_set_inexflag(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("mpfr_set_inexflag");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2632
 * 
 *     """
 *     cmpfr.mpfr_set_inexflag()             # <<<<<<<<<<<<<<
 * 
 * def mpfr_set_erangeflag():
 */
  mpfr_set_inexflag();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2634
 *     cmpfr.mpfr_set_inexflag()
 * 
 * def mpfr_set_erangeflag():             # <<<<<<<<<<<<<<
 *     """
 *     Set the erange flag.
 */

static PyObject *__pyx_pf_4mpfr_165mpfr_set_erangeflag(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_165mpfr_set_erangeflag[] = "mpfr_set_erangeflag()\n\n    Set the erange flag.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_165mpfr_set_erangeflag = {__Pyx_NAMESTR("mpfr_set_erangeflag"), (PyCFunction)__pyx_pf_4mpfr_165mpfr_set_erangeflag, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_165mpfr_set_erangeflag)};
static PyObject *__pyx_pf_4mpfr_165mpfr_set_erangeflag(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("mpfr_set_erangeflag");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2639
 * 
 *     """
 *     cmpfr.mpfr_set_erangeflag()             # <<<<<<<<<<<<<<
 * 
 * def mpfr_clear_flags():
 */
  mpfr_set_erangeflag();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2641
 *     cmpfr.mpfr_set_erangeflag()
 * 
 * def mpfr_clear_flags():             # <<<<<<<<<<<<<<
 *     """
 *     Clear all global flags.
 */

static PyObject *__pyx_pf_4mpfr_166mpfr_clear_flags(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_166mpfr_clear_flags[] = "mpfr_clear_flags()\n\n    Clear all global flags.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_166mpfr_clear_flags = {__Pyx_NAMESTR("mpfr_clear_flags"), (PyCFunction)__pyx_pf_4mpfr_166mpfr_clear_flags, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_166mpfr_clear_flags)};
static PyObject *__pyx_pf_4mpfr_166mpfr_clear_flags(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("mpfr_clear_flags");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2646
 * 
 *     """
 *     cmpfr.mpfr_clear_flags()             # <<<<<<<<<<<<<<
 * 
 * def mpfr_underflow_p():
 */
  mpfr_clear_flags();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2648
 *     cmpfr.mpfr_clear_flags()
 * 
 * def mpfr_underflow_p():             # <<<<<<<<<<<<<<
 *     """
 *     Return True if the underflow flag is set, else False.
 */

static PyObject *__pyx_pf_4mpfr_167mpfr_underflow_p(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_167mpfr_underflow_p[] = "mpfr_underflow_p()\n\n    Return True if the underflow flag is set, else False.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_167mpfr_underflow_p = {__Pyx_NAMESTR("mpfr_underflow_p"), (PyCFunction)__pyx_pf_4mpfr_167mpfr_underflow_p, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_167mpfr_underflow_p)};
static PyObject *__pyx_pf_4mpfr_167mpfr_underflow_p(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("mpfr_underflow_p");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2653
 * 
 *     """
 *     return bool(cmpfr.mpfr_underflow_p())             # <<<<<<<<<<<<<<
 * 
 * def mpfr_overflow_p():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_underflow_p()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_2))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_underflow_p");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2655
 *     return bool(cmpfr.mpfr_underflow_p())
 * 
 * def mpfr_overflow_p():             # <<<<<<<<<<<<<<
 *     """
 *     Return True if the overflow flag is set, else False.
 */

static PyObject *__pyx_pf_4mpfr_168mpfr_overflow_p(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_168mpfr_overflow_p[] = "mpfr_overflow_p()\n\n    Return True if the overflow flag is set, else False.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_168mpfr_overflow_p = {__Pyx_NAMESTR("mpfr_overflow_p"), (PyCFunction)__pyx_pf_4mpfr_168mpfr_overflow_p, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_168mpfr_overflow_p)};
static PyObject *__pyx_pf_4mpfr_168mpfr_overflow_p(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("mpfr_overflow_p");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2660
 * 
 *     """
 *     return bool(cmpfr.mpfr_overflow_p())             # <<<<<<<<<<<<<<
 * 
 * def mpfr_nanflag_p():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_overflow_p()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_2))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2660; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_overflow_p");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2662
 *     return bool(cmpfr.mpfr_overflow_p())
 * 
 * def mpfr_nanflag_p():             # <<<<<<<<<<<<<<
 *     """
 *     Return True if the invalid flag is set, else False.
 */

static PyObject *__pyx_pf_4mpfr_169mpfr_nanflag_p(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_169mpfr_nanflag_p[] = "mpfr_nanflag_p()\n\n    Return True if the invalid flag is set, else False.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_169mpfr_nanflag_p = {__Pyx_NAMESTR("mpfr_nanflag_p"), (PyCFunction)__pyx_pf_4mpfr_169mpfr_nanflag_p, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_169mpfr_nanflag_p)};
static PyObject *__pyx_pf_4mpfr_169mpfr_nanflag_p(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("mpfr_nanflag_p");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2667
 * 
 *     """
 *     return bool(cmpfr.mpfr_nanflag_p())             # <<<<<<<<<<<<<<
 * 
 * def mpfr_inexflag_p():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_nanflag_p()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_2))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2667; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_nanflag_p");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2669
 *     return bool(cmpfr.mpfr_nanflag_p())
 * 
 * def mpfr_inexflag_p():             # <<<<<<<<<<<<<<
 *     """
 *     Return True if the inexact flag is set, else False.
 */

static PyObject *__pyx_pf_4mpfr_170mpfr_inexflag_p(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_170mpfr_inexflag_p[] = "mpfr_inexflag_p()\n\n    Return True if the inexact flag is set, else False.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_170mpfr_inexflag_p = {__Pyx_NAMESTR("mpfr_inexflag_p"), (PyCFunction)__pyx_pf_4mpfr_170mpfr_inexflag_p, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_170mpfr_inexflag_p)};
static PyObject *__pyx_pf_4mpfr_170mpfr_inexflag_p(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("mpfr_inexflag_p");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2674
 * 
 *     """
 *     return bool(cmpfr.mpfr_inexflag_p())             # <<<<<<<<<<<<<<
 * 
 * def mpfr_erangeflag_p():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_inexflag_p()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_2))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2674; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_inexflag_p");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "mpfr.pyx":2676
 *     return bool(cmpfr.mpfr_inexflag_p())
 * 
 * def mpfr_erangeflag_p():             # <<<<<<<<<<<<<<
 *     """
 *     Return True if the erange flag is set, else False.
 */

static PyObject *__pyx_pf_4mpfr_171mpfr_erangeflag_p(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4mpfr_171mpfr_erangeflag_p[] = "mpfr_erangeflag_p()\n\n    Return True if the erange flag is set, else False.\n\n    ";
static PyMethodDef __pyx_mdef_4mpfr_171mpfr_erangeflag_p = {__Pyx_NAMESTR("mpfr_erangeflag_p"), (PyCFunction)__pyx_pf_4mpfr_171mpfr_erangeflag_p, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_4mpfr_171mpfr_erangeflag_p)};
static PyObject *__pyx_pf_4mpfr_171mpfr_erangeflag_p(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("mpfr_erangeflag_p");
  __pyx_self = __pyx_self;

  /* "mpfr.pyx":2681
 * 
 *     """
 *     return bool(cmpfr.mpfr_erangeflag_p())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(mpfr_erangeflag_p()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(!__pyx_t_2))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("mpfr.mpfr_erangeflag_p");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_4mpfr_Mpfr_t(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_4mpfr_Mpfr_t(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_4mpfr_6Mpfr_t___dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4mpfr_Mpfr_t[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Mpfr_t = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Mpfr_t = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Mpfr_t = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Mpfr_t = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

static PyTypeObject __pyx_type_4mpfr_Mpfr_t = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("mpfr.Mpfr_t"), /*tp_name*/
  sizeof(struct __pyx_obj_4mpfr_Mpfr_t), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4mpfr_Mpfr_t, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Mpfr_t, /*tp_as_number*/
  &__pyx_tp_as_sequence_Mpfr_t, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Mpfr_t, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Mpfr_t, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("\n    Mutable arbitrary-precision binary floating-point numbers.\n\n    Mpfr_t() -> new, uninitialized Mpfr object\n\n    Mpfr_t() creates a new, uninitialized Mpfr_t object.  This object must be\n    initialized before use, for example by using the mpfr_init2 function.\n    However, unlike the underlying MPFR library, it's not necessary to clear\n    the object when it's no longer used.\n\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4mpfr_Mpfr_t, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4mpfr_Mpfr_t, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("mpfr"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 0},
  {&__pyx_kp_s_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 0, 1, 0},
  {&__pyx_kp_s_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 0, 1, 0},
  {&__pyx_kp_s_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 0, 1, 0},
  {&__pyx_kp_s_15, __pyx_k_15, sizeof(__pyx_k_15), 0, 0, 1, 0},
  {&__pyx_n_s_18, __pyx_k_18, sizeof(__pyx_k_18), 0, 0, 1, 1},
  {&__pyx_n_s_19, __pyx_k_19, sizeof(__pyx_k_19), 0, 0, 1, 1},
  {&__pyx_kp_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 0},
  {&__pyx_n_s_20, __pyx_k_20, sizeof(__pyx_k_20), 0, 0, 1, 1},
  {&__pyx_n_s_21, __pyx_k_21, sizeof(__pyx_k_21), 0, 0, 1, 1},
  {&__pyx_n_s_22, __pyx_k_22, sizeof(__pyx_k_22), 0, 0, 1, 1},
  {&__pyx_n_s_23, __pyx_k_23, sizeof(__pyx_k_23), 0, 0, 1, 1},
  {&__pyx_n_s_24, __pyx_k_24, sizeof(__pyx_k_24), 0, 0, 1, 1},
  {&__pyx_n_s_25, __pyx_k_25, sizeof(__pyx_k_25), 0, 0, 1, 1},
  {&__pyx_kp_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 0},
  {&__pyx_kp_s_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 1, 0},
  {&__pyx_kp_s_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 0, 1, 0},
  {&__pyx_kp_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 0},
  {&__pyx_n_s__MPFR_EMAX_DEFAULT, __pyx_k__MPFR_EMAX_DEFAULT, sizeof(__pyx_k__MPFR_EMAX_DEFAULT), 0, 0, 1, 1},
  {&__pyx_n_s__MPFR_EMIN_DEFAULT, __pyx_k__MPFR_EMIN_DEFAULT, sizeof(__pyx_k__MPFR_EMIN_DEFAULT), 0, 0, 1, 1},
  {&__pyx_n_s__MPFR_PREC_MAX, __pyx_k__MPFR_PREC_MAX, sizeof(__pyx_k__MPFR_PREC_MAX), 0, 0, 1, 1},
  {&__pyx_n_s__MPFR_PREC_MIN, __pyx_k__MPFR_PREC_MIN, sizeof(__pyx_k__MPFR_PREC_MIN), 0, 0, 1, 1},
  {&__pyx_n_s__MPFR_RNDA, __pyx_k__MPFR_RNDA, sizeof(__pyx_k__MPFR_RNDA), 0, 0, 1, 1},
  {&__pyx_n_s__MPFR_RNDD, __pyx_k__MPFR_RNDD, sizeof(__pyx_k__MPFR_RNDD), 0, 0, 1, 1},
  {&__pyx_n_s__MPFR_RNDN, __pyx_k__MPFR_RNDN, sizeof(__pyx_k__MPFR_RNDN), 0, 0, 1, 1},
  {&__pyx_n_s__MPFR_RNDU, __pyx_k__MPFR_RNDU, sizeof(__pyx_k__MPFR_RNDU), 0, 0, 1, 1},
  {&__pyx_n_s__MPFR_RNDZ, __pyx_k__MPFR_RNDZ, sizeof(__pyx_k__MPFR_RNDZ), 0, 0, 1, 1},
  {&__pyx_n_s__MPFR_VERSION, __pyx_k__MPFR_VERSION, sizeof(__pyx_k__MPFR_VERSION), 0, 0, 1, 1},
  {&__pyx_n_s__MPFR_VERSION_MAJOR, __pyx_k__MPFR_VERSION_MAJOR, sizeof(__pyx_k__MPFR_VERSION_MAJOR), 0, 0, 1, 1},
  {&__pyx_n_s__MPFR_VERSION_MINOR, __pyx_k__MPFR_VERSION_MINOR, sizeof(__pyx_k__MPFR_VERSION_MINOR), 0, 0, 1, 1},
  {&__pyx_n_s__MPFR_VERSION_NUM, __pyx_k__MPFR_VERSION_NUM, sizeof(__pyx_k__MPFR_VERSION_NUM), 0, 0, 1, 1},
  {&__pyx_n_s__MPFR_VERSION_STRING, __pyx_k__MPFR_VERSION_STRING, sizeof(__pyx_k__MPFR_VERSION_STRING), 0, 0, 1, 1},
  {&__pyx_n_s__RuntimeError, __pyx_k__RuntimeError, sizeof(__pyx_k__RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s__ValueError, __pyx_k__ValueError, sizeof(__pyx_k__ValueError), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s___mpfr_d, __pyx_k___mpfr_d, sizeof(__pyx_k___mpfr_d), 0, 0, 1, 1},
  {&__pyx_n_s___value, __pyx_k___value, sizeof(__pyx_k___value), 0, 0, 1, 1},
  {&__pyx_n_s__b, __pyx_k__b, sizeof(__pyx_k__b), 0, 0, 1, 1},
  {&__pyx_n_s__base, __pyx_k__base, sizeof(__pyx_k__base), 0, 0, 1, 1},
  {&__pyx_n_s__cop, __pyx_k__cop, sizeof(__pyx_k__cop), 0, 0, 1, 1},
  {&__pyx_n_s__e, __pyx_k__e, sizeof(__pyx_k__e), 0, 0, 1, 1},
  {&__pyx_n_s__err, __pyx_k__err, sizeof(__pyx_k__err), 0, 0, 1, 1},
  {&__pyx_n_s__exp, __pyx_k__exp, sizeof(__pyx_k__exp), 0, 0, 1, 1},
  {&__pyx_n_s__fop, __pyx_k__fop, sizeof(__pyx_k__fop), 0, 0, 1, 1},
  {&__pyx_n_s__format, __pyx_k__format, sizeof(__pyx_k__format), 0, 0, 1, 1},
  {&__pyx_n_s__iop, __pyx_k__iop, sizeof(__pyx_k__iop), 0, 0, 1, 1},
  {&__pyx_n_s__k, __pyx_k__k, sizeof(__pyx_k__k), 0, 0, 1, 1},
  {&__pyx_n_s__major, __pyx_k__major, sizeof(__pyx_k__major), 0, 0, 1, 1},
  {&__pyx_n_s__minor, __pyx_k__minor, sizeof(__pyx_k__minor), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr, __pyx_k__mpfr, sizeof(__pyx_k__mpfr), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_abs, __pyx_k__mpfr_abs, sizeof(__pyx_k__mpfr_abs), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_acos, __pyx_k__mpfr_acos, sizeof(__pyx_k__mpfr_acos), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_acosh, __pyx_k__mpfr_acosh, sizeof(__pyx_k__mpfr_acosh), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_add, __pyx_k__mpfr_add, sizeof(__pyx_k__mpfr_add), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_agm, __pyx_k__mpfr_agm, sizeof(__pyx_k__mpfr_agm), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_ai, __pyx_k__mpfr_ai, sizeof(__pyx_k__mpfr_ai), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_asin, __pyx_k__mpfr_asin, sizeof(__pyx_k__mpfr_asin), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_asinh, __pyx_k__mpfr_asinh, sizeof(__pyx_k__mpfr_asinh), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_atan, __pyx_k__mpfr_atan, sizeof(__pyx_k__mpfr_atan), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_atan2, __pyx_k__mpfr_atan2, sizeof(__pyx_k__mpfr_atan2), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_atanh, __pyx_k__mpfr_atanh, sizeof(__pyx_k__mpfr_atanh), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_buildopt_tls_p, __pyx_k__mpfr_buildopt_tls_p, sizeof(__pyx_k__mpfr_buildopt_tls_p), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_can_round, __pyx_k__mpfr_can_round, sizeof(__pyx_k__mpfr_can_round), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_cbrt, __pyx_k__mpfr_cbrt, sizeof(__pyx_k__mpfr_cbrt), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_ceil, __pyx_k__mpfr_ceil, sizeof(__pyx_k__mpfr_ceil), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_check_range, __pyx_k__mpfr_check_range, sizeof(__pyx_k__mpfr_check_range), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_clear, __pyx_k__mpfr_clear, sizeof(__pyx_k__mpfr_clear), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_clear_flags, __pyx_k__mpfr_clear_flags, sizeof(__pyx_k__mpfr_clear_flags), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_clear_inexflag, __pyx_k__mpfr_clear_inexflag, sizeof(__pyx_k__mpfr_clear_inexflag), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_clear_nanflag, __pyx_k__mpfr_clear_nanflag, sizeof(__pyx_k__mpfr_clear_nanflag), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_clear_overflow, __pyx_k__mpfr_clear_overflow, sizeof(__pyx_k__mpfr_clear_overflow), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_clears, __pyx_k__mpfr_clears, sizeof(__pyx_k__mpfr_clears), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_cmp, __pyx_k__mpfr_cmp, sizeof(__pyx_k__mpfr_cmp), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_cmpabs, __pyx_k__mpfr_cmpabs, sizeof(__pyx_k__mpfr_cmpabs), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_const_catalan, __pyx_k__mpfr_const_catalan, sizeof(__pyx_k__mpfr_const_catalan), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_const_euler, __pyx_k__mpfr_const_euler, sizeof(__pyx_k__mpfr_const_euler), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_const_log2, __pyx_k__mpfr_const_log2, sizeof(__pyx_k__mpfr_const_log2), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_const_pi, __pyx_k__mpfr_const_pi, sizeof(__pyx_k__mpfr_const_pi), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_copysign, __pyx_k__mpfr_copysign, sizeof(__pyx_k__mpfr_copysign), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_cos, __pyx_k__mpfr_cos, sizeof(__pyx_k__mpfr_cos), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_cosh, __pyx_k__mpfr_cosh, sizeof(__pyx_k__mpfr_cosh), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_cot, __pyx_k__mpfr_cot, sizeof(__pyx_k__mpfr_cot), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_coth, __pyx_k__mpfr_coth, sizeof(__pyx_k__mpfr_coth), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_csc, __pyx_k__mpfr_csc, sizeof(__pyx_k__mpfr_csc), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_csch, __pyx_k__mpfr_csch, sizeof(__pyx_k__mpfr_csch), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_digamma, __pyx_k__mpfr_digamma, sizeof(__pyx_k__mpfr_digamma), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_dim, __pyx_k__mpfr_dim, sizeof(__pyx_k__mpfr_dim), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_div, __pyx_k__mpfr_div, sizeof(__pyx_k__mpfr_div), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_eint, __pyx_k__mpfr_eint, sizeof(__pyx_k__mpfr_eint), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_equal_p, __pyx_k__mpfr_equal_p, sizeof(__pyx_k__mpfr_equal_p), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_erangeflag_p, __pyx_k__mpfr_erangeflag_p, sizeof(__pyx_k__mpfr_erangeflag_p), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_erf, __pyx_k__mpfr_erf, sizeof(__pyx_k__mpfr_erf), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_erfc, __pyx_k__mpfr_erfc, sizeof(__pyx_k__mpfr_erfc), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_exp, __pyx_k__mpfr_exp, sizeof(__pyx_k__mpfr_exp), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_exp10, __pyx_k__mpfr_exp10, sizeof(__pyx_k__mpfr_exp10), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_exp2, __pyx_k__mpfr_exp2, sizeof(__pyx_k__mpfr_exp2), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_expm1, __pyx_k__mpfr_expm1, sizeof(__pyx_k__mpfr_expm1), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_fac_ui, __pyx_k__mpfr_fac_ui, sizeof(__pyx_k__mpfr_fac_ui), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_fits_slong_p, __pyx_k__mpfr_fits_slong_p, sizeof(__pyx_k__mpfr_fits_slong_p), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_floor, __pyx_k__mpfr_floor, sizeof(__pyx_k__mpfr_floor), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_fma, __pyx_k__mpfr_fma, sizeof(__pyx_k__mpfr_fma), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_fmod, __pyx_k__mpfr_fmod, sizeof(__pyx_k__mpfr_fmod), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_fms, __pyx_k__mpfr_fms, sizeof(__pyx_k__mpfr_fms), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_frac, __pyx_k__mpfr_frac, sizeof(__pyx_k__mpfr_frac), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_free_cache, __pyx_k__mpfr_free_cache, sizeof(__pyx_k__mpfr_free_cache), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_gamma, __pyx_k__mpfr_gamma, sizeof(__pyx_k__mpfr_gamma), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_get_d, __pyx_k__mpfr_get_d, sizeof(__pyx_k__mpfr_get_d), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_get_d_2exp, __pyx_k__mpfr_get_d_2exp, sizeof(__pyx_k__mpfr_get_d_2exp), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_get_emax, __pyx_k__mpfr_get_emax, sizeof(__pyx_k__mpfr_get_emax), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_get_emax_max, __pyx_k__mpfr_get_emax_max, sizeof(__pyx_k__mpfr_get_emax_max), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_get_emax_min, __pyx_k__mpfr_get_emax_min, sizeof(__pyx_k__mpfr_get_emax_min), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_get_emin, __pyx_k__mpfr_get_emin, sizeof(__pyx_k__mpfr_get_emin), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_get_emin_max, __pyx_k__mpfr_get_emin_max, sizeof(__pyx_k__mpfr_get_emin_max), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_get_emin_min, __pyx_k__mpfr_get_emin_min, sizeof(__pyx_k__mpfr_get_emin_min), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_get_exp, __pyx_k__mpfr_get_exp, sizeof(__pyx_k__mpfr_get_exp), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_get_patches, __pyx_k__mpfr_get_patches, sizeof(__pyx_k__mpfr_get_patches), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_get_prec, __pyx_k__mpfr_get_prec, sizeof(__pyx_k__mpfr_get_prec), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_get_si, __pyx_k__mpfr_get_si, sizeof(__pyx_k__mpfr_get_si), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_get_str, __pyx_k__mpfr_get_str, sizeof(__pyx_k__mpfr_get_str), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_get_version, __pyx_k__mpfr_get_version, sizeof(__pyx_k__mpfr_get_version), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_greater_p, __pyx_k__mpfr_greater_p, sizeof(__pyx_k__mpfr_greater_p), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_greaterequal_p, __pyx_k__mpfr_greaterequal_p, sizeof(__pyx_k__mpfr_greaterequal_p), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_hypot, __pyx_k__mpfr_hypot, sizeof(__pyx_k__mpfr_hypot), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_inexflag_p, __pyx_k__mpfr_inexflag_p, sizeof(__pyx_k__mpfr_inexflag_p), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_inf_p, __pyx_k__mpfr_inf_p, sizeof(__pyx_k__mpfr_inf_p), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_init, __pyx_k__mpfr_init, sizeof(__pyx_k__mpfr_init), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_init2, __pyx_k__mpfr_init2, sizeof(__pyx_k__mpfr_init2), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_initialized_p, __pyx_k__mpfr_initialized_p, sizeof(__pyx_k__mpfr_initialized_p), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_inits, __pyx_k__mpfr_inits, sizeof(__pyx_k__mpfr_inits), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_inits2, __pyx_k__mpfr_inits2, sizeof(__pyx_k__mpfr_inits2), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_integer_p, __pyx_k__mpfr_integer_p, sizeof(__pyx_k__mpfr_integer_p), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_j0, __pyx_k__mpfr_j0, sizeof(__pyx_k__mpfr_j0), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_j1, __pyx_k__mpfr_j1, sizeof(__pyx_k__mpfr_j1), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_jn, __pyx_k__mpfr_jn, sizeof(__pyx_k__mpfr_jn), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_less_p, __pyx_k__mpfr_less_p, sizeof(__pyx_k__mpfr_less_p), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_lessequal_p, __pyx_k__mpfr_lessequal_p, sizeof(__pyx_k__mpfr_lessequal_p), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_lessgreater_p, __pyx_k__mpfr_lessgreater_p, sizeof(__pyx_k__mpfr_lessgreater_p), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_lgamma, __pyx_k__mpfr_lgamma, sizeof(__pyx_k__mpfr_lgamma), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_li2, __pyx_k__mpfr_li2, sizeof(__pyx_k__mpfr_li2), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_lngamma, __pyx_k__mpfr_lngamma, sizeof(__pyx_k__mpfr_lngamma), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_log, __pyx_k__mpfr_log, sizeof(__pyx_k__mpfr_log), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_log10, __pyx_k__mpfr_log10, sizeof(__pyx_k__mpfr_log10), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_log1p, __pyx_k__mpfr_log1p, sizeof(__pyx_k__mpfr_log1p), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_log2, __pyx_k__mpfr_log2, sizeof(__pyx_k__mpfr_log2), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_max, __pyx_k__mpfr_max, sizeof(__pyx_k__mpfr_max), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_min, __pyx_k__mpfr_min, sizeof(__pyx_k__mpfr_min), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_min_prec, __pyx_k__mpfr_min_prec, sizeof(__pyx_k__mpfr_min_prec), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_modf, __pyx_k__mpfr_modf, sizeof(__pyx_k__mpfr_modf), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_mul, __pyx_k__mpfr_mul, sizeof(__pyx_k__mpfr_mul), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_nan_p, __pyx_k__mpfr_nan_p, sizeof(__pyx_k__mpfr_nan_p), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_nanflag_p, __pyx_k__mpfr_nanflag_p, sizeof(__pyx_k__mpfr_nanflag_p), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_neg, __pyx_k__mpfr_neg, sizeof(__pyx_k__mpfr_neg), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_nextabove, __pyx_k__mpfr_nextabove, sizeof(__pyx_k__mpfr_nextabove), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_nextbelow, __pyx_k__mpfr_nextbelow, sizeof(__pyx_k__mpfr_nextbelow), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_nexttoward, __pyx_k__mpfr_nexttoward, sizeof(__pyx_k__mpfr_nexttoward), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_number_p, __pyx_k__mpfr_number_p, sizeof(__pyx_k__mpfr_number_p), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_overflow_p, __pyx_k__mpfr_overflow_p, sizeof(__pyx_k__mpfr_overflow_p), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_pow, __pyx_k__mpfr_pow, sizeof(__pyx_k__mpfr_pow), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_prec_round, __pyx_k__mpfr_prec_round, sizeof(__pyx_k__mpfr_prec_round), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_print_rnd_mode, __pyx_k__mpfr_print_rnd_mode, sizeof(__pyx_k__mpfr_print_rnd_mode), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_rec_sqrt, __pyx_k__mpfr_rec_sqrt, sizeof(__pyx_k__mpfr_rec_sqrt), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_regular_p, __pyx_k__mpfr_regular_p, sizeof(__pyx_k__mpfr_regular_p), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_remainder, __pyx_k__mpfr_remainder, sizeof(__pyx_k__mpfr_remainder), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_remquo, __pyx_k__mpfr_remquo, sizeof(__pyx_k__mpfr_remquo), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_rint, __pyx_k__mpfr_rint, sizeof(__pyx_k__mpfr_rint), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_rint_ceil, __pyx_k__mpfr_rint_ceil, sizeof(__pyx_k__mpfr_rint_ceil), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_rint_floor, __pyx_k__mpfr_rint_floor, sizeof(__pyx_k__mpfr_rint_floor), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_rint_round, __pyx_k__mpfr_rint_round, sizeof(__pyx_k__mpfr_rint_round), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_rint_trunc, __pyx_k__mpfr_rint_trunc, sizeof(__pyx_k__mpfr_rint_trunc), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_root, __pyx_k__mpfr_root, sizeof(__pyx_k__mpfr_root), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_round, __pyx_k__mpfr_round, sizeof(__pyx_k__mpfr_round), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_sec, __pyx_k__mpfr_sec, sizeof(__pyx_k__mpfr_sec), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_sech, __pyx_k__mpfr_sech, sizeof(__pyx_k__mpfr_sech), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_set, __pyx_k__mpfr_set, sizeof(__pyx_k__mpfr_set), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_set_d, __pyx_k__mpfr_set_d, sizeof(__pyx_k__mpfr_set_d), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_set_emax, __pyx_k__mpfr_set_emax, sizeof(__pyx_k__mpfr_set_emax), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_set_emin, __pyx_k__mpfr_set_emin, sizeof(__pyx_k__mpfr_set_emin), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_set_erangeflag, __pyx_k__mpfr_set_erangeflag, sizeof(__pyx_k__mpfr_set_erangeflag), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_set_exp, __pyx_k__mpfr_set_exp, sizeof(__pyx_k__mpfr_set_exp), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_set_inexflag, __pyx_k__mpfr_set_inexflag, sizeof(__pyx_k__mpfr_set_inexflag), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_set_inf, __pyx_k__mpfr_set_inf, sizeof(__pyx_k__mpfr_set_inf), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_set_nan, __pyx_k__mpfr_set_nan, sizeof(__pyx_k__mpfr_set_nan), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_set_nanflag, __pyx_k__mpfr_set_nanflag, sizeof(__pyx_k__mpfr_set_nanflag), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_set_overflow, __pyx_k__mpfr_set_overflow, sizeof(__pyx_k__mpfr_set_overflow), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_set_prec, __pyx_k__mpfr_set_prec, sizeof(__pyx_k__mpfr_set_prec), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_set_si, __pyx_k__mpfr_set_si, sizeof(__pyx_k__mpfr_set_si), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_set_si_2exp, __pyx_k__mpfr_set_si_2exp, sizeof(__pyx_k__mpfr_set_si_2exp), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_set_str, __pyx_k__mpfr_set_str, sizeof(__pyx_k__mpfr_set_str), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_set_underflow, __pyx_k__mpfr_set_underflow, sizeof(__pyx_k__mpfr_set_underflow), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_set_zero, __pyx_k__mpfr_set_zero, sizeof(__pyx_k__mpfr_set_zero), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_setsign, __pyx_k__mpfr_setsign, sizeof(__pyx_k__mpfr_setsign), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_sgn, __pyx_k__mpfr_sgn, sizeof(__pyx_k__mpfr_sgn), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_signbit, __pyx_k__mpfr_signbit, sizeof(__pyx_k__mpfr_signbit), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_sin, __pyx_k__mpfr_sin, sizeof(__pyx_k__mpfr_sin), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_sin_cos, __pyx_k__mpfr_sin_cos, sizeof(__pyx_k__mpfr_sin_cos), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_sinh, __pyx_k__mpfr_sinh, sizeof(__pyx_k__mpfr_sinh), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_sinh_cosh, __pyx_k__mpfr_sinh_cosh, sizeof(__pyx_k__mpfr_sinh_cosh), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_sqr, __pyx_k__mpfr_sqr, sizeof(__pyx_k__mpfr_sqr), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_sqrt, __pyx_k__mpfr_sqrt, sizeof(__pyx_k__mpfr_sqrt), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_strtofr, __pyx_k__mpfr_strtofr, sizeof(__pyx_k__mpfr_strtofr), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_sub, __pyx_k__mpfr_sub, sizeof(__pyx_k__mpfr_sub), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_subnormalize, __pyx_k__mpfr_subnormalize, sizeof(__pyx_k__mpfr_subnormalize), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_swap, __pyx_k__mpfr_swap, sizeof(__pyx_k__mpfr_swap), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_tan, __pyx_k__mpfr_tan, sizeof(__pyx_k__mpfr_tan), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_tanh, __pyx_k__mpfr_tanh, sizeof(__pyx_k__mpfr_tanh), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_trunc, __pyx_k__mpfr_trunc, sizeof(__pyx_k__mpfr_trunc), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_underflow_p, __pyx_k__mpfr_underflow_p, sizeof(__pyx_k__mpfr_underflow_p), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_unordered_p, __pyx_k__mpfr_unordered_p, sizeof(__pyx_k__mpfr_unordered_p), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_y0, __pyx_k__mpfr_y0, sizeof(__pyx_k__mpfr_y0), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_y1, __pyx_k__mpfr_y1, sizeof(__pyx_k__mpfr_y1), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_yn, __pyx_k__mpfr_yn, sizeof(__pyx_k__mpfr_yn), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_zero_p, __pyx_k__mpfr_zero_p, sizeof(__pyx_k__mpfr_zero_p), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_zeta, __pyx_k__mpfr_zeta, sizeof(__pyx_k__mpfr_zeta), 0, 0, 1, 1},
  {&__pyx_n_s__mpfr_zeta_ui, __pyx_k__mpfr_zeta_ui, sizeof(__pyx_k__mpfr_zeta_ui), 0, 0, 1, 1},
  {&__pyx_n_s__n, __pyx_k__n, sizeof(__pyx_k__n), 0, 0, 1, 1},
  {&__pyx_n_s__op, __pyx_k__op, sizeof(__pyx_k__op), 0, 0, 1, 1},
  {&__pyx_n_s__op1, __pyx_k__op1, sizeof(__pyx_k__op1), 0, 0, 1, 1},
  {&__pyx_n_s__op2, __pyx_k__op2, sizeof(__pyx_k__op2), 0, 0, 1, 1},
  {&__pyx_n_s__op3, __pyx_k__op3, sizeof(__pyx_k__op3), 0, 0, 1, 1},
  {&__pyx_n_s__patchlevel, __pyx_k__patchlevel, sizeof(__pyx_k__patchlevel), 0, 0, 1, 1},
  {&__pyx_n_s__prec, __pyx_k__prec, sizeof(__pyx_k__prec), 0, 0, 1, 1},
  {&__pyx_n_s__r, __pyx_k__r, sizeof(__pyx_k__r), 0, 0, 1, 1},
  {&__pyx_n_s__rnd, __pyx_k__rnd, sizeof(__pyx_k__rnd), 0, 0, 1, 1},
  {&__pyx_n_s__rnd1, __pyx_k__rnd1, sizeof(__pyx_k__rnd1), 0, 0, 1, 1},
  {&__pyx_n_s__rnd2, __pyx_k__rnd2, sizeof(__pyx_k__rnd2), 0, 0, 1, 1},
  {&__pyx_n_s__rop, __pyx_k__rop, sizeof(__pyx_k__rop), 0, 0, 1, 1},
  {&__pyx_n_s__s, __pyx_k__s, sizeof(__pyx_k__s), 0, 0, 1, 1},
  {&__pyx_n_s__sign, __pyx_k__sign, sizeof(__pyx_k__sign), 0, 0, 1, 1},
  {&__pyx_n_s__sop, __pyx_k__sop, sizeof(__pyx_k__sop), 0, 0, 1, 1},
  {&__pyx_n_s__split, __pyx_k__split, sizeof(__pyx_k__split), 0, 0, 1, 1},
  {&__pyx_n_s__t, __pyx_k__t, sizeof(__pyx_k__t), 0, 0, 1, 1},
  {&__pyx_n_s__x, __pyx_k__x, sizeof(__pyx_k__x), 0, 0, 1, 1},
  {&__pyx_n_s__y, __pyx_k__y, sizeof(__pyx_k__y), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetName(__pyx_b, __pyx_n_s__ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetName(__pyx_b, __pyx_n_s__RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants");

  /* "mpfr.pyx":74
 *             return 0
 *         else:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 "base should be zero or in the range 2 to 62 (inclusive)"
 *             )
 */
  __pyx_k_tuple_3 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_3));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_2));
  PyTuple_SET_ITEM(__pyx_k_tuple_3, 0, ((PyObject *)__pyx_kp_s_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_3));

  /* "mpfr.pyx":81
 *             return 0
 *         else:
 *             raise ValueError("base should be in the range 2 to 62 (inclusive)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_k_tuple_5 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_5));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
  PyTuple_SET_ITEM(__pyx_k_tuple_5, 0, ((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_5));

  /* "mpfr.pyx":94
 *         return 0
 *     else:
 *         raise ValueError("n should be either 0 or at least 2")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_k_tuple_7 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_7));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_6));
  PyTuple_SET_ITEM(__pyx_k_tuple_7, 0, ((PyObject *)__pyx_kp_s_6));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_6));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_7));

  /* "mpfr.pyx":641
 *     c_digits = cmpfr.mpfr_get_str(NULL, &exp, b, n, &op._value, rnd)
 *     if c_digits == NULL:
 *         raise RuntimeError("Error during string conversion.")             # <<<<<<<<<<<<<<
 * 
 *     # It's possible for the conversion from c_digits to digits to raise, so use
 */
  __pyx_k_tuple_12 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_12));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_11));
  PyTuple_SET_ITEM(__pyx_k_tuple_12, 0, ((PyObject *)__pyx_kp_s_11));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_11));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_12));

  /* "mpfr.pyx":2311
 *     error_code = cmpfr.mpfr_set_exp(&op._value, exp)
 *     if error_code:
 *         raise ValueError("exponent not in current exponent range")             # <<<<<<<<<<<<<<
 * 
 * def mpfr_signbit(Mpfr_t op not None):
 */
  __pyx_k_tuple_14 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_14));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_13));
  PyTuple_SET_ITEM(__pyx_k_tuple_14, 0, ((PyObject *)__pyx_kp_s_13));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_13));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_14));

  /* "mpfr.pyx":2452
 *     error_code = cmpfr.mpfr_set_emin(exp)
 *     if error_code:
 *         raise ValueError("new exponent for emin is outside allowable range")             # <<<<<<<<<<<<<<
 * 
 * def mpfr_set_emax(cmpfr.mpfr_exp_t exp):
 */
  __pyx_k_tuple_16 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_16));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_15));
  PyTuple_SET_ITEM(__pyx_k_tuple_16, 0, ((PyObject *)__pyx_kp_s_15));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_15));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_16));

  /* "mpfr.pyx":2469
 *     error_code = cmpfr.mpfr_set_emax(exp)
 *     if error_code:
 *         raise ValueError("new exponent for emin is outside allowable range")             # <<<<<<<<<<<<<<
 * 
 * def mpfr_get_emin_min():
 */
  __pyx_k_tuple_17 = PyTuple_New(1); if (unlikely(!__pyx_k_tuple_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_k_tuple_17));
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_15));
  PyTuple_SET_ITEM(__pyx_k_tuple_17, 0, ((PyObject *)__pyx_kp_s_15));
  __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_15));
  __Pyx_GIVEREF(((PyObject *)__pyx_k_tuple_17));
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initmpfr(void); /*proto*/
PyMODINIT_FUNC initmpfr(void)
#else
PyMODINIT_FUNC PyInit_mpfr(void); /*proto*/
PyMODINIT_FUNC PyInit_mpfr(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  #if CYTHON_REFNANNY
  void* __pyx_refnanny = NULL;
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  __pyx_refnanny = __Pyx_RefNanny->SetupContext("PyMODINIT_FUNC PyInit_mpfr(void)", __LINE__, __FILE__);
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("mpfr"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_mpfr) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_4mpfr_Mpfr_t) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Mpfr_t", (PyObject *)&__pyx_type_4mpfr_Mpfr_t) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4mpfr_Mpfr_t = &__pyx_type_4mpfr_Mpfr_t;
  /*--- Type import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "mpfr.pyx":29
 * 
 * # Make precision limits available to Python
 * MPFR_PREC_MIN = cmpfr.MPFR_PREC_MIN             # <<<<<<<<<<<<<<
 * MPFR_PREC_MAX = cmpfr.MPFR_PREC_MAX
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_to_py_mpfr_prec_t(MPFR_PREC_MIN); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__MPFR_PREC_MIN, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":30
 * # Make precision limits available to Python
 * MPFR_PREC_MIN = cmpfr.MPFR_PREC_MIN
 * MPFR_PREC_MAX = cmpfr.MPFR_PREC_MAX             # <<<<<<<<<<<<<<
 * 
 * # Make rounding mode values available to Python
 */
  __pyx_t_1 = __Pyx_PyInt_to_py_mpfr_prec_t(MPFR_PREC_MAX); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__MPFR_PREC_MAX, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":33
 * 
 * # Make rounding mode values available to Python
 * MPFR_RNDN =  cmpfr.MPFR_RNDN             # <<<<<<<<<<<<<<
 * MPFR_RNDZ =  cmpfr.MPFR_RNDZ
 * MPFR_RNDU =  cmpfr.MPFR_RNDU
 */
  __pyx_t_1 = PyInt_FromLong(MPFR_RNDN); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__MPFR_RNDN, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":34
 * # Make rounding mode values available to Python
 * MPFR_RNDN =  cmpfr.MPFR_RNDN
 * MPFR_RNDZ =  cmpfr.MPFR_RNDZ             # <<<<<<<<<<<<<<
 * MPFR_RNDU =  cmpfr.MPFR_RNDU
 * MPFR_RNDD =  cmpfr.MPFR_RNDD
 */
  __pyx_t_1 = PyInt_FromLong(MPFR_RNDZ); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__MPFR_RNDZ, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":35
 * MPFR_RNDN =  cmpfr.MPFR_RNDN
 * MPFR_RNDZ =  cmpfr.MPFR_RNDZ
 * MPFR_RNDU =  cmpfr.MPFR_RNDU             # <<<<<<<<<<<<<<
 * MPFR_RNDD =  cmpfr.MPFR_RNDD
 * MPFR_RNDA =  cmpfr.MPFR_RNDA
 */
  __pyx_t_1 = PyInt_FromLong(MPFR_RNDU); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__MPFR_RNDU, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":36
 * MPFR_RNDZ =  cmpfr.MPFR_RNDZ
 * MPFR_RNDU =  cmpfr.MPFR_RNDU
 * MPFR_RNDD =  cmpfr.MPFR_RNDD             # <<<<<<<<<<<<<<
 * MPFR_RNDA =  cmpfr.MPFR_RNDA
 * 
 */
  __pyx_t_1 = PyInt_FromLong(MPFR_RNDD); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__MPFR_RNDD, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":37
 * MPFR_RNDU =  cmpfr.MPFR_RNDU
 * MPFR_RNDD =  cmpfr.MPFR_RNDD
 * MPFR_RNDA =  cmpfr.MPFR_RNDA             # <<<<<<<<<<<<<<
 * 
 * # Default values for Emax and Emin
 */
  __pyx_t_1 = PyInt_FromLong(MPFR_RNDA); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__MPFR_RNDA, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":40
 * 
 * # Default values for Emax and Emin
 * MPFR_EMAX_DEFAULT = cmpfr.MPFR_EMAX_DEFAULT             # <<<<<<<<<<<<<<
 * MPFR_EMIN_DEFAULT = cmpfr.MPFR_EMIN_DEFAULT
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_to_py_mp_exp_t(MPFR_EMAX_DEFAULT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__MPFR_EMAX_DEFAULT, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":41
 * # Default values for Emax and Emin
 * MPFR_EMAX_DEFAULT = cmpfr.MPFR_EMAX_DEFAULT
 * MPFR_EMIN_DEFAULT = cmpfr.MPFR_EMIN_DEFAULT             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_to_py_mp_exp_t(MPFR_EMIN_DEFAULT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__MPFR_EMIN_DEFAULT, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":195
 * ###############################################################################
 * 
 * def mpfr_initialized_p(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op has been initialized.  Return False otherwise.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_mpfr_initialized_p, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_initialized_p, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":207
 * ###############################################################################
 * 
 * def mpfr_init2(Mpfr_t x not None, cmpfr.mpfr_prec_t prec):             # <<<<<<<<<<<<<<
 *     """
 *     Initialize x, set its precision to be prec bits and its value to NaN.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_1mpfr_init2, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_init2, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":222
 *     cmpfr.mpfr_init2(&x._value, prec)
 * 
 * def mpfr_inits2(cmpfr.mpfr_prec_t prec, *args):             # <<<<<<<<<<<<<<
 *     """
 *     Initialize each of the variables in args: set its precision to prec bits
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_2mpfr_inits2, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_inits2, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":232
 *         mpfr_init2(arg, prec)
 * 
 * def mpfr_clear(Mpfr_t x not None):             # <<<<<<<<<<<<<<
 *     """
 *     Free the space occupied by the significand of x.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_3mpfr_clear, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_clear, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":243
 *     cmpfr.mpfr_clear(&x._value)
 * 
 * def mpfr_clears(*args):             # <<<<<<<<<<<<<<
 *     """
 *     Free the space occupied by each of the variables in args.  See mpfr_clear
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_4mpfr_clears, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_clears, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":252
 *         mpfr_clear(arg)
 * 
 * def mpfr_init(Mpfr_t x not None):             # <<<<<<<<<<<<<<
 *     """
 *     Initialize x, set its precision to the default precision, and set its value
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_5mpfr_init, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_init, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":265
 *     cmpfr.mpfr_init(&x._value)
 * 
 * def mpfr_inits(*args):             # <<<<<<<<<<<<<<
 *     """
 *     Initialize each of the variables in args: set its precision to the default
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_6mpfr_inits, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_inits, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":278
 *         mpfr_init(arg)
 * 
 * def mpfr_set_default_prec(cmpfr.mpfr_prec_t prec):             # <<<<<<<<<<<<<<
 *     """
 *     Set the default precision to be exactly prec bits.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_7mpfr_set_default_prec, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_18, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":292
 *     cmpfr.mpfr_set_default_prec(prec)
 * 
 * def mpfr_get_default_prec():             # <<<<<<<<<<<<<<
 *     """
 *     Return the current default MPFR precision in bits.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_8mpfr_get_default_prec, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_19, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":299
 *     return cmpfr.mpfr_get_default_prec()
 * 
 * def mpfr_set_prec(Mpfr_t x not None, cmpfr.mpfr_prec_t prec):             # <<<<<<<<<<<<<<
 *     """
 *     Reset precision of x.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_9mpfr_set_prec, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_set_prec, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":316
 *     cmpfr.mpfr_set_prec(&x._value, prec)
 * 
 * def mpfr_get_prec(Mpfr_t x not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return the precision of x
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_10mpfr_get_prec, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_get_prec, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":331
 * ###############################################################################
 * 
 * def mpfr_set(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop from op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_11mpfr_set, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_set, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":344
 *     return cmpfr.mpfr_set(&rop._value, &op._value, rnd)
 * 
 * def mpfr_set_si(Mpfr_t rop not None, long int op, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set the value of rop from a Python int, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_12mpfr_set_si, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_set_si, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":356
 *     return cmpfr.mpfr_set_si(&rop._value, op, rnd)
 * 
 * def mpfr_set_d(Mpfr_t rop not None, double op, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set the value of rop from a Python float op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_13mpfr_set_d, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_set_d, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":375
 *     return cmpfr.mpfr_set_d(&rop._value, op, rnd)
 * 
 * def mpfr_set_si_2exp(Mpfr_t rop not None, long int op,             # <<<<<<<<<<<<<<
 *                      cmpfr.mpfr_exp_t e, cmpfr.mpfr_rnd_t rnd):
 *     """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_14mpfr_set_si_2exp, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_set_si_2exp, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":388
 *     return cmpfr.mpfr_set_si_2exp(&rop._value, op, e, rnd)
 * 
 * def mpfr_set_str(Mpfr_t rop not None, bytes s, int base, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop from a string s.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_15mpfr_set_str, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_set_str, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":408
 *     return cmpfr.mpfr_set_str(&rop._value, s, base, rnd)
 * 
 * def mpfr_strtofr(Mpfr_t rop not None, bytes s, int base, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Read a floating-point number from a string.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_16mpfr_strtofr, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_strtofr, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":486
 *     return ternary, endindex
 * 
 * def mpfr_set_nan(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """ Set x to a NaN.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_17mpfr_set_nan, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_set_nan, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":496
 *     cmpfr.mpfr_set_nan(&op._value)
 * 
 * def mpfr_set_inf(Mpfr_t op not None, int sign):             # <<<<<<<<<<<<<<
 *     """ Set x to an infinity.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_18mpfr_set_inf, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_set_inf, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":510
 *     cmpfr.mpfr_set_inf(&op._value, sign)
 * 
 * def mpfr_set_zero(Mpfr_t op not None, int sign):             # <<<<<<<<<<<<<<
 *     """ Set x to a zero.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_19mpfr_set_zero, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_set_zero, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":524
 *     cmpfr.mpfr_set_zero(&op._value, sign)
 * 
 * def mpfr_swap(Mpfr_t x not None, Mpfr_t y not None):             # <<<<<<<<<<<<<<
 *     """
 *     Swap the values of x and y efficiently.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_20mpfr_swap, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_swap, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":542
 * ###############################################################################
 * 
 * def mpfr_get_d(Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Convert op to a Python float.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_21mpfr_get_d, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_get_d, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":557
 *     return cmpfr.mpfr_get_d(&op._value, rnd)
 * 
 * def mpfr_get_si(Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Convert op to a Python int.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_22mpfr_get_si, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_get_si, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 557; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":572
 *     return cmpfr.mpfr_get_si(&op._value, rnd)
 * 
 * def mpfr_get_d_2exp(Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Convert op to a Python float and an exponent.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_23mpfr_get_d_2exp, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_get_d_2exp, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 572; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":593
 *     return d, exp
 * 
 * def mpfr_get_str(int b, size_t n, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Compute a base 'b' string representation for 'op'.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_24mpfr_get_str, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_get_str, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 593; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":652
 *     return digits, exp
 * 
 * def mpfr_fits_slong_p(Mpfr_t x not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op would fit into a Python int.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_25mpfr_fits_slong_p, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_fits_slong_p, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":669
 * ###############################################################################
 * 
 * def mpfr_add(Mpfr_t rop not None, Mpfr_t op1 not None, Mpfr_t op2 not None,             # <<<<<<<<<<<<<<
 *              cmpfr.mpfr_rnd_t rnd):
 *     """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_26mpfr_add, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_add, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":681
 *     return cmpfr.mpfr_add(&rop._value, &op1._value, &op2._value, rnd)
 * 
 * def mpfr_sub(Mpfr_t rop not None, Mpfr_t op1 not None, Mpfr_t op2 not None,             # <<<<<<<<<<<<<<
 *              cmpfr.mpfr_rnd_t rnd):
 *     """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_27mpfr_sub, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_sub, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":693
 *     return cmpfr.mpfr_sub(&rop._value, &op1._value, &op2._value, rnd)
 * 
 * def mpfr_mul(Mpfr_t rop not None, Mpfr_t op1 not None, Mpfr_t op2 not None,             # <<<<<<<<<<<<<<
 *              cmpfr.mpfr_rnd_t rnd):
 *     """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_28mpfr_mul, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_mul, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 693; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":705
 *     return cmpfr.mpfr_mul(&rop._value, &op1._value, &op2._value, rnd)
 * 
 * def mpfr_sqr(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the square of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_29mpfr_sqr, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_sqr, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":715
 *     return cmpfr.mpfr_sqr(&rop._value, &op._value, rnd)
 * 
 * def mpfr_div(Mpfr_t rop not None, Mpfr_t op1 not None, Mpfr_t op2 not None,             # <<<<<<<<<<<<<<
 *              cmpfr.mpfr_rnd_t rnd):
 *     """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_30mpfr_div, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_div, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":727
 *     return cmpfr.mpfr_div(&rop._value, &op1._value, &op2._value, rnd)
 * 
 * def mpfr_sqrt(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the square root of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_31mpfr_sqrt, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_sqrt, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":740
 *     return cmpfr.mpfr_sqrt(&rop._value, &op._value, rnd)
 * 
 * def mpfr_rec_sqrt(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the reciprocal square root of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_32mpfr_rec_sqrt, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_rec_sqrt, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 740; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":752
 *     return cmpfr.mpfr_rec_sqrt(&rop._value, &op._value, rnd)
 * 
 * def mpfr_cbrt(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the cube root of op rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_33mpfr_cbrt, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_cbrt, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 752; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":765
 *     return cmpfr.mpfr_cbrt(&rop._value, &op._value, rnd)
 * 
 * def mpfr_root(Mpfr_t rop not None, Mpfr_t op not None,             # <<<<<<<<<<<<<<
 *               unsigned long int k, cmpfr.mpfr_rnd_t rnd):
 *     """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_34mpfr_root, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_root, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 765; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":780
 *     return cmpfr.mpfr_root(&rop._value, &op._value, k, rnd)
 * 
 * def mpfr_pow(Mpfr_t rop not None, Mpfr_t op1 not None, Mpfr_t op2 not None,             # <<<<<<<<<<<<<<
 *              cmpfr.mpfr_rnd_t rnd):
 *     """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_35mpfr_pow, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_pow, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 780; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":829
 *     return cmpfr.mpfr_pow(&rop._value, &op1._value, &op2._value, rnd)
 * 
 * def mpfr_neg(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to -op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_36mpfr_neg, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_neg, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":843
 *     return cmpfr.mpfr_neg(&rop._value, &op._value, rnd)
 * 
 * def mpfr_abs(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the absolute value of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_37mpfr_abs, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_abs, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":857
 *     return cmpfr.mpfr_abs(&rop._value, &op._value, rnd)
 * 
 * def mpfr_dim(Mpfr_t rop not None, Mpfr_t op1 not None, Mpfr_t op2 not None,             # <<<<<<<<<<<<<<
 *              cmpfr.mpfr_rnd_t rnd):
 *     """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_38mpfr_dim, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_dim, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 857; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":877
 * ###############################################################################
 * 
 * def mpfr_cmp(Mpfr_t op1 not None, Mpfr_t op2 not None):             # <<<<<<<<<<<<<<
 *     """
 *     Perform a three-way comparison of op1 and op2.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_39mpfr_cmp, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_cmp, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":897
 *     return cmpfr.mpfr_cmp(&op1._value, &op2._value)
 * 
 * def mpfr_cmpabs(Mpfr_t op1 not None, Mpfr_t op2 not None):             # <<<<<<<<<<<<<<
 *     """
 *     Compare the absolute values of op1 and op2.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_40mpfr_cmpabs, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_cmpabs, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 897; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":910
 *     return cmpfr.mpfr_cmpabs(&op1._value, &op2._value)
 * 
 * def mpfr_nan_p(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op is a NaN.  Return False otherwise.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_41mpfr_nan_p, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_nan_p, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 910; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":918
 *     return bool(cmpfr.mpfr_nan_p(&op._value))
 * 
 * def mpfr_inf_p(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op is an infinity.  Return False otherwise.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_42mpfr_inf_p, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_inf_p, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 918; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":926
 *     return bool(cmpfr.mpfr_inf_p(&op._value))
 * 
 * def mpfr_number_p(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op is an ordinary number.  Return False otherwise.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_43mpfr_number_p, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 926; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_number_p, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 926; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":936
 *     return bool(cmpfr.mpfr_number_p(&op._value))
 * 
 * def mpfr_zero_p(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op is zero.  Return False otherwise.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_44mpfr_zero_p, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_zero_p, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 936; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":944
 *     return bool(cmpfr.mpfr_zero_p(&op._value))
 * 
 * def mpfr_regular_p(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op is a regular number.  Return False otherwise.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_45mpfr_regular_p, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_regular_p, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 944; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":955
 *     return bool(cmpfr.mpfr_regular_p(&op._value))
 * 
 * def mpfr_sgn(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return the sign of op.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_46mpfr_sgn, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 955; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_sgn, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 955; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":967
 *     return cmpfr.mpfr_sgn(&op._value)
 * 
 * def mpfr_greater_p(Mpfr_t op1 not None, Mpfr_t op2 not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op1 > op2 and False otherwise.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_47mpfr_greater_p, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_greater_p, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 967; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":978
 *     return bool(cmpfr.mpfr_greater_p(&op1._value, &op2._value))
 * 
 * def mpfr_greaterequal_p(Mpfr_t op1 not None, Mpfr_t op2 not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op1 >= op2 and False otherwise.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_48mpfr_greaterequal_p, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_greaterequal_p, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 978; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":989
 *     return bool(cmpfr.mpfr_greaterequal_p(&op1._value, &op2._value))
 * 
 * def mpfr_less_p(Mpfr_t op1 not None, Mpfr_t op2 not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op1 < op2 and False otherwise.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_49mpfr_less_p, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_less_p, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1000
 *     return bool(cmpfr.mpfr_less_p(&op1._value, &op2._value))
 * 
 * def mpfr_lessequal_p(Mpfr_t op1 not None, Mpfr_t op2 not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op1 <= op2 and False otherwise.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_50mpfr_lessequal_p, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_lessequal_p, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1000; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1011
 *     return bool(cmpfr.mpfr_lessequal_p(&op1._value, &op2._value))
 * 
 * def mpfr_equal_p(Mpfr_t op1 not None, Mpfr_t op2 not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op1 == op2 and False otherwise.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_51mpfr_equal_p, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_equal_p, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1011; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1022
 *     return bool(cmpfr.mpfr_equal_p(&op1._value, &op2._value))
 * 
 * def mpfr_lessgreater_p(Mpfr_t op1 not None, Mpfr_t op2 not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op1 < op2 or op1 > op2 and False otherwise.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_52mpfr_lessgreater_p, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_lessgreater_p, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1022; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1033
 *     return bool(cmpfr.mpfr_lessgreater_p(&op1._value, &op2._value))
 * 
 * def mpfr_unordered_p(Mpfr_t op1 not None, Mpfr_t op2 not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op1 or op2 is a NaN and False otherwise.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_53mpfr_unordered_p, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1033; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_unordered_p, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1033; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1047
 * ###############################################################################
 * 
 * def mpfr_log(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the natural logarithm of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_54mpfr_log, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_log, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1057
 *     return cmpfr.mpfr_log(&rop._value, &op._value, rnd)
 * 
 * def mpfr_log2(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the base-two logarithm of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_55mpfr_log2, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_log2, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1067
 *     return cmpfr.mpfr_log2(&rop._value, &op._value, rnd)
 * 
 * def mpfr_log10(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the base-ten logarithm of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_56mpfr_log10, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_log10, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1077
 *     return cmpfr.mpfr_log10(&rop._value, &op._value, rnd)
 * 
 * def mpfr_exp(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the exponential of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_57mpfr_exp, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_exp, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1077; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1087
 *     return cmpfr.mpfr_exp(&rop._value, &op._value, rnd)
 * 
 * def mpfr_exp2(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to two raised to the power op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_58mpfr_exp2, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_exp2, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1087; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1097
 *     return cmpfr.mpfr_exp2(&rop._value, &op._value, rnd)
 * 
 * def mpfr_exp10(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to ten raised to the power op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_59mpfr_exp10, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1097; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_exp10, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1097; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1107
 *     return cmpfr.mpfr_exp10(&rop._value, &op._value, rnd)
 * 
 * def mpfr_cos(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the cosine of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_60mpfr_cos, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_cos, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1117
 *     return cmpfr.mpfr_cos(&rop._value, &op._value, rnd)
 * 
 * def mpfr_sin(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the sine of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_61mpfr_sin, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_sin, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1127
 *     return cmpfr.mpfr_sin(&rop._value, &op._value, rnd)
 * 
 * def mpfr_tan(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the tangent of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_62mpfr_tan, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_tan, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1137
 *     return cmpfr.mpfr_tan(&rop._value, &op._value, rnd)
 * 
 * def mpfr_sin_cos(Mpfr_t sop not None, Mpfr_t cop not None,             # <<<<<<<<<<<<<<
 *                  Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 *     """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_63mpfr_sin_cos, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_sin_cos, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1162
 *     return decode_ternary_pair(ternary_pair)
 * 
 * def mpfr_sec(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the secant of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_64mpfr_sec, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_sec, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1172
 *     return cmpfr.mpfr_sec(&rop._value, &op._value, rnd)
 * 
 * def mpfr_csc(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the cosecant of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_65mpfr_csc, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_csc, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1182
 *     return cmpfr.mpfr_csc(&rop._value, &op._value, rnd)
 * 
 * def mpfr_cot(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the cotangent of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_66mpfr_cot, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_cot, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1192
 *     return cmpfr.mpfr_cot(&rop._value, &op._value, rnd)
 * 
 * def mpfr_acos(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the arc-cosine of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_67mpfr_acos, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_acos, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1208
 *     return cmpfr.mpfr_acos(&rop._value, &op._value, rnd)
 * 
 * def mpfr_asin(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the arc-sine of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_68mpfr_asin, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_asin, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1224
 *     return cmpfr.mpfr_asin(&rop._value, &op._value, rnd)
 * 
 * def mpfr_atan(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the arc-tangent of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_69mpfr_atan, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_atan, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1240
 *     return cmpfr.mpfr_atan(&rop._value, &op._value, rnd)
 * 
 * def mpfr_atan2(Mpfr_t rop not None, Mpfr_t y not None,             # <<<<<<<<<<<<<<
 *                Mpfr_t x not None, cmpfr.mpfr_rnd_t rnd):
 *     """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_70mpfr_atan2, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_atan2, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1283
 *     return cmpfr.mpfr_atan2(&rop._value, &y._value, &x._value, rnd)
 * 
 * def mpfr_cosh(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the hyperbolic cosine of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_71mpfr_cosh, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_cosh, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1293
 *     return cmpfr.mpfr_cosh(&rop._value, &op._value, rnd)
 * 
 * def mpfr_sinh(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the hyperbolic sine of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_72mpfr_sinh, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_sinh, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1303
 *     return cmpfr.mpfr_sinh(&rop._value, &op._value, rnd)
 * 
 * def mpfr_tanh(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the hyperbolic tangent of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_73mpfr_tanh, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_tanh, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1313
 *     return cmpfr.mpfr_tanh(&rop._value, &op._value, rnd)
 * 
 * def mpfr_sinh_cosh(Mpfr_t sop not None, Mpfr_t cop not None,             # <<<<<<<<<<<<<<
 *                    Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 *     """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_74mpfr_sinh_cosh, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_sinh_cosh, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1338
 *     return decode_ternary_pair(ternary_pair)
 * 
 * def mpfr_sech(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the hyperbolic secant of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_75mpfr_sech, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_sech, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1348
 *     return cmpfr.mpfr_sech(&rop._value, &op._value, rnd)
 * 
 * def mpfr_csch(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the hyperbolic cosecant of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_76mpfr_csch, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_csch, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1358
 *     return cmpfr.mpfr_csch(&rop._value, &op._value, rnd)
 * 
 * def mpfr_coth(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the hyperbolic cotangent of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_77mpfr_coth, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_coth, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1368
 *     return cmpfr.mpfr_coth(&rop._value, &op._value, rnd)
 * 
 * def mpfr_acosh(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the inverse hyperbolic cosine of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_78mpfr_acosh, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_acosh, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1378
 *     return cmpfr.mpfr_acosh(&rop._value, &op._value, rnd)
 * 
 * def mpfr_asinh(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the inverse hyperbolic sine of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_79mpfr_asinh, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_asinh, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1388
 *     return cmpfr.mpfr_asinh(&rop._value, &op._value, rnd)
 * 
 * def mpfr_atanh(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the inverse hyperbolic tangent of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_80mpfr_atanh, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_atanh, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1388; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1398
 *     return cmpfr.mpfr_atanh(&rop._value, &op._value, rnd)
 * 
 * def mpfr_fac_ui(Mpfr_t rop not None, unsigned long int op, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the factorial of op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_81mpfr_fac_ui, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_fac_ui, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1407
 *     return cmpfr.mpfr_fac_ui(&rop._value, op, rnd)
 * 
 * def mpfr_log1p(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the logarithm of one plus op, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_82mpfr_log1p, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_log1p, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1417
 *     return cmpfr.mpfr_log1p(&rop._value, &op._value, rnd)
 * 
 * def mpfr_expm1(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the exponential of op followed by a subtraction by one, rounded
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_83mpfr_expm1, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_expm1, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1428
 *     return cmpfr.mpfr_expm1(&rop._value, &op._value, rnd)
 * 
 * def mpfr_eint(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the exponential integral of op, rounded in the direction
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_84mpfr_eint, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_eint, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1444
 *     return cmpfr.mpfr_eint(&rop._value, &op._value, rnd)
 * 
 * def mpfr_li2(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to real part of the dilogarithm of op, rounded in the direction
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_85mpfr_li2, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_li2, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1458
 *     return cmpfr.mpfr_li2(&rop._value, &op._value, rnd)
 * 
 * def mpfr_gamma(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the Gamma function on op, rounded in the direction
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_86mpfr_gamma, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_gamma, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1471
 *     return cmpfr.mpfr_gamma(&rop._value, &op._value, rnd)
 * 
 * def mpfr_lngamma(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the logarithm of the Gamma function on op, rounded
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_87mpfr_lngamma, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_lngamma, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1485
 *     return cmpfr.mpfr_lngamma(&rop._value, &op._value, rnd)
 * 
 * def mpfr_lgamma(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the logarithm of the absolute value of the Gamma
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_88mpfr_lgamma, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_lgamma, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1508
 *     return ternary, signp
 * 
 * def mpfr_digamma(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the Digamma (sometimes also called Psi) function on
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_89mpfr_digamma, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_digamma, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1521
 *     return cmpfr.mpfr_digamma(&rop._value, &op._value, rnd)
 * 
 * def mpfr_zeta(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the Riemann Zeta function on op, rounded in the
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_90mpfr_zeta, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_zeta, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1521; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1532
 *     return cmpfr.mpfr_zeta(&rop._value, &op._value, rnd)
 * 
 * def mpfr_zeta_ui(Mpfr_t rop not None, unsigned long int op, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the Riemann Zeta function on op, rounded in the
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_91mpfr_zeta_ui, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1532; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_zeta_ui, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1532; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1542
 *     return cmpfr.mpfr_zeta_ui(&rop._value, op, rnd)
 * 
 * def mpfr_erf(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the error function on op, rounded in the direction
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_92mpfr_erf, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_erf, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1542; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1553
 *     return cmpfr.mpfr_erf(&rop._value, &op._value, rnd)
 * 
 * def mpfr_erfc(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the the complementary error function on op, rounded
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_93mpfr_erfc, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1553; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_erfc, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1553; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1564
 *     return cmpfr.mpfr_erfc(&rop._value, &op._value, rnd)
 * 
 * def mpfr_j0(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the first kind Bessel function of order 0 on op,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_94mpfr_j0, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_j0, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1576
 *     return cmpfr.mpfr_j0(&rop._value, &op._value, rnd)
 * 
 * def mpfr_j1(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the first kind Bessel function of order 1, on op,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_95mpfr_j1, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_j1, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1589
 *     return cmpfr.mpfr_j1(&rop._value, &op._value, rnd)
 * 
 * def mpfr_jn(Mpfr_t rop not None, long int n, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the first kind Bessel function of order n on op,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_96mpfr_jn, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_jn, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1589; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1603
 *     return cmpfr.mpfr_jn(&rop._value, n, &op._value, rnd)
 * 
 * def mpfr_y0(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the second kind Bessel function of order 0 on op,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_97mpfr_y0, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_y0, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1603; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1618
 *     return cmpfr.mpfr_y0(&rop._value, &op._value, rnd)
 * 
 * def mpfr_y1(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the second kind Bessel function of order 1 on op,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_98mpfr_y1, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_y1, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1618; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1633
 *     return cmpfr.mpfr_y1(&rop._value, &op._value, rnd)
 * 
 * def mpfr_yn(Mpfr_t rop not None, long int n, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the second kind Bessel function of order n on op,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_99mpfr_yn, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_yn, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1646
 *     return cmpfr.mpfr_yn(&rop._value, n, &op._value, rnd)
 * 
 * def mpfr_fma(Mpfr_t rop not None,             # <<<<<<<<<<<<<<
 *              Mpfr_t op1 not None,
 *              Mpfr_t op2 not None,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_100mpfr_fma, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_fma, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1664
 *     )
 * 
 * def mpfr_fms(Mpfr_t rop not None,             # <<<<<<<<<<<<<<
 *              Mpfr_t op1 not None,
 *              Mpfr_t op2 not None,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_101mpfr_fms, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_fms, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1664; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1682
 *     )
 * 
 * def mpfr_agm(Mpfr_t rop not None,             # <<<<<<<<<<<<<<
 *              Mpfr_t op1 not None,
 *              Mpfr_t op2 not None,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_102mpfr_agm, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_agm, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1682; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1700
 *     return cmpfr.mpfr_agm(&rop._value, &op1._value, &op2._value, rnd)
 * 
 * def mpfr_hypot(Mpfr_t rop not None,             # <<<<<<<<<<<<<<
 *              Mpfr_t x not None,
 *              Mpfr_t y not None,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_103mpfr_hypot, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_hypot, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1718
 *     return cmpfr.mpfr_hypot(&rop._value, &x._value, &y._value, rnd)
 * 
 * def mpfr_ai(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the value of the Airy function Ai on x, rounded in the direction
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_104mpfr_ai, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_ai, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1735
 *     return cmpfr.mpfr_ai(&rop._value, &op._value, rnd)
 * 
 * def mpfr_const_log2(Mpfr_t rop not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to log(2), rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_105mpfr_const_log2, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_const_log2, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1748
 *     return cmpfr.mpfr_const_log2(&rop._value, rnd)
 * 
 * def mpfr_const_pi(Mpfr_t rop not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to Pi, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_106mpfr_const_pi, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_const_pi, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1748; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1761
 *     return cmpfr.mpfr_const_pi(&rop._value, rnd)
 * 
 * def mpfr_const_euler(Mpfr_t rop not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to Euler's constant, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_107mpfr_const_euler, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1761; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_const_euler, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1761; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1775
 *     return cmpfr.mpfr_const_euler(&rop._value, rnd)
 * 
 * def mpfr_const_catalan(Mpfr_t rop not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to Catalan's constant, rounded in the direction rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_108mpfr_const_catalan, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_const_catalan, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1789
 *     return cmpfr.mpfr_const_catalan(&rop._value, rnd)
 * 
 * def mpfr_free_cache():             # <<<<<<<<<<<<<<
 *     """
 *     Free internal MPFR caches.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_109mpfr_free_cache, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_free_cache, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1807
 * ###############################################################################
 * 
 * def mpfr_rint(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to op rounded to an integer in the direction given by rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_110mpfr_rint, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_rint, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1830
 *     return cmpfr.mpfr_rint(&rop._value, &op._value, rnd)
 * 
 * def mpfr_ceil(Mpfr_t rop not None, Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to op rounded to the next higher or equal representable integer.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_111mpfr_ceil, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_ceil, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1845
 *     return cmpfr.mpfr_ceil(&rop._value, &op._value)
 * 
 * def mpfr_floor(Mpfr_t rop not None, Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to op rounded to the next lower or equal representable integer.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_112mpfr_floor, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_floor, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1845; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1860
 *     return cmpfr.mpfr_floor(&rop._value, &op._value)
 * 
 * def mpfr_round(Mpfr_t rop not None, Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to op rounded to the nearest representable integer, rounding
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_113mpfr_round, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1860; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_round, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1860; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1885
 *     return cmpfr.mpfr_round(&rop._value, &op._value)
 * 
 * def mpfr_trunc(Mpfr_t rop not None, Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to op rounded to the next representable integer toward zero.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_114mpfr_trunc, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_trunc, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1885; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1900
 *     return cmpfr.mpfr_trunc(&rop._value, &op._value)
 * 
 * def mpfr_rint_ceil(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to op rounded to the next higher or equal integer.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_115mpfr_rint_ceil, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_rint_ceil, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1900; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1919
 *     return cmpfr.mpfr_rint_ceil(&rop._value, &op._value, rnd)
 * 
 * def mpfr_rint_floor(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to op rounded to the next lower or equal integer.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_116mpfr_rint_floor, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_rint_floor, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1919; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1938
 *     return cmpfr.mpfr_rint_floor(&rop._value, &op._value, rnd)
 * 
 * def mpfr_rint_round(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to op rounded to the nearest integer, rounding halfway cases
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_117mpfr_rint_round, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1938; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_rint_round, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1938; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1963
 *     return cmpfr.mpfr_rint_round(&rop._value, &op._value, rnd)
 * 
 * def mpfr_rint_trunc(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to op rounded to the next integer toward zero.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_118mpfr_rint_trunc, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1963; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_rint_trunc, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1963; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1982
 *     return cmpfr.mpfr_rint_trunc(&rop._value, &op._value, rnd)
 * 
 * def mpfr_frac(Mpfr_t rop not None, Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set rop to the fractional part of op, having the same sign as op, rounded
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_119mpfr_frac, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_frac, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1982; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1994
 *     return cmpfr.mpfr_frac(&rop._value, &op._value, rnd)
 * 
 * def mpfr_modf(Mpfr_t iop not None, Mpfr_t fop not None,             # <<<<<<<<<<<<<<
 *               Mpfr_t op not None, cmpfr.mpfr_rnd_t rnd):
 *     """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_120mpfr_modf, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_modf, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1994; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2020
 *     return decode_ternary_pair(ternary_pair)
 * 
 * def mpfr_fmod(Mpfr_t r not None, Mpfr_t x not None,             # <<<<<<<<<<<<<<
 *               Mpfr_t y not None, cmpfr.mpfr_rnd_t rnd):
 *     """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_121mpfr_fmod, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_fmod, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2042
 *     return cmpfr.mpfr_fmod(&r._value, &x._value, &y._value, rnd)
 * 
 * def mpfr_remainder(Mpfr_t r not None, Mpfr_t x not None,             # <<<<<<<<<<<<<<
 *                    Mpfr_t y not None, cmpfr.mpfr_rnd_t rnd):
 *     """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_122mpfr_remainder, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2042; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_remainder, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2042; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2064
 *     return cmpfr.mpfr_remainder(&r._value, &x._value, &y._value, rnd)
 * 
 * def mpfr_remquo(Mpfr_t r not None, Mpfr_t x not None,             # <<<<<<<<<<<<<<
 *                 Mpfr_t y not None, cmpfr.mpfr_rnd_t rnd):
 *     """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_123mpfr_remquo, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_remquo, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2098
 *     return ternary, quotient
 * 
 * def mpfr_integer_p(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op is an integer.  Return False otherwise.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_124mpfr_integer_p, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2098; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_integer_p, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2098; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2111
 * ###############################################################################
 * 
 * def mpfr_set_default_rounding_mode(cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set the default rounding mode to rnd.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_125mpfr_set_default_rounding_mode, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_20, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2121
 *     cmpfr.mpfr_set_default_rounding_mode(rnd)
 * 
 * def mpfr_get_default_rounding_mode():             # <<<<<<<<<<<<<<
 *     """
 *     Get the default rounding mode.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_126mpfr_get_default_rounding_mode, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_21, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2128
 *     return cmpfr.mpfr_get_default_rounding_mode()
 * 
 * def mpfr_prec_round(             # <<<<<<<<<<<<<<
 *     Mpfr_t x not None, cmpfr.mpfr_prec_t prec, cmpfr.mpfr_rnd_t rnd
 *     ):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_127mpfr_prec_round, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_prec_round, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2160
 *     return cmpfr.mpfr_prec_round(&x._value, prec, rnd)
 * 
 * def mpfr_can_round(Mpfr_t b not None, cmpfr.mpfr_exp_t err,             # <<<<<<<<<<<<<<
 *                    cmpfr.mpfr_rnd_t rnd1, cmpfr.mpfr_rnd_t rnd2,
 *                    cmpfr.mpfr_prec_t prec):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_128mpfr_can_round, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_can_round, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2194
 *     return bool(cmpfr.mpfr_can_round(&b._value, err, rnd1, rnd2, prec))
 * 
 * def mpfr_min_prec(Mpfr_t x not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return the minimal number of bits required to store the significand of x,
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_129mpfr_min_prec, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_min_prec, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2206
 *     return cmpfr.mpfr_min_prec(&x._value)
 * 
 * def mpfr_print_rnd_mode(cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Return a string ("MPFR_RNDD", "MPFR_RNDU", "MPFR_RNDN", "MPFR_RNDZ",
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_130mpfr_print_rnd_mode, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_print_rnd_mode, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2222
 * ###############################################################################
 * 
 * def mpfr_nexttoward(Mpfr_t x not None, Mpfr_t y not None):             # <<<<<<<<<<<<<<
 *     """
 *     Replace x by the next floating-point number in the direction of y.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_131mpfr_nexttoward, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_nexttoward, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2238
 *     cmpfr.mpfr_nexttoward(&x._value, &y._value)
 * 
 * def mpfr_nextabove(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Equivalent to mpfr_nexttoward(op, y) where y is plus infinity.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_132mpfr_nextabove, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_nextabove, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2246
 *     cmpfr.mpfr_nextabove(&op._value)
 * 
 * def mpfr_nextbelow(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Equivalent to mpfr_nexttoward(op, y) where y is minus infinity.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_133mpfr_nextbelow, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_nextbelow, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2254
 *     cmpfr.mpfr_nextbelow(&op._value)
 * 
 * def mpfr_min(Mpfr_t rop not None, Mpfr_t op1 not None, Mpfr_t op2 not None,             # <<<<<<<<<<<<<<
 *              cmpfr.mpfr_rnd_t rnd):
 *     """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_134mpfr_min, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_min, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2270
 *     return cmpfr.mpfr_min(&rop._value, &op1._value, &op2._value, rnd)
 * 
 * def mpfr_max(Mpfr_t rop not None, Mpfr_t op1 not None, Mpfr_t op2 not None,             # <<<<<<<<<<<<<<
 *              cmpfr.mpfr_rnd_t rnd):
 *     """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_135mpfr_max, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_max, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2286
 *     return cmpfr.mpfr_max(&rop._value, &op1._value, &op2._value, rnd)
 * 
 * def mpfr_get_exp(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return the exponent of op.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_136mpfr_get_exp, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_get_exp, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2298
 *     return cmpfr.mpfr_get_exp(&op._value)
 * 
 * def mpfr_set_exp(Mpfr_t op not None, cmpfr.mpfr_exp_t exp):             # <<<<<<<<<<<<<<
 *     """
 *     Set the exponent of op.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_137mpfr_set_exp, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_set_exp, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2313
 *         raise ValueError("exponent not in current exponent range")
 * 
 * def mpfr_signbit(Mpfr_t op not None):             # <<<<<<<<<<<<<<
 *     """
 *     Return True if op has its sign bit set.  Return False otherwise.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_138mpfr_signbit, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_signbit, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2324
 *     return bool(cmpfr.mpfr_signbit(&op._value))
 * 
 * def mpfr_setsign(Mpfr_t rop not None, Mpfr_t op not None, s, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Set the value of rop from op and the sign of rop from s.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_139mpfr_setsign, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_setsign, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2338
 *     return cmpfr.mpfr_setsign(&rop._value, &op._value, s, rnd)
 * 
 * def mpfr_copysign(Mpfr_t rop not None, Mpfr_t op1 not None,             # <<<<<<<<<<<<<<
 *                   Mpfr_t op2 not None, cmpfr.mpfr_rnd_t rnd):
 *     """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_140mpfr_copysign, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_copysign, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2354
 *     return cmpfr.mpfr_copysign(&rop._value, &op1._value, &op2._value, rnd)
 * 
 * def mpfr_get_version():             # <<<<<<<<<<<<<<
 *     """
 *     Return the MPFR version, as a string.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_141mpfr_get_version, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_get_version, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2361
 *     return cmpfr.mpfr_get_version()
 * 
 * MPFR_VERSION = cmpfr.MPFR_VERSION             # <<<<<<<<<<<<<<
 * MPFR_VERSION_MAJOR = cmpfr.MPFR_VERSION_MAJOR
 * MPFR_VERSION_MINOR = cmpfr.MPFR_VERSION_MINOR
 */
  __pyx_t_1 = PyInt_FromLong(MPFR_VERSION); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__MPFR_VERSION, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2362
 * 
 * MPFR_VERSION = cmpfr.MPFR_VERSION
 * MPFR_VERSION_MAJOR = cmpfr.MPFR_VERSION_MAJOR             # <<<<<<<<<<<<<<
 * MPFR_VERSION_MINOR = cmpfr.MPFR_VERSION_MINOR
 * MPFR_VERSION_PATCHLEVEL = cmpfr.MPFR_VERSION_PATCHLEVEL
 */
  __pyx_t_1 = PyInt_FromLong(MPFR_VERSION_MAJOR); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__MPFR_VERSION_MAJOR, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2363
 * MPFR_VERSION = cmpfr.MPFR_VERSION
 * MPFR_VERSION_MAJOR = cmpfr.MPFR_VERSION_MAJOR
 * MPFR_VERSION_MINOR = cmpfr.MPFR_VERSION_MINOR             # <<<<<<<<<<<<<<
 * MPFR_VERSION_PATCHLEVEL = cmpfr.MPFR_VERSION_PATCHLEVEL
 * MPFR_VERSION_STRING = cmpfr.MPFR_VERSION_STRING
 */
  __pyx_t_1 = PyInt_FromLong(MPFR_VERSION_MINOR); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__MPFR_VERSION_MINOR, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2364
 * MPFR_VERSION_MAJOR = cmpfr.MPFR_VERSION_MAJOR
 * MPFR_VERSION_MINOR = cmpfr.MPFR_VERSION_MINOR
 * MPFR_VERSION_PATCHLEVEL = cmpfr.MPFR_VERSION_PATCHLEVEL             # <<<<<<<<<<<<<<
 * MPFR_VERSION_STRING = cmpfr.MPFR_VERSION_STRING
 * 
 */
  __pyx_t_1 = PyInt_FromLong(MPFR_VERSION_PATCHLEVEL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_22, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2365
 * MPFR_VERSION_MINOR = cmpfr.MPFR_VERSION_MINOR
 * MPFR_VERSION_PATCHLEVEL = cmpfr.MPFR_VERSION_PATCHLEVEL
 * MPFR_VERSION_STRING = cmpfr.MPFR_VERSION_STRING             # <<<<<<<<<<<<<<
 * 
 * def MPFR_VERSION_NUM(int major, int minor, int patchlevel):
 */
  __pyx_t_1 = PyBytes_FromString(MPFR_VERSION_STRING); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__MPFR_VERSION_STRING, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "mpfr.pyx":2367
 * MPFR_VERSION_STRING = cmpfr.MPFR_VERSION_STRING
 * 
 * def MPFR_VERSION_NUM(int major, int minor, int patchlevel):             # <<<<<<<<<<<<<<
 *     """
 *     Create an integer in the same format as used by MPFR_VERSION from the given
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_142MPFR_VERSION_NUM, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__MPFR_VERSION_NUM, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2375
 *     return cmpfr.MPFR_VERSION_NUM(major, minor, patchlevel)
 * 
 * def mpfr_get_patches():             # <<<<<<<<<<<<<<
 *     """
 *     Return information about patches applied to the MPFR library.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_143mpfr_get_patches, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_get_patches, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2390
 *     return cmpfr.mpfr_get_patches().split()
 * 
 * def mpfr_buildopt_tls_p():             # <<<<<<<<<<<<<<
 *     """
 *     Return True if MPFR was compiled as thread safe using compiler-level Thread
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_144mpfr_buildopt_tls_p, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_buildopt_tls_p, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2399
 *     return bool(cmpfr.mpfr_buildopt_tls_p())
 * 
 * def mpfr_buildopt_decimal_p():             # <<<<<<<<<<<<<<
 *     """
 *     Return True if MPFR was compiled with decimal float support (that is, MPFR
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_145mpfr_buildopt_decimal_p, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_23, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2414
 * 
 * 
 * def mpfr_get_emin():             # <<<<<<<<<<<<<<
 *     """
 *     Return smallest exponent allowed.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_146mpfr_get_emin, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_get_emin, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2425
 *     return cmpfr.mpfr_get_emin()
 * 
 * def mpfr_get_emax():             # <<<<<<<<<<<<<<
 *     """
 *     Return largest exponent allowed.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_147mpfr_get_emax, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_get_emax, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2437
 *     return cmpfr.mpfr_get_emax()
 * 
 * def mpfr_set_emin(cmpfr.mpfr_exp_t exp):             # <<<<<<<<<<<<<<
 *     """
 *     Set the smallest exponent allowed for a floating-point variable.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_148mpfr_set_emin, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_set_emin, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2454
 *         raise ValueError("new exponent for emin is outside allowable range")
 * 
 * def mpfr_set_emax(cmpfr.mpfr_exp_t exp):             # <<<<<<<<<<<<<<
 *     """
 *     Set the largest exponent allowed for a floating-point variable.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_149mpfr_set_emax, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_set_emax, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2471
 *         raise ValueError("new exponent for emin is outside allowable range")
 * 
 * def mpfr_get_emin_min():             # <<<<<<<<<<<<<<
 *     """
 *     Return the minimum exponent allowed for mpfr_set_emin.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_150mpfr_get_emin_min, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_get_emin_min, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2481
 *     return cmpfr.mpfr_get_emin_min()
 * 
 * def mpfr_get_emin_max():             # <<<<<<<<<<<<<<
 *     """
 *     Return the maximum exponent allowed for mpfr_set_emin.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_151mpfr_get_emin_max, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_get_emin_max, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2491
 *     return cmpfr.mpfr_get_emin_max()
 * 
 * def mpfr_get_emax_min():             # <<<<<<<<<<<<<<
 *     """
 *     Return the minimum exponent allowed for mpfr_set_emax.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_152mpfr_get_emax_min, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_get_emax_min, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2501
 *     return cmpfr.mpfr_get_emax_min()
 * 
 * def mpfr_get_emax_max():             # <<<<<<<<<<<<<<
 *     """
 *     Return the maximum exponent allowed for mpfr_set_emax.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_153mpfr_get_emax_max, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_get_emax_max, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2511
 *     return cmpfr.mpfr_get_emax_max()
 * 
 * def mpfr_check_range(Mpfr_t x not None, int t, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Modify x if necessary to fit into the current exponent range.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_154mpfr_check_range, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_check_range, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2540
 *     return cmpfr.mpfr_check_range(&x._value, t, rnd)
 * 
 * def mpfr_subnormalize(Mpfr_t x not None, int t, cmpfr.mpfr_rnd_t rnd):             # <<<<<<<<<<<<<<
 *     """
 *     Modify x if necessary to account for subnormalization.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_155mpfr_subnormalize, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_subnormalize, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2540; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2571
 *     return cmpfr.mpfr_subnormalize(&x._value, t, rnd)
 * 
 * def mpfr_clear_underflow():             # <<<<<<<<<<<<<<
 *     """
 *     Clear the underflow flag.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_156mpfr_clear_underflow, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_24, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2571; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2578
 *     cmpfr.mpfr_clear_underflow()
 * 
 * def mpfr_clear_overflow():             # <<<<<<<<<<<<<<
 *     """
 *     Clear the overflow flag.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_157mpfr_clear_overflow, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_clear_overflow, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2578; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2585
 *     cmpfr.mpfr_clear_overflow()
 * 
 * def mpfr_clear_nanflag():             # <<<<<<<<<<<<<<
 *     """
 *     Clear the invalid flag.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_158mpfr_clear_nanflag, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_clear_nanflag, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2585; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2592
 *     cmpfr.mpfr_clear_nanflag()
 * 
 * def mpfr_clear_inexflag():             # <<<<<<<<<<<<<<
 *     """
 *     Clear the inexact flag.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_159mpfr_clear_inexflag, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_clear_inexflag, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2592; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2599
 *     cmpfr.mpfr_clear_inexflag()
 * 
 * def mpfr_clear_erangeflag():             # <<<<<<<<<<<<<<
 *     """
 *     Clear the erange flag.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_160mpfr_clear_erangeflag, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_25, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2606
 *     cmpfr.mpfr_clear_erangeflag()
 * 
 * def mpfr_set_underflow():             # <<<<<<<<<<<<<<
 *     """
 *     Set the underflow flag.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_161mpfr_set_underflow, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_set_underflow, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2606; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2613
 *     cmpfr.mpfr_set_underflow()
 * 
 * def mpfr_set_overflow():             # <<<<<<<<<<<<<<
 *     """
 *     Set the overflow flag.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_162mpfr_set_overflow, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_set_overflow, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2613; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2620
 *     cmpfr.mpfr_set_overflow()
 * 
 * def mpfr_set_nanflag():             # <<<<<<<<<<<<<<
 *     """
 *     Set the invalid flag.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_163mpfr_set_nanflag, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_set_nanflag, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2620; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2627
 *     cmpfr.mpfr_set_nanflag()
 * 
 * def mpfr_set_inexflag():             # <<<<<<<<<<<<<<
 *     """
 *     Set the inexact flag.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_164mpfr_set_inexflag, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_set_inexflag, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2627; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2634
 *     cmpfr.mpfr_set_inexflag()
 * 
 * def mpfr_set_erangeflag():             # <<<<<<<<<<<<<<
 *     """
 *     Set the erange flag.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_165mpfr_set_erangeflag, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_set_erangeflag, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2641
 *     cmpfr.mpfr_set_erangeflag()
 * 
 * def mpfr_clear_flags():             # <<<<<<<<<<<<<<
 *     """
 *     Clear all global flags.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_166mpfr_clear_flags, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_clear_flags, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2648
 *     cmpfr.mpfr_clear_flags()
 * 
 * def mpfr_underflow_p():             # <<<<<<<<<<<<<<
 *     """
 *     Return True if the underflow flag is set, else False.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_167mpfr_underflow_p, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_underflow_p, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2648; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2655
 *     return bool(cmpfr.mpfr_underflow_p())
 * 
 * def mpfr_overflow_p():             # <<<<<<<<<<<<<<
 *     """
 *     Return True if the overflow flag is set, else False.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_168mpfr_overflow_p, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_overflow_p, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2662
 *     return bool(cmpfr.mpfr_overflow_p())
 * 
 * def mpfr_nanflag_p():             # <<<<<<<<<<<<<<
 *     """
 *     Return True if the invalid flag is set, else False.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_169mpfr_nanflag_p, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_nanflag_p, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2662; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2669
 *     return bool(cmpfr.mpfr_nanflag_p())
 * 
 * def mpfr_inexflag_p():             # <<<<<<<<<<<<<<
 *     """
 *     Return True if the inexact flag is set, else False.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_170mpfr_inexflag_p, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_inexflag_p, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":2676
 *     return bool(cmpfr.mpfr_inexflag_p())
 * 
 * def mpfr_erangeflag_p():             # <<<<<<<<<<<<<<
 *     """
 *     Return True if the erange flag is set, else False.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_4mpfr_171mpfr_erangeflag_p, NULL, __pyx_n_s__mpfr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__mpfr_erangeflag_p, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2676; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "mpfr.pyx":1
 * # -*- coding: utf-8 -*-             # <<<<<<<<<<<<<<
 * # cython: embedsignature = True
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    __Pyx_AddTraceback("init mpfr");
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init mpfr");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result)
        PyErr_SetObject(PyExc_NameError, name);
    return result;
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }

    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

#else /* Python 3+ */

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;

    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }

    PyErr_SetObject(type, value);

    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }

bad:
    return;
}
#endif

static int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (!type) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (Py_TYPE(obj) == type) return 1;
    }
    else {
        if (PyObject_TypeCheck(obj, type)) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%s' has incorrect type (expected %s, got %s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *number, *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    number = (num_expected == 1) ? "" : "s";
    PyErr_Format(PyExc_TypeError,
        #if PY_VERSION_HEX < 0x02050000
            "%s() takes %s %d positional argument%s (%d given)",
        #else
            "%s() takes %s %zd positional argument%s (%zd given)",
        #endif
        func_name, more_or_less, num_expected, number, num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #else
        if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key)))
        #endif
            goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_mpfr_prec_t(mpfr_prec_t val) {
    const mpfr_prec_t neg_one = (mpfr_prec_t)-1, const_zero = (mpfr_prec_t)0;
    const int is_unsigned = const_zero < neg_one;
    if ((sizeof(mpfr_prec_t) == sizeof(char))  ||
        (sizeof(mpfr_prec_t) == sizeof(short))) {
        return PyInt_FromLong((long)val);
    } else if ((sizeof(mpfr_prec_t) == sizeof(int)) ||
               (sizeof(mpfr_prec_t) == sizeof(long))) {
        if (is_unsigned)
            return PyLong_FromUnsignedLong((unsigned long)val);
        else
            return PyInt_FromLong((long)val);
    } else if (sizeof(mpfr_prec_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG)val);
        else
            return PyLong_FromLongLong((PY_LONG_LONG)val);
    } else {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        return _PyLong_FromByteArray(bytes, sizeof(mpfr_prec_t), 
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject *__Pyx_PyInt_to_py_mp_exp_t(mp_exp_t val) {
    const mp_exp_t neg_one = (mp_exp_t)-1, const_zero = (mp_exp_t)0;
    const int is_unsigned = const_zero < neg_one;
    if ((sizeof(mp_exp_t) == sizeof(char))  ||
        (sizeof(mp_exp_t) == sizeof(short))) {
        return PyInt_FromLong((long)val);
    } else if ((sizeof(mp_exp_t) == sizeof(int)) ||
               (sizeof(mp_exp_t) == sizeof(long))) {
        if (is_unsigned)
            return PyLong_FromUnsignedLong((unsigned long)val);
        else
            return PyInt_FromLong((long)val);
    } else if (sizeof(mp_exp_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG)val);
        else
            return PyLong_FromLongLong((PY_LONG_LONG)val);
    } else {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        return _PyLong_FromByteArray(bytes, sizeof(mp_exp_t), 
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE mpfr_prec_t __Pyx_PyInt_from_py_mpfr_prec_t(PyObject* x) {
    const mpfr_prec_t neg_one = (mpfr_prec_t)-1, const_zero = (mpfr_prec_t)0;
    const int is_unsigned = const_zero < neg_one;
    if (sizeof(mpfr_prec_t) == sizeof(char)) {
        if (is_unsigned)
            return (mpfr_prec_t)__Pyx_PyInt_AsUnsignedChar(x);
        else
            return (mpfr_prec_t)__Pyx_PyInt_AsSignedChar(x);
    } else if (sizeof(mpfr_prec_t) == sizeof(short)) {
        if (is_unsigned)
            return (mpfr_prec_t)__Pyx_PyInt_AsUnsignedShort(x);
        else
            return (mpfr_prec_t)__Pyx_PyInt_AsSignedShort(x);
    } else if (sizeof(mpfr_prec_t) == sizeof(int)) {
        if (is_unsigned)
            return (mpfr_prec_t)__Pyx_PyInt_AsUnsignedInt(x);
        else
            return (mpfr_prec_t)__Pyx_PyInt_AsSignedInt(x);
    } else if (sizeof(mpfr_prec_t) == sizeof(long)) {
        if (is_unsigned)
            return (mpfr_prec_t)__Pyx_PyInt_AsUnsignedLong(x);
        else
            return (mpfr_prec_t)__Pyx_PyInt_AsSignedLong(x);
    } else if (sizeof(mpfr_prec_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return (mpfr_prec_t)__Pyx_PyInt_AsUnsignedLongLong(x);
        else
            return (mpfr_prec_t)__Pyx_PyInt_AsSignedLongLong(x);
    }  else {
        mpfr_prec_t val;
        PyObject *v = __Pyx_PyNumber_Int(x);
        #if PY_VERSION_HEX < 0x03000000
        if (likely(v) && !PyLong_Check(v)) {
            PyObject *tmp = v;
            v = PyNumber_Long(tmp);
            Py_DECREF(tmp);
        }
        #endif
        if (likely(v)) {
            int one = 1; int is_little = (int)*(unsigned char *)&one;
            unsigned char *bytes = (unsigned char *)&val;
            int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                          bytes, sizeof(val),
                                          is_little, !is_unsigned);
            Py_DECREF(v);
            if (likely(!ret))
                return val;
        }
        return (mpfr_prec_t)-1;
    }
}

static CYTHON_INLINE mp_exp_t __Pyx_PyInt_from_py_mp_exp_t(PyObject* x) {
    const mp_exp_t neg_one = (mp_exp_t)-1, const_zero = (mp_exp_t)0;
    const int is_unsigned = const_zero < neg_one;
    if (sizeof(mp_exp_t) == sizeof(char)) {
        if (is_unsigned)
            return (mp_exp_t)__Pyx_PyInt_AsUnsignedChar(x);
        else
            return (mp_exp_t)__Pyx_PyInt_AsSignedChar(x);
    } else if (sizeof(mp_exp_t) == sizeof(short)) {
        if (is_unsigned)
            return (mp_exp_t)__Pyx_PyInt_AsUnsignedShort(x);
        else
            return (mp_exp_t)__Pyx_PyInt_AsSignedShort(x);
    } else if (sizeof(mp_exp_t) == sizeof(int)) {
        if (is_unsigned)
            return (mp_exp_t)__Pyx_PyInt_AsUnsignedInt(x);
        else
            return (mp_exp_t)__Pyx_PyInt_AsSignedInt(x);
    } else if (sizeof(mp_exp_t) == sizeof(long)) {
        if (is_unsigned)
            return (mp_exp_t)__Pyx_PyInt_AsUnsignedLong(x);
        else
            return (mp_exp_t)__Pyx_PyInt_AsSignedLong(x);
    } else if (sizeof(mp_exp_t) == sizeof(PY_LONG_LONG)) {
        if (is_unsigned)
            return (mp_exp_t)__Pyx_PyInt_AsUnsignedLongLong(x);
        else
            return (mp_exp_t)__Pyx_PyInt_AsSignedLongLong(x);
    }  else {
        mp_exp_t val;
        PyObject *v = __Pyx_PyNumber_Int(x);
        #if PY_VERSION_HEX < 0x03000000
        if (likely(v) && !PyLong_Check(v)) {
            PyObject *tmp = v;
            v = PyNumber_Long(tmp);
            Py_DECREF(tmp);
        }
        #endif
        if (likely(v)) {
            int one = 1; int is_little = (int)*(unsigned char *)&one;
            unsigned char *bytes = (unsigned char *)&val;
            int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                          bytes, sizeof(val),
                                          is_little, !is_unsigned);
            Py_DECREF(v);
            if (likely(!ret))
                return val;
        }
        return (mp_exp_t)-1;
    }
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
