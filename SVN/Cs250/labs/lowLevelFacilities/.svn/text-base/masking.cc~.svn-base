#include <iostream>

using namespace std;

unsigned int makeMask (int position) {
  // Start with a positive mask at bit position 0.
  unsigned int mask = 1;
  // Now shift the word left to move the 1 to the given position
  mask = mask << position;
  
  return (mask);
}

// PRE: position1 = i and position2 = j are defined and within the
//        range of the bit positions for a word. i >= j.
// POST: RV is a positive mask for bit positions i through j, both
//         inclusive. 
unsigned int makePositiveMask (int position1, int position2){
  unsigned int mask = 1; //make a 1 bit mask
  int range = position1 - position2; //get the range
  cout << hex;
  for (int i=1; i<=range; i++){ //for every extra bit
    mask = (mask << 1) | 1; //shift the current bits and add one
  }
  mask <<= position2; //shift the mask to the appropriate range 
  return (mask);
}


// Pre:  optional command line args
// Post: masking tests
int main(int argc, char * argv[]){
  int returnStatus = 0; //normal execution
  unsigned int mask; //mask holder
  int a = 1;
  int b = 2;
  mask = makeMask(0); //make a mask for position 0
  cout << "a & mask: " << (a & mask) << "\n should be 1\n";
  mask = makeMask(1); //make a mask for position 1
  cout << "a & mask: " << (a & mask) << "\n should be 0\n";
  cout << "b & mask: " << (b & mask) << "\n should be 2\n";
  mask = makePositiveMask(2,0);
  cout << "Test mask: " << mask << "\n Should be 7\n";
  mask = makePositiveMask(4,2);
  cout << "Test mask: " << mask << "\n Should be 1c\n";

  return (returnStatus);
}
